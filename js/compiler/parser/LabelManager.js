import { TokenType } from "../lexer/Token.js";
export class LabelManager {
    constructor(program) {
        this.maxLabelIndex = 0;
        this.labeledNodes = [];
        this.labelMap = new Map();
        this.jumpNodesToResolve = [];
        this.switchStatements = [];
        this.program = program;
    }
    correctPositionsAfterInsert(insertPosition, insertedLength) {
        for (let ln of this.labeledNodes) {
            if (ln.position != null && ln.position >= insertPosition) {
                ln.position += insertedLength;
            }
        }
    }
    registerSwitchStatement(switchStatement) {
        this.switchStatements.push(switchStatement);
    }
    insertJumpNode(type, position, codeGenerator, labelIndex) {
        let statementList = this.program.statements;
        if (position == null) {
            if (statementList.length > 0) {
                position = statementList[statementList.length - 1].position;
            }
        }
        let node = {
            type: type,
            position: position,
            stepFinished: true
        };
        codeGenerator.pushStatements(node);
        return this.registerJumpNode(node, labelIndex);
    }
    markJumpDestination(offset, labelIndex) {
        let position = this.program.statements.length - 1 + offset;
        if (labelIndex == null) {
            labelIndex = this.maxLabelIndex++;
        }
        let labeledNode = {
            position: position,
            labelIndex: labelIndex
        };
        this.labeledNodes.push(labeledNode);
        this.labelMap.set(labelIndex, labeledNode);
        return labelIndex;
    }
    removeNode(node) {
        for (let i = 0; i < this.labeledNodes.length; i++) {
            let n = this.labeledNodes[i];
            if (n.node == node) {
                let index = this.program.statements.indexOf(node);
                if (index < this.program.statements.length - 1) {
                    let newNode = this.program.statements[index + 1];
                    n.node = newNode;
                }
            }
            else {
                i++;
            }
        }
    }
    registerJumpDestination(node, labelIndex) {
        if (labelIndex == null) {
            labelIndex = this.maxLabelIndex++;
        }
        let label = {
            node: node,
            labelIndex: labelIndex
        };
        this.labeledNodes.push(label);
        this.labelMap.set(labelIndex, label);
        return labelIndex;
    }
    registerJumpNode(node, labelIndex) {
        if (labelIndex == null) {
            labelIndex = this.maxLabelIndex++;
        }
        let ntr = {
            labelIndex: labelIndex,
            node: node
        };
        this.jumpNodesToResolve.push(ntr);
        return labelIndex;
    }
    resolveNodes() {
        for (let ln of this.labeledNodes) {
            if (ln.position == null) {
                ln.position = this.program.statements.indexOf(ln.node);
            }
            else {
                while (ln.position > this.program.statements.length - 1) {
                    this.program.statements.push({
                        type: TokenType.noOp,
                        position: null
                    });
                }
                ln.node = this.program.statements[ln.position];
            }
        }
        for (let jn of this.jumpNodesToResolve) {
            let dest = this.labelMap.get(jn.labelIndex);
            if (dest != null) {
                jn.node.destination = dest.position;
            }
        }
        for (let sw of this.switchStatements) {
            for (let dl of sw.destinationLabels) {
                sw.destinationMap[dl.constant] = this.labelMap.get(dl.label).position;
            }
            sw.destinationLabels = null;
            if (sw.defaultDestination != null) {
                sw.defaultDestination = this.labelMap.get(sw.defaultDestination).position;
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,