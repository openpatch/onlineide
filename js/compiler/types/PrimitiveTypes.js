import { TokenType } from "../lexer/Token.js";
import { ArrayType } from "./Array.js";
import { Interface, Klass, setBooleanPrimitiveTypeCopy } from "./Class.js";
import { ObjectClass } from "./ObjectClass.js";
import { Method, Parameterlist, PrimitiveType, Type } from "./Types.js";
import { IntegerClass } from "./boxedTypes/IntegerClass.js";
import { FloatClass } from "./boxedTypes/FloatClass.js";
import { CharacterClass } from "./boxedTypes/CharacterClass.js";
import { BooleanClass } from "./boxedTypes/BooleanClass.js";
import { DoubleClass } from "./boxedTypes/DoubleClass.js";
export class NullType extends Type {
    constructor() {
        super();
        this.identifier = "null";
    }
    getResultType(operation, secondOperandType) {
        return null;
    }
    compute(operation, firstOperand, secondOperand) {
        return null;
    }
    canCastTo(type) {
        return (type instanceof Klass || type instanceof Interface);
    }
    castTo(value, type) {
        return value;
    }
    equals(type) {
        return (type instanceof Klass || type instanceof Interface);
    }
    debugOutput(value) {
        return "null";
    }
}
export class VarType extends Type {
    constructor() {
        super();
        this.identifier = "var";
    }
    getResultType(operation, secondOperandType) {
        return null;
    }
    compute(operation, firstOperand, secondOperand) {
        return null;
    }
    canCastTo(type) {
        return (type instanceof Klass || type instanceof Interface);
    }
    castTo(value, type) {
        return value;
    }
    equals(type) {
        return (type instanceof Klass || type instanceof Interface);
    }
    debugOutput(value) {
        return "var";
    }
}
export class IntPrimitiveType extends PrimitiveType {
    init() {
        this.initialValue = 0;
        this.identifier = "int";
        this.description = "ganze Zahl";
        this.operationTable = {
            [TokenType.plus]: { "int": intPrimitiveType, "Integer": intPrimitiveType, "float": floatPrimitiveType, "Float": floatPrimitiveType, "double": doublePrimitiveType, "Double": doublePrimitiveType, "String": stringPrimitiveType },
            [TokenType.minus]: { "none": intPrimitiveType, "int": intPrimitiveType, "Integer": intPrimitiveType, "float": floatPrimitiveType, "Float": floatPrimitiveType, "double": doublePrimitiveType, "Double": doublePrimitiveType },
            [TokenType.multiplication]: { "int": intPrimitiveType, "Integer": intPrimitiveType, "float": floatPrimitiveType, "Float": floatPrimitiveType, "double": doublePrimitiveType, "Double": doublePrimitiveType },
            [TokenType.modulo]: { "int": intPrimitiveType, "Integer": intPrimitiveType },
            [TokenType.division]: { "int": intPrimitiveType, "Integer": intPrimitiveType, "float": floatPrimitiveType, "Float": floatPrimitiveType, "double": doublePrimitiveType, "Double": doublePrimitiveType },
            [TokenType.doublePlus]: { "none": intPrimitiveType },
            [TokenType.doubleMinus]: { "none": intPrimitiveType },
            [TokenType.negation]: { "none": intPrimitiveType },
            [TokenType.tilde]: { "none": intPrimitiveType },
            [TokenType.lower]: { "int": booleanPrimitiveType, "float": booleanPrimitiveType, "double": booleanPrimitiveType, "Integer": booleanPrimitiveType, "Float": booleanPrimitiveType, "Double": booleanPrimitiveType },
            [TokenType.greater]: { "int": booleanPrimitiveType, "float": booleanPrimitiveType, "double": booleanPrimitiveType, "Integer": booleanPrimitiveType, "Float": booleanPrimitiveType, "Double": booleanPrimitiveType },
            [TokenType.lowerOrEqual]: { "int": booleanPrimitiveType, "float": booleanPrimitiveType, "double": booleanPrimitiveType, "Integer": booleanPrimitiveType, "Float": booleanPrimitiveType, "Double": booleanPrimitiveType },
            [TokenType.greaterOrEqual]: { "int": booleanPrimitiveType, "float": booleanPrimitiveType, "double": booleanPrimitiveType, "Integer": booleanPrimitiveType, "Float": booleanPrimitiveType, "Double": booleanPrimitiveType },
            [TokenType.equal]: { "int": booleanPrimitiveType, "float": booleanPrimitiveType, "double": booleanPrimitiveType, "Integer": booleanPrimitiveType, "Float": booleanPrimitiveType, "Double": booleanPrimitiveType },
            [TokenType.notEqual]: { "int": booleanPrimitiveType, "float": booleanPrimitiveType, "double": booleanPrimitiveType, "Integer": booleanPrimitiveType, "Float": booleanPrimitiveType, "Double": booleanPrimitiveType },
            // binary ops
            [TokenType.OR]: { "int": intPrimitiveType, "Integer": intPrimitiveType },
            [TokenType.XOR]: { "int": intPrimitiveType, "Integer": intPrimitiveType },
            [TokenType.ampersand]: { "int": intPrimitiveType, "Integer": intPrimitiveType },
            [TokenType.shiftLeft]: { "int": intPrimitiveType, "Integer": intPrimitiveType },
            [TokenType.shiftRight]: { "int": intPrimitiveType, "Integer": intPrimitiveType },
            [TokenType.shiftRightUnsigned]: { "int": intPrimitiveType, "Integer": intPrimitiveType }
        };
        // this.canCastTolist = [floatPrimitiveType, doublePrimitiveType, stringPrimitiveType, charPrimitiveType];
        this.canCastToMap = {
            "float": { automatic: true, needsStatement: false },
            "double": { automatic: true, needsStatement: false },
            "String": { automatic: true, needsStatement: true },
            "char": { automatic: true, needsStatement: true },
            "int": { automatic: true, needsStatement: false },
            "Integer": { automatic: true, needsStatement: false },
        };
    }
    toTokenType() {
        return TokenType.integerConstant;
    }
    castTo(value, type) {
        if (type == floatPrimitiveType || type == doublePrimitiveType) {
            return {
                type: type,
                value: value.value
            };
        }
        if (type == stringPrimitiveType) {
            return {
                type: type,
                value: "" + value.value
            };
        }
        if (type == charPrimitiveType) {
            return {
                type: type,
                value: String.fromCharCode(value.value)
            };
        }
    }
    compute(operation, firstOperand, secondOperand) {
        let value = (firstOperand.value);
        switch (operation) {
            case TokenType.plus:
                if (secondOperand.type == stringPrimitiveType) {
                    return value + (secondOperand.value);
                }
                else {
                    return value + (secondOperand.value);
                }
            case TokenType.minus:
                if (secondOperand == null)
                    return -value;
                return value - (secondOperand.value);
            case TokenType.multiplication:
                return value * (secondOperand.value);
            case TokenType.division:
                if (secondOperand.type == intPrimitiveType) {
                    return Math.trunc(value / (secondOperand.value));
                }
                return value / (secondOperand.value);
            case TokenType.modulo:
                if (secondOperand.type == intPrimitiveType) {
                    return Math.trunc(value % (secondOperand.value));
                }
                return 1;
            case TokenType.doublePlus:
                return value++;
            case TokenType.doubleMinus:
                return value--;
            case TokenType.negation:
                return -value;
            case TokenType.tilde:
                return ~value;
            case TokenType.lower:
                return value < (secondOperand.value);
            case TokenType.greater:
                return value > (secondOperand.value);
            case TokenType.lowerOrEqual:
                return value <= (secondOperand.value);
            case TokenType.greaterOrEqual:
                return value >= (secondOperand.value);
            case TokenType.equal:
                return value == (secondOperand.value);
            case TokenType.notEqual:
                return value != (secondOperand.value);
            case TokenType.OR:
                return value | (secondOperand.value);
            case TokenType.XOR:
                return value ^ (secondOperand.value);
            case TokenType.ampersand:
                return value & (secondOperand.value);
            case TokenType.shiftLeft:
                return value << (secondOperand.value);
            case TokenType.shiftRight:
                return value >> (secondOperand.value);
            case TokenType.shiftRightUnsigned:
                return value >>> (secondOperand.value);
        }
    }
    debugOutput(value) {
        return "" + value.value;
    }
}
export class FloatPrimitiveType extends PrimitiveType {
    init() {
        this.initialValue = 0;
        this.identifier = "float";
        this.description = "Flie√ükommazahl mit einfacher Genauigkeit";
        this.operationTable = {
            [TokenType.plus]: { "Integer": floatPrimitiveType, "int": floatPrimitiveType, "float": floatPrimitiveType, "Float": floatPrimitiveType, "double": doublePrimitiveType, "Double": doublePrimitiveType, "String": stringPrimitiveType },
            [TokenType.minus]: { "none": floatPrimitiveType, "Integer": floatPrimitiveType, "int": floatPrimitiveType, "float": floatPrimitiveType, "Float": floatPrimitiveType, "double": doublePrimitiveType, "Double": doublePrimitiveType },
            [TokenType.multiplication]: { "Integer": floatPrimitiveType, "int": floatPrimitiveType, "float": floatPrimitiveType, "Float": floatPrimitiveType, "double": doublePrimitiveType, "Double": doublePrimitiveType },
            [TokenType.division]: { "Integer": floatPrimitiveType, "int": floatPrimitiveType, "float": floatPrimitiveType, "Float": floatPrimitiveType, "double": doublePrimitiveType, "Double": doublePrimitiveType },
            [TokenType.doublePlus]: { "none": floatPrimitiveType },
            [TokenType.doubleMinus]: { "none": floatPrimitiveType },
            [TokenType.negation]: { "none": floatPrimitiveType },
            [TokenType.lower]: { "int": booleanPrimitiveType, "float": booleanPrimitiveType, "double": booleanPrimitiveType, "Integer": booleanPrimitiveType, "Float": booleanPrimitiveType, "Double": booleanPrimitiveType },
            [TokenType.greater]: { "int": booleanPrimitiveType, "float": booleanPrimitiveType, "double": booleanPrimitiveType, "Integer": booleanPrimitiveType, "Float": booleanPrimitiveType, "Double": booleanPrimitiveType },
            [TokenType.lowerOrEqual]: { "int": booleanPrimitiveType, "float": booleanPrimitiveType, "double": booleanPrimitiveType, "Integer": booleanPrimitiveType, "Float": booleanPrimitiveType, "Double": booleanPrimitiveType },
            [TokenType.greaterOrEqual]: { "int": booleanPrimitiveType, "float": booleanPrimitiveType, "double": booleanPrimitiveType, "Integer": booleanPrimitiveType, "Float": booleanPrimitiveType, "Double": booleanPrimitiveType },
            [TokenType.equal]: { "int": booleanPrimitiveType, "float": booleanPrimitiveType, "double": booleanPrimitiveType, "Integer": booleanPrimitiveType, "Float": booleanPrimitiveType, "Double": booleanPrimitiveType },
            [TokenType.notEqual]: { "int": booleanPrimitiveType, "float": booleanPrimitiveType, "double": booleanPrimitiveType, "Integer": booleanPrimitiveType, "Float": booleanPrimitiveType, "Double": booleanPrimitiveType },
        };
        // this.canCastTolist = [intPrimitiveType, stringPrimitiveType, doublePrimitiveType];
        this.canCastToMap = {
            "int": { automatic: false, needsStatement: true },
            "double": { automatic: true, needsStatement: false },
            "float": { automatic: true, needsStatement: false },
            "String": { automatic: true, needsStatement: true },
            "Float": { automatic: true, needsStatement: false },
            "Double": { automatic: true, needsStatement: false },
        };
    }
    toTokenType() {
        return TokenType.floatingPointConstant;
    }
    castTo(value, type) {
        if (type == stringPrimitiveType) {
            return {
                type: type,
                value: "" + value.value
            };
        }
        if (type == intPrimitiveType) {
            return {
                type: type,
                value: Math.trunc(value.value)
            };
        }
        if (type == doublePrimitiveType) {
            return {
                type: type,
                value: value.value
            };
        }
    }
    compute(operation, firstOperand, secondOperand) {
        let value = (firstOperand.value);
        switch (operation) {
            case TokenType.plus:
                if (secondOperand.type == stringPrimitiveType) {
                    return value + (secondOperand.value);
                }
                else {
                    return value + (secondOperand.value);
                }
            case TokenType.minus:
                if (secondOperand == null)
                    return -value;
                return value - (secondOperand.value);
            case TokenType.multiplication:
                return value * (secondOperand.value);
            case TokenType.division:
                return value / (secondOperand.value);
            case TokenType.doublePlus:
                return value++;
            case TokenType.doubleMinus:
                return value--;
            case TokenType.negation:
                return -value;
            case TokenType.lower:
                return value < (secondOperand.value);
            case TokenType.greater:
                return value > (secondOperand.value);
            case TokenType.lowerOrEqual:
                return value <= (secondOperand.value);
            case TokenType.greaterOrEqual:
                return value >= (secondOperand.value);
            case TokenType.equal:
                return value == (secondOperand.value);
            case TokenType.notEqual:
                return value != (secondOperand.value);
        }
    }
    debugOutput(value) {
        return "" + value.value;
    }
}
export class DoublePrimitiveType extends PrimitiveType {
    init() {
        this.initialValue = 0;
        this.identifier = "double";
        this.description = "Flie√ükommazahl mit doppelter Genauigkeit";
        this.operationTable = {
            [TokenType.plus]: { "int": doublePrimitiveType, "Integer": doublePrimitiveType, "float": doublePrimitiveType, "Float": doublePrimitiveType, "double": doublePrimitiveType, "Double": doublePrimitiveType, "String": stringPrimitiveType },
            [TokenType.minus]: { "none": doublePrimitiveType, "int": doublePrimitiveType, "Integer": doublePrimitiveType, "float": doublePrimitiveType, "Float": doublePrimitiveType, "double": doublePrimitiveType, "Double": doublePrimitiveType },
            [TokenType.multiplication]: { "int": doublePrimitiveType, "Integer": doublePrimitiveType, "float": doublePrimitiveType, "Float": doublePrimitiveType, "double": doublePrimitiveType, "Double": doublePrimitiveType },
            [TokenType.division]: { "int": doublePrimitiveType, "Integer": doublePrimitiveType, "float": doublePrimitiveType, "Float": doublePrimitiveType, "double": doublePrimitiveType, "Double": doublePrimitiveType },
            [TokenType.doublePlus]: { "none": doublePrimitiveType },
            [TokenType.doubleMinus]: { "none": doublePrimitiveType },
            [TokenType.negation]: { "none": doublePrimitiveType },
            [TokenType.lower]: { "int": booleanPrimitiveType, "float": booleanPrimitiveType, "double": booleanPrimitiveType, "Integer": booleanPrimitiveType, "Float": booleanPrimitiveType, "Double": booleanPrimitiveType },
            [TokenType.greater]: { "int": booleanPrimitiveType, "float": booleanPrimitiveType, "double": booleanPrimitiveType, "Integer": booleanPrimitiveType, "Float": booleanPrimitiveType, "Double": booleanPrimitiveType },
            [TokenType.lowerOrEqual]: { "int": booleanPrimitiveType, "float": booleanPrimitiveType, "double": booleanPrimitiveType, "Integer": booleanPrimitiveType, "Float": booleanPrimitiveType, "Double": booleanPrimitiveType },
            [TokenType.greaterOrEqual]: { "int": booleanPrimitiveType, "float": booleanPrimitiveType, "double": booleanPrimitiveType, "Integer": booleanPrimitiveType, "Float": booleanPrimitiveType, "Double": booleanPrimitiveType },
            [TokenType.equal]: { "int": booleanPrimitiveType, "float": booleanPrimitiveType, "double": booleanPrimitiveType, "Integer": booleanPrimitiveType, "Float": booleanPrimitiveType, "Double": booleanPrimitiveType },
            [TokenType.notEqual]: { "int": booleanPrimitiveType, "float": booleanPrimitiveType, "double": booleanPrimitiveType, "Integer": booleanPrimitiveType, "Float": booleanPrimitiveType, "Double": booleanPrimitiveType },
        };
        // this.canCastTolist = [intPrimitiveType, stringPrimitiveType, floatPrimitiveType];
        this.canCastToMap = {
            "int": { automatic: false, needsStatement: true },
            "float": { automatic: true, needsStatement: false },
            "double": { automatic: true, needsStatement: false },
            "String": { automatic: true, needsStatement: true },
            "Float": { automatic: true, needsStatement: false },
            "Double": { automatic: true, needsStatement: false },
        };
    }
    toTokenType() {
        return TokenType.floatingPointConstant;
    }
    castTo(value, type) {
        if (type == stringPrimitiveType) {
            return {
                type: type,
                value: "" + value.value
            };
        }
        if (type == intPrimitiveType) {
            return {
                type: type,
                value: Math.trunc(value.value)
            };
        }
        if (type == floatPrimitiveType) {
            return {
                type: type,
                value: value.value
            };
        }
    }
    compute(operation, firstOperand, secondOperand) {
        let value = (firstOperand.value);
        switch (operation) {
            case TokenType.plus:
                if (secondOperand.type == stringPrimitiveType) {
                    return value + (secondOperand.value);
                }
                else {
                    return value + (secondOperand.value);
                }
            case TokenType.minus:
                if (secondOperand == null)
                    return -value;
                return value - (secondOperand.value);
            case TokenType.multiplication:
                return value * (secondOperand.value);
            case TokenType.division:
                return value / (secondOperand.value);
            case TokenType.doublePlus:
                return value++;
            case TokenType.doubleMinus:
                return value--;
            case TokenType.negation:
                return -value;
            case TokenType.lower:
                return value < (secondOperand.value);
            case TokenType.greater:
                return value > (secondOperand.value);
            case TokenType.lowerOrEqual:
                return value <= (secondOperand.value);
            case TokenType.greaterOrEqual:
                return value >= (secondOperand.value);
            case TokenType.equal:
                return value == (secondOperand.value);
            case TokenType.notEqual:
                return value != (secondOperand.value);
        }
    }
    debugOutput(value) {
        return "" + value.value;
    }
}
export class BooleanPrimitiveType extends PrimitiveType {
    init() {
        this.initialValue = false;
        this.identifier = "boolean";
        this.description = "boolescher Wert (true oder false)";
        this.operationTable = {
            [TokenType.plus]: { "String": stringPrimitiveType },
            [TokenType.and]: { "boolean": booleanPrimitiveType },
            [TokenType.or]: { "boolean": booleanPrimitiveType },
            [TokenType.not]: { "none": booleanPrimitiveType },
            [TokenType.equal]: { "boolean": booleanPrimitiveType },
            [TokenType.notEqual]: { "boolean": booleanPrimitiveType },
        };
        this.canCastToMap = {
            "String": { automatic: true, needsStatement: true },
            "boolean": { automatic: true, needsStatement: false },
            "Boolean": { automatic: true, needsStatement: false },
        };
    }
    toTokenType() {
        return TokenType.booleanConstant;
    }
    castTo(value, type) {
        if (type == stringPrimitiveType) {
            return {
                type: type,
                value: "" + value.value
            };
        }
    }
    compute(operation, firstOperand, secondOperand) {
        let value = (firstOperand.value);
        switch (operation) {
            case TokenType.plus:
                return value + (secondOperand.value);
            case TokenType.equal:
                return value == (secondOperand.value);
            case TokenType.notEqual:
                return value != (secondOperand.value);
            case TokenType.and:
                return value && (secondOperand.value);
            case TokenType.or:
                return value || (secondOperand.value);
            case TokenType.not:
                return !value;
        }
    }
    debugOutput(value) {
        return "" + value.value;
    }
}
export class VoidPrimitiveType extends PrimitiveType {
    init() {
        this.initialValue = false;
        this.identifier = "void";
        this.description = "leerer R√ºckgabewert";
        this.operationTable = {};
        this.canCastToMap = {};
    }
    toTokenType() {
        return TokenType.keywordVoid;
    }
    castTo(value, type) {
        return value;
    }
    compute(operation, firstOperand, secondOperand) {
        return null;
    }
    debugOutput(value) {
        return "void";
    }
}
export class StringPrimitiveType extends Klass {
    constructor(baseClass) {
        super("String", null, "Ein Objekt der Klasse String speichert eine Zeichenkette.");
        this.baseClass = baseClass;
        let stringClass = this;
        baseClass.methods.filter(m => m.identifier == "toString").forEach(m => m.returnType = stringClass);
    }
    toTokenType() {
        return TokenType.stringConstant;
    }
    getResultType(operation, secondOperandType) {
        if (operation == TokenType.keywordInstanceof) {
            return super.getResultType(operation, secondOperandType);
        }
        let opTypeMap = this.operationTable[operation];
        if (opTypeMap == null) {
            return null; // Operation not possible
        }
        if (secondOperandType != null) {
            return opTypeMap[secondOperandType.identifier];
        }
        return opTypeMap["none"];
    }
    init() {
        this.operationTable = {
            [TokenType.plus]: {
                "String": stringPrimitiveType, "int": stringPrimitiveType,
                "float": stringPrimitiveType, "double": doublePrimitiveType,
                "boolean": stringPrimitiveType, "char": stringPrimitiveType
            },
            [TokenType.equal]: { "String": booleanPrimitiveType, "null": booleanPrimitiveType },
            [TokenType.notEqual]: { "String": booleanPrimitiveType, "null": booleanPrimitiveType },
            [TokenType.lower]: { "String": booleanPrimitiveType },
            [TokenType.greater]: { "String": booleanPrimitiveType },
            [TokenType.lowerOrEqual]: { "String": booleanPrimitiveType },
            [TokenType.greaterOrEqual]: { "String": booleanPrimitiveType }
        };
        this.addMethod(new Method("length", new Parameterlist([]), intPrimitiveType, (parameters) => { return parameters[0].value.length; }, false, false, "L√§nge der Zeichenkette, d.h. Anzahl der Zeichen in der Zeichenkette."));
        this.addMethod(new Method("charAt", new Parameterlist([{ identifier: "Position", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: false }]), charPrimitiveType, (parameters) => { return parameters[0].value.charAt((parameters[1].value)); }, false, false, "Zeichen an der gegebenen Position.\n**Bem.: ** Position == 0 bedeutet das erste Zeichen in der Zeichenkette, Position == 1 das zweite usw. ."));
        this.addMethod(new Method("equals", new Parameterlist([{ identifier: "otherString", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: false }]), booleanPrimitiveType, (parameters) => { return parameters[0].value == (parameters[1].value); }, false, false, "Gibt genau dann **wahr** zur√ºck, wenn die zwei Zeichenketten √ºbereinstimmen (unter Ber√ºcksichtigung von Klein-/Gro√üschreibung)."));
        this.addMethod(new Method("compareTo", new Parameterlist([{ identifier: "otherString", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: false }]), intPrimitiveType, (parameters) => { return (parameters[0].value).localeCompare((parameters[1].value), 'de', { caseFirst: 'upper' }); }, false, false, "Vergleicht den String mit dem √ºbergebenen String. Gibt -1 zur√ºck, falls ersterer im Alphabet vor letzterem steht, +1, falls umgekehrt und 0, falls beide Strings identisch sind."));
        this.addMethod(new Method("compareToIgnoreCase", new Parameterlist([{ identifier: "otherString", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: false }]), intPrimitiveType, (parameters) => { return (parameters[0].value).localeCompare((parameters[1].value), 'de', { sensitivity: "accent" }); }, false, false, "Vergleicht den String mit dem √ºbergebenen String. Gibt -1 zur√ºck, falls ersterer im Alphabet vor letzterem steht, +1, falls umgekehrt und 0, falls beide Strings identisch sind."));
        this.addMethod(new Method("equalsIgnoreCase", new Parameterlist([{ identifier: "otherString", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: false }]), booleanPrimitiveType, (parameters) => { return (parameters[0].value).toLowerCase() == (parameters[1].value).toLowerCase(); }, false, false, "Gibt genau dann **wahr** zur√ºck, wenn die zwei Zeichenketten √ºbereinstimmen (**ohne** Ber√ºcksichtigung von Klein-/Gro√üschreibung)."));
        this.addMethod(new Method("endsWith", new Parameterlist([{ identifier: "suffix", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: false }]), booleanPrimitiveType, (parameters) => { return (parameters[0].value).endsWith((parameters[1].value)); }, false, false, "Gibt genau dann **wahr** zur√ºck, wenn die Zeichenkette mit der √ºbergebenen Zeichenkette ( = suffix) endet. Klein-/Gro√üschreibung wird dabei ber√ºcksichtigt!"));
        this.addMethod(new Method("startsWith", new Parameterlist([{ identifier: "pr√§fix", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: false }]), booleanPrimitiveType, (parameters) => { return (parameters[0].value).startsWith((parameters[1].value)); }, false, false, "Gibt genau dann **wahr** zur√ºck, wenn die Zeichenkette mit der √ºbergebenen Zeichenkette ( = pr√§fix) beginnt. Klein-/Gro√üschreibung wird dabei ber√ºcksichtigt!"));
        this.addMethod(new Method("toLowerCase", new Parameterlist([]), stringPrimitiveType, (parameters) => { return (parameters[0].value).toLocaleLowerCase(); }, false, false, "Gibt die Zeichenkette zur√ºck, die sich ergibt, wenn man in der gegebenen Zeichnkette jeden Gro√übuchstaben durch den entsprechenden Kleinbuchstaben ersetzt.\n**Bemerkung: ** Die Methode ver√§ndert die Zeichenkette selbst nicht."));
        this.addMethod(new Method("toUpperCase", new Parameterlist([]), stringPrimitiveType, (parameters) => { return (parameters[0].value).toLocaleUpperCase(); }, false, false, "Gibt die Zeichenkette zur√ºck, die sich ergibt, wenn man in der gegebenen Zeichnkette jeden Kleinbuchstaben durch den entsprechenden Gro√übuchstaben ersetzt.\n**Bemerkung: ** Die Methode ver√§ndert die Zeichenkette selbst nicht."));
        this.addMethod(new Method("substring", new Parameterlist([{ identifier: "beginIndex", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: false }]), stringPrimitiveType, (parameters) => { return (parameters[0].value).substring((parameters[1].value)); }, false, false, "Gibt das hintere Ende der Zeichenkette ab **beginIndex** zur√ºck. **beginIndex** == 1 bedeutet, dass die Zeichenkette ab dem 2.(!) Zeichen zur√ºckgegeben wird. "));
        this.addMethod(new Method("substring", new Parameterlist([{ identifier: "beginIndex", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: false },
            { identifier: "endIndex", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: false }]), stringPrimitiveType, (parameters) => { return (parameters[0].value).substring((parameters[1].value), (parameters[2].value)); }, false, false, "Gibt die Teil-Zeichenkette von **beginIndex** bis **endIndex** zur√ºck.\n**Vorsicht: ** beginIndex und endIndex sind nullbasiert, d.h. beginIndex == 0 bedeutet die Position vor dem ersten Zeichen."));
        this.addMethod(new Method("trim", new Parameterlist([]), stringPrimitiveType, (parameters) => { return (parameters[0].value).trim(); }, false, false, "Gibt die Zeichenkette zur√ºck, die entsteht, wenn man am Anfang und Ende der Zeichenkette alle Leerzeichen, Tabs und Zeilenumbr√ºche entfernt."));
        this.addMethod(new Method("isEmpty", new Parameterlist([]), booleanPrimitiveType, (parameters) => { return (parameters[0].value) == ""; }, false, false, "Gibt genau dann wahr zur√ºck, wenn die Zeichenkette leer ist.\n**Warnung: ** Die Methode darf nicht mit dem '''null'''-Objekt aufgerufen werden!"));
        this.addMethod(new Method("indexOf", new Parameterlist([{ identifier: "otherString", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: false }]), intPrimitiveType, (parameters) => { return (parameters[0].value).indexOf((parameters[1].value)); }, false, false, "Gibt die erste Position zur√ºck, an der **otherString** in der Zeichenkette gefunden wird."));
        this.addMethod(new Method("indexOf", new Parameterlist([
            { identifier: "otherString", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: false },
            { identifier: "fromIndex", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: false },
        ]), intPrimitiveType, (parameters) => { return (parameters[0].value).indexOf((parameters[1].value), (parameters[2].value)); }, false, false, "Gibt die erste Position zur√ºck, an der **otherString** in der Zeichenkette gefunden wird. Dabei wird erst bei fromIndex mit der Suche begonnen."));
        this.addMethod(new Method("lastIndexOf", new Parameterlist([{ identifier: "otherString", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: false }]), intPrimitiveType, (parameters) => { return (parameters[0].value).lastIndexOf((parameters[1].value)); }, false, false, "Gibt die letzte Position zur√ºck, bei der otherString in der Zeichenkette gefunden wird."));
        this.addMethod(new Method("lastIndexOf", new Parameterlist([
            { identifier: "otherString", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: false },
            { identifier: "fromIndex", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: false },
        ]), intPrimitiveType, (parameters) => { return (parameters[0].value).lastIndexOf((parameters[1].value), (parameters[2].value)); }, false, false, "Gibt die letzte Position zur√ºck, bei der otherString in der Zeichenkette gefunden wird. Dabei wird erst bei fromIndex - von rechts her beginnend - gesucht."));
        this.addMethod(new Method("replace", new Parameterlist([
            { identifier: "target", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: false },
            { identifier: "replacement", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: false },
        ]), stringPrimitiveType, (parameters) => { return (parameters[0].value).replace((parameters[1].value), (parameters[2].value)); }, false, false, "Ersetzt alle Vorkommen von **target** durch **replacement** und gibt die entstandene Zeichenkette zur√ºck. Die Zeichenkette selbst wird nicht ver√§ndert."));
        this.addMethod(new Method("replaceAll", new Parameterlist([
            { identifier: "regex", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: false },
            { identifier: "replacement", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: false },
        ]), stringPrimitiveType, (parameters) => {
            let pattern = (parameters[1].value);
            let regExp = new RegExp(pattern, 'g');
            return (parameters[0].value).replace(regExp, (parameters[2].value));
        }, false, false, "Durchsucht den String mit dem regul√§ren Ausdruck (regex) und ersetzt **alle** Fundstellen durch **replacement**."));
        this.addMethod(new Method("replaceFirst", new Parameterlist([
            { identifier: "regex", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: false },
            { identifier: "replacement", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: false },
        ]), stringPrimitiveType, (parameters) => {
            let pattern = (parameters[1].value);
            let regExp = new RegExp(pattern, '');
            return (parameters[0].value).replace(regExp, (parameters[2].value));
        }, false, false, "Durchsucht den String mit dem regul√§ren Ausdruck (regex) und ersetzt **die erste** Fundstelle durch **replacement**."));
        this.addMethod(new Method("split", new Parameterlist([
            { identifier: "regex", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: false },
        ]), new ArrayType(stringPrimitiveType), (parameters) => {
            let pattern = (parameters[1].value);
            let regExp = new RegExp(pattern, '');
            let strings = (parameters[0].value).split(regExp);
            let values = [];
            for (let s of strings) {
                values.push({ type: stringPrimitiveType, value: s });
            }
            return values;
        }, false, false, "Teilt die Zeichenkette an den Stellen, die durch den regul√§ren Ausdruck (regex) definiert sind, in Teile auf. Die Fundstellen des regex werden dabei weggelassen. Gibt die Teile als String-Array zur√ºck."));
    }
    compute(operation, firstOperand, secondOperand) {
        let value = (firstOperand.value);
        switch (operation) {
            case TokenType.plus:
                if (secondOperand.type == stringPrimitiveType || secondOperand.type == charPrimitiveType) {
                    return value + (secondOperand.value);
                }
                else if (secondOperand.type == booleanPrimitiveType) {
                    return value + (secondOperand.value);
                }
                else {
                    return value + (secondOperand.value);
                }
            case TokenType.lower:
                return value.localeCompare((secondOperand.value), 'de', { caseFirst: 'upper' }) < 0;
            // return value < (<string>(secondOperand.value));
            case TokenType.greater:
                return value.localeCompare((secondOperand.value), 'de', { caseFirst: 'upper' }) > 0;
            // return value > <string>(secondOperand.value);
            case TokenType.lowerOrEqual:
                return value.localeCompare((secondOperand.value), 'de', { caseFirst: 'upper' }) <= 0;
            // return value <= <string>(secondOperand.value);
            case TokenType.greaterOrEqual:
                return value.localeCompare((secondOperand.value), 'de', { caseFirst: 'upper' }) >= 0;
            // return value >= <string>(secondOperand.value);
            case TokenType.equal:
                return value == (secondOperand.value);
            case TokenType.notEqual:
                return value != (secondOperand.value);
            case TokenType.keywordInstanceof:
                return super.compute(operation, firstOperand, secondOperand);
        }
    }
    debugOutput(value) {
        return '"' + value.value + '"';
    }
}
export class CharPrimitiveType extends PrimitiveType {
    init() {
        this.initialValue = "\u0000";
        this.identifier = "char";
        this.description = "ein Zeichen";
        this.operationTable = {
            [TokenType.plus]: { "String": stringPrimitiveType, "char": stringPrimitiveType },
            [TokenType.equal]: { "char": booleanPrimitiveType },
            [TokenType.notEqual]: { "char": booleanPrimitiveType },
            [TokenType.lower]: { "char": booleanPrimitiveType },
            [TokenType.greater]: { "char": booleanPrimitiveType },
            [TokenType.lowerOrEqual]: { "char": booleanPrimitiveType },
            [TokenType.greaterOrEqual]: { "char": booleanPrimitiveType }
        };
        // this.canCastTolist = [intPrimitiveType, floatPrimitiveType, doublePrimitiveType, stringPrimitiveType];
        this.canCastToMap = {
            "int": { automatic: true, needsStatement: true },
            "float": { automatic: true, needsStatement: true },
            "double": { automatic: true, needsStatement: true },
            "String": { automatic: true, needsStatement: false },
            "char": { automatic: true, needsStatement: false },
            "Character": { automatic: true, needsStatement: false },
        };
    }
    toTokenType() {
        return TokenType.charConstant;
    }
    castTo(value, type) {
        if (type == stringPrimitiveType) {
            return value;
        }
        if (type == intPrimitiveType || type == floatPrimitiveType || type == doublePrimitiveType) {
            return {
                type: type,
                value: value.value.charCodeAt(0)
            };
        }
    }
    compute(operation, firstOperand, secondOperand) {
        let value = (firstOperand.value);
        switch (operation) {
            case TokenType.plus:
                return value + (secondOperand.value);
            case TokenType.lower:
                return value < (secondOperand.value);
            case TokenType.greater:
                return value > (secondOperand.value);
            case TokenType.lowerOrEqual:
                return value <= (secondOperand.value);
            case TokenType.greaterOrEqual:
                return value >= (secondOperand.value);
            case TokenType.equal:
                return value == (secondOperand.value);
            case TokenType.notEqual:
                return value != (secondOperand.value);
        }
    }
    debugOutput(value) {
        return "'" + value.value + "'";
    }
}
export var voidPrimitiveType = new VoidPrimitiveType();
export var intPrimitiveType = new IntPrimitiveType();
export var floatPrimitiveType = new FloatPrimitiveType();
export var doublePrimitiveType = new DoublePrimitiveType();
export var booleanPrimitiveType = new BooleanPrimitiveType();
setBooleanPrimitiveTypeCopy(booleanPrimitiveType);
export var objectType = new ObjectClass(null);
export var stringPrimitiveType = new StringPrimitiveType(objectType);
export var charPrimitiveType = new CharPrimitiveType();
export var nullType = new NullType();
export var varType = new VarType();
export var IntegerType = new IntegerClass(objectType);
export var FloatType = new FloatClass(objectType);
export var DoubleType = new DoubleClass(objectType);
export var CharacterType = new CharacterClass(objectType);
export var BooleanType = new BooleanClass(objectType);
export var TokenTypeToDataTypeMap = {
    [TokenType.integerConstant]: intPrimitiveType,
    [TokenType.floatingPointConstant]: floatPrimitiveType,
    [TokenType.booleanConstant]: booleanPrimitiveType,
    [TokenType.stringConstant]: stringPrimitiveType,
    [TokenType.charConstant]: charPrimitiveType,
    [TokenType.keywordNull]: nullType
};
//# sourceMappingURL=data:application/json;base64,