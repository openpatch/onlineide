export function hash(s) {
    let hash = 0;
    let chr;
    for (let i = 0; i < s.length; i++) {
        chr = s.charCodeAt(i);
        hash = ((hash << 5) - hash) + chr;
        hash |= 0; // Convert to 32bit integer
    }
    return hash;
}
export function escapeHtml(unsafe) {
    return unsafe
        .replace(/['"]+/g, '')
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#039;");
}
export function dateToString(date) {
    return `${twoDez(date.getDate())}.${twoDez(date.getMonth() + 1)}.${date.getFullYear()}, ${twoDez(date.getHours())}:${twoDez(date.getMinutes())}`;
}
export function dateToStringWithoutTime(date) {
    return `${twoDez(date.getDate())}.${twoDez(date.getMonth())}.${date.getFullYear()}`;
}
function twoDez(z) {
    if (z < 10)
        return "0" + z;
    return "" + z;
}
export function stringToDate(text) {
    let match = text.match(/^(\d{2})\.(\d{2})\.(\d{4}), (\d{2}):(\d{2})$/);
    let date = new Date(Number.parseInt(match[3]), Number.parseInt(match[2]), Number.parseInt(match[1]), Number.parseInt(match[4]), Number.parseInt(match[5]));
    return date;
}
export function stringWrap(s, length) {
    return s.replace(new RegExp(`(?![^\\n]{1,${length}}$)([^\\n]{1,${length}})\\s`, 'g'), '$1\n');
}
export function formatAsJavadocComment(s, indent = "") {
    let indentString = "";
    if (typeof indent == "string") {
        indentString = indent;
    }
    else {
        for (let i = 0; i < indent; i++) {
            indentString += " ";
        }
    }
    s = stringWrap(s, 60);
    if (s.length > 0)
        s = "\n" + s;
    s = indentString + "/**" + s.replace(/\n/g, "\n" + indentString + " * ") + "\n" + indentString + " */";
    return s;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3RyaW5nVG9vbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY2xpZW50L3Rvb2xzL1N0cmluZ1Rvb2xzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sVUFBVSxJQUFJLENBQUMsQ0FBUztJQUMxQixJQUFJLElBQUksR0FBVyxDQUFDLENBQUM7SUFDckIsSUFBSSxHQUFXLENBQUM7SUFDaEIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDakMsR0FBRyxHQUFLLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDeEIsSUFBSSxHQUFJLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ25DLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQywyQkFBMkI7S0FDdkM7SUFDRCxPQUFPLElBQUksQ0FBQztBQUNoQixDQUFDO0FBRUQsTUFBTSxVQUFVLFVBQVUsQ0FBQyxNQUFjO0lBQ3ZDLE9BQU8sTUFBTTtTQUNSLE9BQU8sQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDO1NBQ3BCLE9BQU8sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDO1NBQ3RCLE9BQU8sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDO1NBQ3JCLE9BQU8sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDO1NBQ3JCLE9BQU8sQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDO1NBQ3ZCLE9BQU8sQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDaEMsQ0FBQztBQUVELE1BQU0sVUFBVSxZQUFZLENBQUMsSUFBVTtJQUNyQyxPQUFPLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRSxLQUFLLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLEVBQUUsQ0FBQztBQUNuSixDQUFDO0FBRUQsTUFBTSxVQUFVLHVCQUF1QixDQUFDLElBQVU7SUFDaEQsT0FBTyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRSxFQUFFLENBQUM7QUFDdEYsQ0FBQztBQUVELFNBQVMsTUFBTSxDQUFDLENBQVM7SUFDdkIsSUFBRyxDQUFDLEdBQUcsRUFBRTtRQUFFLE9BQU8sR0FBRyxHQUFHLENBQUMsQ0FBQztJQUMxQixPQUFPLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDaEIsQ0FBQztBQUVELE1BQU0sVUFBVSxZQUFZLENBQUMsSUFBWTtJQUV2QyxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLDhDQUE4QyxDQUFDLENBQUM7SUFFdkUsSUFBSSxJQUFJLEdBQVMsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFFLENBQUM7SUFFbEssT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDO0FBRUQsTUFBTSxVQUFVLFVBQVUsQ0FBQyxDQUFTLEVBQUUsTUFBYztJQUNsRCxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQ2QsSUFBSSxNQUFNLENBQUMsZUFBZSxNQUFNLGdCQUFnQixNQUFNLE9BQU8sRUFBRSxHQUFHLENBQUMsRUFBRSxNQUFNLENBQzVFLENBQUM7QUFDSixDQUFDO0FBRUQsTUFBTSxVQUFVLHNCQUFzQixDQUFDLENBQVMsRUFBRSxTQUF3QixFQUFFO0lBQzFFLElBQUksWUFBWSxHQUFHLEVBQUUsQ0FBQztJQUV0QixJQUFHLE9BQU8sTUFBTSxJQUFJLFFBQVEsRUFBQztRQUMzQixZQUFZLEdBQUcsTUFBTSxDQUFDO0tBQ3ZCO1NBQU07UUFDTCxLQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFDO1lBQzdCLFlBQVksSUFBSSxHQUFHLENBQUM7U0FDckI7S0FDRjtJQUVELENBQUMsR0FBRyxVQUFVLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3RCLElBQUcsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDO1FBQUUsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUM7SUFDOUIsQ0FBQyxHQUFHLFlBQVksR0FBRyxLQUFLLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsSUFBSSxHQUFHLFlBQVksR0FBRyxLQUFLLENBQUMsR0FBRyxJQUFJLEdBQUcsWUFBWSxHQUFHLEtBQUssQ0FBQztJQUN2RyxPQUFPLENBQUMsQ0FBQztBQUNYLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gaGFzaChzOiBzdHJpbmcpe1xyXG4gICAgbGV0IGhhc2g6IG51bWJlciA9IDA7XHJcbiAgICBsZXQgY2hyOiBudW1iZXI7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgY2hyICAgPSBzLmNoYXJDb2RlQXQoaSk7XHJcbiAgICAgIGhhc2ggID0gKChoYXNoIDw8IDUpIC0gaGFzaCkgKyBjaHI7XHJcbiAgICAgIGhhc2ggfD0gMDsgLy8gQ29udmVydCB0byAzMmJpdCBpbnRlZ2VyXHJcbiAgICB9XHJcbiAgICByZXR1cm4gaGFzaDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGVzY2FwZUh0bWwodW5zYWZlOiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gIHJldHVybiB1bnNhZmVcclxuICAgICAgLnJlcGxhY2UoL1snXCJdKy9nLCAnJylcclxuICAgICAgIC5yZXBsYWNlKC8mL2csIFwiJmFtcDtcIilcclxuICAgICAgIC5yZXBsYWNlKC88L2csIFwiJmx0O1wiKVxyXG4gICAgICAgLnJlcGxhY2UoLz4vZywgXCImZ3Q7XCIpXHJcbiAgICAgICAucmVwbGFjZSgvXCIvZywgXCImcXVvdDtcIilcclxuICAgICAgIC5yZXBsYWNlKC8nL2csIFwiJiMwMzk7XCIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZGF0ZVRvU3RyaW5nKGRhdGU6IERhdGUpOiBzdHJpbmd7XHJcbiAgcmV0dXJuIGAke3R3b0RleihkYXRlLmdldERhdGUoKSl9LiR7dHdvRGV6KGRhdGUuZ2V0TW9udGgoKSArIDEpfS4ke2RhdGUuZ2V0RnVsbFllYXIoKX0sICR7dHdvRGV6KGRhdGUuZ2V0SG91cnMoKSl9OiR7dHdvRGV6KGRhdGUuZ2V0TWludXRlcygpKX1gO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZGF0ZVRvU3RyaW5nV2l0aG91dFRpbWUoZGF0ZTogRGF0ZSk6IHN0cmluZ3tcclxuICByZXR1cm4gYCR7dHdvRGV6KGRhdGUuZ2V0RGF0ZSgpKX0uJHt0d29EZXooZGF0ZS5nZXRNb250aCgpKX0uJHtkYXRlLmdldEZ1bGxZZWFyKCl9YDtcclxufVxyXG5cclxuZnVuY3Rpb24gdHdvRGV6KHo6IG51bWJlcik6c3RyaW5nIHtcclxuICBpZih6IDwgMTApIHJldHVybiBcIjBcIiArIHo7XHJcbiAgcmV0dXJuIFwiXCIgKyB6O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc3RyaW5nVG9EYXRlKHRleHQ6IHN0cmluZyk6IERhdGUge1xyXG5cclxuICBsZXQgbWF0Y2ggPSB0ZXh0Lm1hdGNoKC9eKFxcZHsyfSlcXC4oXFxkezJ9KVxcLihcXGR7NH0pLCAoXFxkezJ9KTooXFxkezJ9KSQvKTtcclxuXHJcbiAgbGV0IGRhdGU6IERhdGUgPSBuZXcgRGF0ZShOdW1iZXIucGFyc2VJbnQobWF0Y2hbM10pLCBOdW1iZXIucGFyc2VJbnQobWF0Y2hbMl0pLCBOdW1iZXIucGFyc2VJbnQobWF0Y2hbMV0pLCBOdW1iZXIucGFyc2VJbnQobWF0Y2hbNF0pLCBOdW1iZXIucGFyc2VJbnQobWF0Y2hbNV0pICk7XHJcblxyXG4gIHJldHVybiBkYXRlO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc3RyaW5nV3JhcChzOiBzdHJpbmcsIGxlbmd0aDogbnVtYmVyICk6IHN0cmluZ3tcclxuICByZXR1cm4gcy5yZXBsYWNlKFxyXG4gICAgbmV3IFJlZ0V4cChgKD8hW15cXFxcbl17MSwke2xlbmd0aH19JCkoW15cXFxcbl17MSwke2xlbmd0aH19KVxcXFxzYCwgJ2cnKSwgJyQxXFxuJ1xyXG4gICk7XHJcbn0gXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0QXNKYXZhZG9jQ29tbWVudChzOiBzdHJpbmcsIGluZGVudDogbnVtYmVyfHN0cmluZyA9IFwiXCIpOiBzdHJpbmcge1xyXG4gIGxldCBpbmRlbnRTdHJpbmcgPSBcIlwiO1xyXG5cclxuICBpZih0eXBlb2YgaW5kZW50ID09IFwic3RyaW5nXCIpe1xyXG4gICAgaW5kZW50U3RyaW5nID0gaW5kZW50O1xyXG4gIH0gZWxzZSB7XHJcbiAgICBmb3IobGV0IGkgPSAwOyBpIDwgaW5kZW50OyBpKyspe1xyXG4gICAgICBpbmRlbnRTdHJpbmcgKz0gXCIgXCI7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzID0gc3RyaW5nV3JhcChzLCA2MCk7XHJcbiAgaWYocy5sZW5ndGggPiAwKSBzID0gXCJcXG5cIiArIHM7XHJcbiAgcyA9IGluZGVudFN0cmluZyArIFwiLyoqXCIgKyBzLnJlcGxhY2UoL1xcbi9nLCBcIlxcblwiICsgaW5kZW50U3RyaW5nICsgXCIgKiBcIikgKyBcIlxcblwiICsgaW5kZW50U3RyaW5nICsgXCIgKi9cIjtcclxuICByZXR1cm4gcztcclxufSJdfQ==