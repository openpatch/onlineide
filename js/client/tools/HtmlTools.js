import { escapeHtml } from "./StringTools.js";
export function makeEditable(elementWithText, elementToReplace, renameDoneCallback, selectionRange = null) {
    let mousePointer = window.PointerEvent ? "pointer" : "mouse";
    if (elementToReplace == null) {
        elementToReplace = elementWithText;
    }
    let $input = jQuery('<input type="text" class="jo_inplaceeditor" spellcheck="false">');
    $input.css({
        width: elementToReplace.css('width'),
        height: elementToReplace.css('height'),
        color: elementToReplace.css('color'),
        position: elementToReplace.css('position'),
        "background-color": elementToReplace.css('background-color'),
        "font-size": elementToReplace.css('font-size'),
        "font-weight": elementToReplace.css('font-weight'),
        "box-sizing": "border-box"
    });
    $input.val(elementWithText.text());
    $input.on(mousePointer + "down", (e) => { e.stopPropagation(); });
    if (selectionRange != null) {
        $input[0].setSelectionRange(selectionRange.start, selectionRange.end);
    }
    elementToReplace.after($input);
    elementToReplace.hide();
    setTimeout(() => {
        $input.focus();
    }, 300);
    $input.on("keydown.me", (ev) => {
        if (ev.key == "Enter" || ev.key == "Escape") {
            $input.off("keydown.me");
            $input.off("focusout.me");
            $input.remove();
            elementToReplace.show();
            let newValue = escapeHtml($input.val());
            renameDoneCallback(newValue);
            return;
        }
    });
    $input.on("focusout.me", (ev) => {
        $input.off("keydown.me");
        $input.off("focusout.me");
        $input.remove();
        elementToReplace.show();
        let newValue = escapeHtml($input.val());
        renameDoneCallback(newValue);
        return;
    });
}
export function openContextMenu(items, x, y) {
    let mousePointer = window.PointerEvent ? "pointer" : "mouse";
    let $contextMenu = jQuery('<div class="jo_contextmenu"></div>');
    let $openSubMenu = null;
    let parentMenuItem = null;
    for (let mi of items) {
        let caption = mi.caption;
        if (mi.link != null) {
            caption = `<a href="${mi.link}" target="_blank" class="jo_menulink">${mi.caption}</a>`;
        }
        let $item = jQuery('<div>' + caption + (mi.subMenu != null ? '<span style="float: right"> &nbsp; &nbsp; &gt;</span>' : "") + '</div>');
        if (mi.color != null) {
            $item.css('color', mi.color);
        }
        if (mi.link == null) {
            $item.on(mousePointer + 'down.contextmenu', () => {
                jQuery('.jo_contextmenu').remove();
                jQuery(document).off(mousePointer + "down.contextmenu");
                jQuery(document).off("keydown.contextmenu");
                mi.callback();
            });
        }
        else {
            let $link = $item.find('a');
            $link.on(mousePointer + "down", (event) => {
                event.stopPropagation();
                setTimeout(() => {
                    $item.hide();
                }, 500);
            });
        }
        $item.on(mousePointer + 'move.contextmenu', () => {
            if (mi != parentMenuItem && $openSubMenu != null) {
                $openSubMenu.remove();
                parentMenuItem = null;
                $openSubMenu = null;
            }
            if (mi.subMenu != null) {
                $openSubMenu = openContextMenu(mi.subMenu, $item.offset().left + $item.width(), $item.offset().top);
            }
        });
        $contextMenu.append($item);
    }
    jQuery(document).on(mousePointer + "down.contextmenu", () => {
        jQuery(document).off(mousePointer + "down.contextmenu");
        jQuery(document).off("keydown.contextmenu");
        jQuery('.jo_contextmenu').remove();
    });
    jQuery(document).on("keydown.contextmenu", (ev) => {
        if (ev.key == "Escape") {
            jQuery(document).off(mousePointer + "down.contextmenu");
            jQuery(document).off("keydown.contextmenu");
            jQuery('.jo_contextmenu').remove();
        }
    });
    let leftRight = x > window.innerWidth * 0.8 ? "right" : "left";
    let xp = x > window.innerWidth * 0.8 ? window.innerWidth - x : x;
    let topBottom = y > window.innerHeight * 0.8 ? "bottom" : "top";
    let yp = y > window.innerHeight * 0.8 ? window.innerHeight - y : y;
    let css = {};
    css[leftRight] = xp + "px";
    css[topBottom] = yp + "px";
    $contextMenu.css(css);
    jQuery("body").append($contextMenu);
    $contextMenu.show();
    return $contextMenu;
}
export function makeTabs(tabDiv) {
    let headings = tabDiv.find('.jo_tabheadings>div').not('.jo_noHeading');
    let tabs = tabDiv.find('.jo_tabs>div');
    let mousePointer = window.PointerEvent ? "pointer" : "mouse";
    headings.on(mousePointer + "down", (ev) => {
        let target = jQuery(ev.target);
        headings.removeClass('jo_active');
        target.addClass('jo_active');
        let tab = tabDiv.find('.' + target.data('target'));
        tabs.removeClass('jo_active');
        tabs.trigger('myhide');
        tab.addClass('jo_active');
        tab.trigger('myshow');
    });
}
export function convertPxToNumber(pxString) {
    pxString = pxString.replace('px', '').trim();
    return Number.parseInt(pxString);
}
export function makeDiv(id, klass = "", text = "", css) {
    let s = "";
    if (id != null && id != "")
        s += ` id="${id}"`;
    if (klass != null && klass != "")
        s += ` class="${klass}"`;
    let div = jQuery(`<div${s}></div>`);
    if (css != null) {
        div.css(css);
    }
    if (text != null && text != "") {
        div.text(text);
    }
    return div;
}
export function setSelectItems($selectElement, items, activeItemValue) {
    $selectElement.empty();
    items.forEach(item => {
        let selected = (item.value == activeItemValue) ? ' selected="selected"' : "";
        let element = jQuery(`<option value=${item.value}${selected}>${item.caption}</option>`);
        $selectElement.append(element);
        element.data('object', item.object);
    });
    $selectElement.data('items', items);
}
export function getSelectedObject($selectDiv) {
    var _a;
    let items = $selectDiv.data('items');
    let selectedValue = $selectDiv.val();
    return (_a = items.find(item => item.value == selectedValue)) === null || _a === void 0 ? void 0 : _a.object;
}
export var jo_mouseDetected = false;
export function checkIfMousePresent() {
    if (matchMedia('(pointer:fine)').matches) {
        jo_mouseDetected = true;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSHRtbFRvb2xzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NsaWVudC90b29scy9IdG1sVG9vbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRTlDLE1BQU0sVUFBVSxZQUFZLENBQUMsZUFBb0MsRUFDN0QsZ0JBQXFDLEVBQ3JDLGtCQUFnRCxFQUFFLGlCQUFpRCxJQUFJO0lBRXZHLElBQUksWUFBWSxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO0lBRTdELElBQUksZ0JBQWdCLElBQUksSUFBSSxFQUFFO1FBQzFCLGdCQUFnQixHQUFHLGVBQWUsQ0FBQztLQUN0QztJQUVELElBQUksTUFBTSxHQUFHLE1BQU0sQ0FBQyxpRUFBaUUsQ0FBQyxDQUFDO0lBQ3ZGLE1BQU0sQ0FBQyxHQUFHLENBQUM7UUFDUCxLQUFLLEVBQUUsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQztRQUNwQyxNQUFNLEVBQUUsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQztRQUN0QyxLQUFLLEVBQUUsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQztRQUNwQyxRQUFRLEVBQUUsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQztRQUMxQyxrQkFBa0IsRUFBRSxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsa0JBQWtCLENBQUM7UUFDNUQsV0FBVyxFQUFFLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUM7UUFDOUMsYUFBYSxFQUFFLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUM7UUFDbEQsWUFBWSxFQUFFLFlBQVk7S0FDN0IsQ0FBQyxDQUFDO0lBQ0gsTUFBTSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztJ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S0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksYUFBYSxDQUFDLDBDQUFFLE1BQU0sQ0FBQztBQUVuRSxDQUFDO0FBRUQsTUFBTSxDQUFDLElBQUksZ0JBQWdCLEdBQVksS0FBSyxDQUFDO0FBQzdDLE1BQU0sVUFBVSxtQkFBbUI7SUFDL0IsSUFBSSxVQUFVLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxPQUFPLEVBQUU7UUFDdEMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDO0tBQzNCO0FBQ0wsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGVzY2FwZUh0bWwgfSBmcm9tIFwiLi9TdHJpbmdUb29scy5qc1wiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VFZGl0YWJsZShlbGVtZW50V2l0aFRleHQ6IEpRdWVyeTxIVE1MRWxlbWVudD4sXHJcbiAgICBlbGVtZW50VG9SZXBsYWNlOiBKUXVlcnk8SFRNTEVsZW1lbnQ+LFxyXG4gICAgcmVuYW1lRG9uZUNhbGxiYWNrOiAobmV3Q29udGVudDogc3RyaW5nKSA9PiB2b2lkLCBzZWxlY3Rpb25SYW5nZTogeyBzdGFydDogbnVtYmVyLCBlbmQ6IG51bWJlciB9ID0gbnVsbCkge1xyXG5cclxuICAgIGxldCBtb3VzZVBvaW50ZXIgPSB3aW5kb3cuUG9pbnRlckV2ZW50ID8gXCJwb2ludGVyXCIgOiBcIm1vdXNlXCI7XHJcblxyXG4gICAgaWYgKGVsZW1lbnRUb1JlcGxhY2UgPT0gbnVsbCkge1xyXG4gICAgICAgIGVsZW1lbnRUb1JlcGxhY2UgPSBlbGVtZW50V2l0aFRleHQ7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0ICRpbnB1dCA9IGpRdWVyeSgnPGlucHV0IHR5cGU9XCJ0ZXh0XCIgY2xhc3M9XCJqb19pbnBsYWNlZWRpdG9yXCIgc3BlbGxjaGVjaz1cImZhbHNlXCI+Jyk7XHJcbiAgICAkaW5wdXQuY3NzKHtcclxuICAgICAgICB3aWR0aDogZWxlbWVudFRvUmVwbGFjZS5jc3MoJ3dpZHRoJyksXHJcbiAgICAgICAgaGVpZ2h0OiBlbGVtZW50VG9SZXBsYWNlLmNzcygnaGVpZ2h0JyksXHJcbiAgICAgICAgY29sb3I6IGVsZW1lbnRUb1JlcGxhY2UuY3NzKCdjb2xvcicpLFxyXG4gICAgICAgIHBvc2l0aW9uOiBlbGVtZW50VG9SZXBsYWNlLmNzcygncG9zaXRpb24nKSxcclxuICAgICAgICBcImJhY2tncm91bmQtY29sb3JcIjogZWxlbWVudFRvUmVwbGFjZS5jc3MoJ2JhY2tncm91bmQtY29sb3InKSxcclxuICAgICAgICBcImZvbnQtc2l6ZVwiOiBlbGVtZW50VG9SZXBsYWNlLmNzcygnZm9udC1zaXplJyksXHJcbiAgICAgICAgXCJmb250LXdlaWdodFwiOiBlbGVtZW50VG9SZXBsYWNlLmNzcygnZm9udC13ZWlnaHQnKSxcclxuICAgICAgICBcImJveC1zaXppbmdcIjogXCJib3JkZXItYm94XCJcclxuICAgIH0pO1xyXG4gICAgJGlucHV0LnZhbChlbGVtZW50V2l0aFRleHQudGV4dCgpKTtcclxuICAgICRpbnB1dC5vbihtb3VzZVBvaW50ZXIgKyBcImRvd25cIiwgKGUpID0+IHsgZS5zdG9wUHJvcGFnYXRpb24oKTsgfSlcclxuXHJcbiAgICBpZiAoc2VsZWN0aW9uUmFuZ2UgIT0gbnVsbCkge1xyXG4gICAgICAgICg8SFRNTElucHV0RWxlbWVudD4kaW5wdXRbMF0pLnNldFNlbGVjdGlvblJhbmdlKHNlbGVjdGlvblJhbmdlLnN0YXJ0LCBzZWxlY3Rpb25SYW5nZS5lbmQpO1xyXG4gICAgfVxyXG5cclxuICAgIGVsZW1lbnRUb1JlcGxhY2UuYWZ0ZXIoJGlucHV0KTtcclxuICAgIGVsZW1lbnRUb1JlcGxhY2UuaGlkZSgpO1xyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgJGlucHV0LmZvY3VzKCk7XHJcbiAgICB9LCAzMDApO1xyXG5cclxuICAgICRpbnB1dC5vbihcImtleWRvd24ubWVcIiwgKGV2KSA9PiB7XHJcbiAgICAgICAgaWYgKGV2LmtleSA9PSBcIkVudGVyXCIgfHwgZXYua2V5ID09IFwiRXNjYXBlXCIpIHtcclxuICAgICAgICAgICAgJGlucHV0Lm9mZihcImtleWRvd24ubWVcIik7XHJcbiAgICAgICAgICAgICRpbnB1dC5vZmYoXCJmb2N1c291dC5tZVwiKTtcclxuICAgICAgICAgICAgJGlucHV0LnJlbW92ZSgpO1xyXG4gICAgICAgICAgICBlbGVtZW50VG9SZXBsYWNlLnNob3coKTtcclxuICAgICAgICAgICAgbGV0IG5ld1ZhbHVlID0gZXNjYXBlSHRtbCg8c3RyaW5nPiRpbnB1dC52YWwoKSk7XHJcbiAgICAgICAgICAgIHJlbmFtZURvbmVDYWxsYmFjayhuZXdWYWx1ZSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICAkaW5wdXQub24oXCJmb2N1c291dC5tZVwiLCAoZXYpID0+IHtcclxuICAgICAgICAkaW5wdXQub2ZmKFwia2V5ZG93bi5tZVwiKTtcclxuICAgICAgICAkaW5wdXQub2ZmKFwiZm9jdXNvdXQubWVcIik7XHJcbiAgICAgICAgJGlucHV0LnJlbW92ZSgpO1xyXG4gICAgICAgIGVsZW1lbnRUb1JlcGxhY2Uuc2hvdygpO1xyXG4gICAgICAgIGxldCBuZXdWYWx1ZSA9IGVzY2FwZUh0bWwoPHN0cmluZz4kaW5wdXQudmFsKCkpO1xyXG4gICAgICAgIHJlbmFtZURvbmVDYWxsYmFjayhuZXdWYWx1ZSk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfSk7XHJcblxyXG59XHJcblxyXG5leHBvcnQgdHlwZSBDb250ZXh0TWVudUl0ZW0gPSB7XHJcbiAgICBjYXB0aW9uOiBzdHJpbmc7XHJcbiAgICBjb2xvcj86IHN0cmluZztcclxuICAgIGNhbGxiYWNrOiAoKSA9PiB2b2lkO1xyXG4gICAgbGluaz86IHN0cmluZztcclxuICAgIHN1Yk1lbnU/OiBDb250ZXh0TWVudUl0ZW1bXVxyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG9wZW5Db250ZXh0TWVudShpdGVtczogQ29udGV4dE1lbnVJdGVtW10sIHg6IG51bWJlciwgeTogbnVtYmVyKTogSlF1ZXJ5PEhUTUxFbGVtZW50PiB7XHJcblxyXG4gICAgbGV0IG1vdXNlUG9pbnRlciA9IHdpbmRvdy5Qb2ludGVyRXZlbnQgPyBcInBvaW50ZXJcIiA6IFwibW91c2VcIjtcclxuXHJcbiAgICBsZXQgJGNvbnRleHRNZW51ID0galF1ZXJ5KCc8ZGl2IGNsYXNzPVwiam9fY29udGV4dG1lbnVcIj48L2Rpdj4nKTtcclxuXHJcbiAgICBsZXQgJG9wZW5TdWJNZW51OiBKUXVlcnk8SFRNTEVsZW1lbnQ+ID0gbnVsbDtcclxuICAgIGxldCBwYXJlbnRNZW51SXRlbTogQ29udGV4dE1lbnVJdGVtID0gbnVsbDtcclxuXHJcbiAgICBmb3IgKGxldCBtaSBvZiBpdGVtcykge1xyXG4gICAgICAgIGxldCBjYXB0aW9uOiBzdHJpbmcgPSBtaS5jYXB0aW9uO1xyXG4gICAgICAgIGlmIChtaS5saW5rICE9IG51bGwpIHtcclxuICAgICAgICAgICAgY2FwdGlvbiA9IGA8YSBocmVmPVwiJHttaS5saW5rfVwiIHRhcmdldD1cIl9ibGFua1wiIGNsYXNzPVwiam9fbWVudWxpbmtcIj4ke21pLmNhcHRpb259PC9hPmA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCAkaXRlbSA9IGpRdWVyeSgnPGRpdj4nICsgY2FwdGlvbiArIChtaS5zdWJNZW51ICE9IG51bGwgPyAnPHNwYW4gc3R5bGU9XCJmbG9hdDogcmlnaHRcIj4gJm5ic3A7ICZuYnNwOyAmZ3Q7PC9zcGFuPicgOiBcIlwiKSArICc8L2Rpdj4nKTtcclxuICAgICAgICBpZiAobWkuY29sb3IgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAkaXRlbS5jc3MoJ2NvbG9yJywgbWkuY29sb3IpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAobWkubGluayA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICRpdGVtLm9uKG1vdXNlUG9pbnRlciArICdkb3duLmNvbnRleHRtZW51JywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgalF1ZXJ5KCcuam9fY29udGV4dG1lbnUnKS5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgIGpRdWVyeShkb2N1bWVudCkub2ZmKG1vdXNlUG9pbnRlciArIFwiZG93bi5jb250ZXh0bWVudVwiKTtcclxuICAgICAgICAgICAgICAgIGpRdWVyeShkb2N1bWVudCkub2ZmKFwia2V5ZG93bi5jb250ZXh0bWVudVwiKTtcclxuICAgICAgICAgICAgICAgIG1pLmNhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGxldCAkbGluayA9ICRpdGVtLmZpbmQoJ2EnKTtcclxuICAgICAgICAgICAgJGxpbmsub24obW91c2VQb2ludGVyICsgXCJkb3duXCIsIChldmVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAkaXRlbS5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICB9LCA1MDApO1xyXG4gICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgICRpdGVtLm9uKG1vdXNlUG9pbnRlciArICdtb3ZlLmNvbnRleHRtZW51JywgKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAobWkgIT0gcGFyZW50TWVudUl0ZW0gJiYgJG9wZW5TdWJNZW51ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICRvcGVuU3ViTWVudS5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgIHBhcmVudE1lbnVJdGVtID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICRvcGVuU3ViTWVudSA9IG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKG1pLnN1Yk1lbnUgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgJG9wZW5TdWJNZW51ID0gb3BlbkNvbnRleHRNZW51KG1pLnN1Yk1lbnUsICRpdGVtLm9mZnNldCgpLmxlZnQgKyAkaXRlbS53aWR0aCgpLCAkaXRlbS5vZmZzZXQoKS50b3ApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICRjb250ZXh0TWVudS5hcHBlbmQoJGl0ZW0pO1xyXG4gICAgfVxyXG5cclxuICAgIGpRdWVyeShkb2N1bWVudCkub24obW91c2VQb2ludGVyICsgXCJkb3duLmNvbnRleHRtZW51XCIsICgpID0+IHtcclxuICAgICAgICBqUXVlcnkoZG9jdW1lbnQpLm9mZihtb3VzZVBvaW50ZXIgKyBcImRvd24uY29udGV4dG1lbnVcIik7XHJcbiAgICAgICAgalF1ZXJ5KGRvY3VtZW50KS5vZmYoXCJrZXlkb3duLmNvbnRleHRtZW51XCIpO1xyXG4gICAgICAgIGpRdWVyeSgnLmpvX2NvbnRleHRtZW51JykucmVtb3ZlKCk7XHJcbiAgICB9KVxyXG5cclxuICAgIGpRdWVyeShkb2N1bWVudCkub24oXCJrZXlkb3duLmNvbnRleHRtZW51XCIsIChldikgPT4ge1xyXG4gICAgICAgIGlmIChldi5rZXkgPT0gXCJFc2NhcGVcIikge1xyXG4gICAgICAgICAgICBqUXVlcnkoZG9jdW1lbnQpLm9mZihtb3VzZVBvaW50ZXIgKyBcImRvd24uY29udGV4dG1lbnVcIik7XHJcbiAgICAgICAgICAgIGpRdWVyeShkb2N1bWVudCkub2ZmKFwia2V5ZG93bi5jb250ZXh0bWVudVwiKTtcclxuICAgICAgICAgICAgalF1ZXJ5KCcuam9fY29udGV4dG1lbnUnKS5yZW1vdmUoKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBsZXQgbGVmdFJpZ2h0ID0geCA+IHdpbmRvdy5pbm5lcldpZHRoICogMC44ID8gXCJyaWdodFwiIDogXCJsZWZ0XCI7XHJcbiAgICBsZXQgeHAgPSB4ID4gd2luZG93LmlubmVyV2lkdGggKiAwLjggPyB3aW5kb3cuaW5uZXJXaWR0aCAtIHggOiB4O1xyXG4gICAgbGV0IHRvcEJvdHRvbSA9IHkgPiB3aW5kb3cuaW5uZXJIZWlnaHQgKiAwLjggPyBcImJvdHRvbVwiIDogXCJ0b3BcIjtcclxuICAgIGxldCB5cCA9IHkgPiB3aW5kb3cuaW5uZXJIZWlnaHQgKiAwLjggPyB3aW5kb3cuaW5uZXJIZWlnaHQgLSB5IDogeTtcclxuXHJcbiAgICBsZXQgY3NzID0ge307XHJcbiAgICBjc3NbbGVmdFJpZ2h0XSA9IHhwICsgXCJweFwiO1xyXG4gICAgY3NzW3RvcEJvdHRvbV0gPSB5cCArIFwicHhcIjtcclxuXHJcbiAgICAkY29udGV4dE1lbnUuY3NzKGNzcyk7XHJcblxyXG5cclxuICAgIGpRdWVyeShcImJvZHlcIikuYXBwZW5kKCRjb250ZXh0TWVudSk7XHJcbiAgICAkY29udGV4dE1lbnUuc2hvdygpO1xyXG5cclxuICAgIHJldHVybiAkY29udGV4dE1lbnU7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBtYWtlVGFicyh0YWJEaXY6IEpRdWVyeTxIVE1MRWxlbWVudD4pIHtcclxuICAgIGxldCBoZWFkaW5ncyA9IHRhYkRpdi5maW5kKCcuam9fdGFiaGVhZGluZ3M+ZGl2Jykubm90KCcuam9fbm9IZWFkaW5nJyk7XHJcbiAgICBsZXQgdGFicyA9IHRhYkRpdi5maW5kKCcuam9fdGFicz5kaXYnKTtcclxuXHJcbiAgICBsZXQgbW91c2VQb2ludGVyID0gd2luZG93LlBvaW50ZXJFdmVudCA/IFwicG9pbnRlclwiIDogXCJtb3VzZVwiO1xyXG5cclxuICAgIGhlYWRpbmdzLm9uKG1vdXNlUG9pbnRlciArIFwiZG93blwiLCAoZXYpID0+IHtcclxuICAgICAgICBsZXQgdGFyZ2V0ID0galF1ZXJ5KGV2LnRhcmdldCk7XHJcbiAgICAgICAgaGVhZGluZ3MucmVtb3ZlQ2xhc3MoJ2pvX2FjdGl2ZScpO1xyXG4gICAgICAgIHRhcmdldC5hZGRDbGFzcygnam9fYWN0aXZlJyk7XHJcbiAgICAgICAgbGV0IHRhYiA9IHRhYkRpdi5maW5kKCcuJyArIHRhcmdldC5kYXRhKCd0YXJnZXQnKSk7XHJcbiAgICAgICAgdGFicy5yZW1vdmVDbGFzcygnam9fYWN0aXZlJyk7XHJcbiAgICAgICAgdGFicy50cmlnZ2VyKCdteWhpZGUnKTtcclxuICAgICAgICB0YWIuYWRkQ2xhc3MoJ2pvX2FjdGl2ZScpO1xyXG4gICAgICAgIHRhYi50cmlnZ2VyKCdteXNob3cnKTtcclxuICAgIH0pO1xyXG5cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRQeFRvTnVtYmVyKHB4U3RyaW5nOiBzdHJpbmcpOiBudW1iZXIge1xyXG4gICAgcHhTdHJpbmcgPSBweFN0cmluZy5yZXBsYWNlKCdweCcsICcnKS50cmltKCk7XHJcbiAgICByZXR1cm4gTnVtYmVyLnBhcnNlSW50KHB4U3RyaW5nKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VEaXYoaWQ6IHN0cmluZywga2xhc3M6IHN0cmluZyA9IFwiXCIsIHRleHQ6IHN0cmluZyA9IFwiXCIsIGNzcz86IHsgW2lkOiBzdHJpbmddOiBhbnkgfSk6IEpRdWVyeTxIVE1MRGl2RWxlbWVudD4ge1xyXG5cclxuICAgIGxldCBzID0gXCJcIjtcclxuICAgIGlmIChpZCAhPSBudWxsICYmIGlkICE9IFwiXCIpIHMgKz0gYCBpZD1cIiR7aWR9XCJgO1xyXG5cclxuICAgIGlmIChrbGFzcyAhPSBudWxsICYmIGtsYXNzICE9IFwiXCIpIHMgKz0gYCBjbGFzcz1cIiR7a2xhc3N9XCJgO1xyXG5cclxuICAgIGxldCBkaXYgPSBqUXVlcnkoYDxkaXYke3N9PjwvZGl2PmApO1xyXG5cclxuICAgIGlmIChjc3MgIT0gbnVsbCkge1xyXG4gICAgICAgIGRpdi5jc3MoY3NzKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGV4dCAhPSBudWxsICYmIHRleHQgIT0gXCJcIikge1xyXG4gICAgICAgIGRpdi50ZXh0KHRleHQpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiA8YW55PmRpdjtcclxuXHJcbn1cclxuXHJcbmV4cG9ydCB0eXBlIFNlbGVjdEl0ZW0gPSB7XHJcbiAgICB2YWx1ZTogc3RyaW5nIHwgbnVtYmVyLFxyXG4gICAgb2JqZWN0OiBhbnksXHJcbiAgICBjYXB0aW9uOiBzdHJpbmdcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNldFNlbGVjdEl0ZW1zKCRzZWxlY3RFbGVtZW50OiBKUXVlcnk8SFRNTFNlbGVjdEVsZW1lbnQ+LCBpdGVtczogU2VsZWN0SXRlbVtdLCBhY3RpdmVJdGVtVmFsdWU/OiBzdHJpbmcgfCBudW1iZXIpIHtcclxuICAgICRzZWxlY3RFbGVtZW50LmVtcHR5KCk7XHJcbiAgICBpdGVtcy5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICAgIGxldCBzZWxlY3RlZDogc3RyaW5nID0gKGl0ZW0udmFsdWUgPT0gYWN0aXZlSXRlbVZhbHVlKSA/ICcgc2VsZWN0ZWQ9XCJzZWxlY3RlZFwiJyA6IFwiXCI7XHJcbiAgICAgICAgbGV0IGVsZW1lbnQgPSBqUXVlcnkoYDxvcHRpb24gdmFsdWU9JHtpdGVtLnZhbHVlfSR7c2VsZWN0ZWR9PiR7aXRlbS5jYXB0aW9ufTwvb3B0aW9uPmApO1xyXG4gICAgICAgICRzZWxlY3RFbGVtZW50LmFwcGVuZChlbGVtZW50KTtcclxuICAgICAgICBlbGVtZW50LmRhdGEoJ29iamVjdCcsIGl0ZW0ub2JqZWN0KTtcclxuICAgIH1cclxuICAgICk7XHJcblxyXG4gICAgJHNlbGVjdEVsZW1lbnQuZGF0YSgnaXRlbXMnLCBpdGVtcyk7XHJcblxyXG5cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdldFNlbGVjdGVkT2JqZWN0KCRzZWxlY3REaXY6IEpRdWVyeTxIVE1MU2VsZWN0RWxlbWVudD4pIHtcclxuXHJcbiAgICBsZXQgaXRlbXM6IFNlbGVjdEl0ZW1bXSA9ICRzZWxlY3REaXYuZGF0YSgnaXRlbXMnKTtcclxuXHJcbiAgICBsZXQgc2VsZWN0ZWRWYWx1ZSA9ICRzZWxlY3REaXYudmFsKCk7XHJcblxyXG4gICAgcmV0dXJuIGl0ZW1zLmZpbmQoaXRlbSA9PiBpdGVtLnZhbHVlID09IHNlbGVjdGVkVmFsdWUpPy5vYmplY3Q7XHJcblxyXG59XHJcblxyXG5leHBvcnQgdmFyIGpvX21vdXNlRGV0ZWN0ZWQ6IGJvb2xlYW4gPSBmYWxzZTtcclxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrSWZNb3VzZVByZXNlbnQoKSB7XHJcbiAgICBpZiAobWF0Y2hNZWRpYSgnKHBvaW50ZXI6ZmluZSknKS5tYXRjaGVzKSB7XHJcbiAgICAgICAgam9fbW91c2VEZXRlY3RlZCA9IHRydWU7XHJcbiAgICB9XHJcbn1cclxuIl19