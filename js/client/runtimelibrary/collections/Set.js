import { Method, Parameterlist } from "../../compiler/types/Types.js";
import { Interface } from "../../compiler/types/Class.js";
import { booleanPrimitiveType } from "../../compiler/types/PrimitiveTypes.js";
export class SetClass extends Interface {
    constructor(module) {
        super("Set", module, "Interface mit Methoden eines Set, d.h. einer Menge, die jedes Element maximal einmal enthält");
        let objectType = module.typeStore.getType("Object");
        let typeE = module.typeStore.getType("Object").clone();
        typeE.identifier = "E";
        typeE.isTypeVariable = true;
        let tvE = {
            identifier: "E",
            scopeFrom: { line: 1, column: 1, length: 1 },
            scopeTo: { line: 1, column: 1, length: 1 },
            type: typeE
        };
        this.typeVariables.push(tvE);
        let collectionInterface = module.typeStore.getType("Collection").clone();
        collectionInterface.typeVariables = [tvE];
        this.extends.push(collectionInterface);
        this.addMethod(new Method("contains", new Parameterlist([
            { identifier: "o", type: objectType, declaration: null, usagePositions: null, isFinal: true }
        ]), booleanPrimitiveType, null, // no implementation!
        true, false, "Gibt genau dann true zurück, wenn das Set das Objekt o enthält."));
        this.addMethod(new Method("containsAll", new Parameterlist([
            { identifier: "c", type: collectionInterface, declaration: null, usagePositions: null, isFinal: true }
        ]), booleanPrimitiveType, null, // no implementation!
        true, false, "Gibt genau dann true zurück, wenn das Set alle Elemente der übergebenen Collection enthält."));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2NsaWVudC9ydW50aW1lbGlicmFyeS9jb2xsZWN0aW9ucy9TZXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLE1BQU0sRUFBRSxhQUFhLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUN0RSxPQUFPLEVBQUUsU0FBUyxFQUF1QixNQUFNLCtCQUErQixDQUFDO0FBQy9FLE9BQU8sRUFBcUIsb0JBQW9CLEVBQW9CLE1BQU0sd0NBQXdDLENBQUM7QUFFbkgsTUFBTSxPQUFPLFFBQVMsU0FBUSxTQUFTO0lBRW5DLFlBQVksTUFBYztRQUV0QixLQUFLLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSw4RkFBOEYsQ0FBQyxDQUFDO1FBRXJILElBQUksVUFBVSxHQUFHLE1BQU0sQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRXBELElBQUksS0FBSyxHQUFrQixNQUFNLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUN2RSxLQUFLLENBQUMsVUFBVSxHQUFHLEdBQUcsQ0FBQztRQUN2QixLQUFLLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQztRQUU1QixJQUFJLEdBQUcsR0FBaUI7WUFDcEIsVUFBVSxFQUFFLEdBQUc7WUFDZixTQUFTLEVBQUUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRTtZQUM1QyxPQUFPLEVBQUUsRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRTtZQUMxQyxJQUFJLEVBQUUsS0FBSztTQUNkLENBQUM7UUFFRixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUU3QixJQUFJLG1CQUFtQixHQUFlLE1BQU0sQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBRSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3RGLG1CQUFtQixDQUFDLGFBQWEsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFFdkMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxVQUFVLEVBQUUsSUFBSSxhQUFhLENBQUM7WUFDcEQsRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUU7U0FDaEcsQ0FBQyxFQUFFLG9CQUFvQixFQUNwQixJQUFJLEVBQUcscUJBQXFCO1FBQzVCLElBQUksRUFBRSxLQUFLLEVBQUUsaUVBQWlFLENBQUMsQ0FBQyxDQUFDO1FBRXJGLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxNQUFNLENBQUMsYUFBYSxFQUFFLElBQUksYUFBYSxDQUFDO1lBQ3ZELEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsbUJBQW1CLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUU7U0FDekcsQ0FBQyxFQUFFLG9CQUFvQixFQUNwQixJQUFJLEVBQUcscUJBQXFCO1FBQzVCLElBQUksRUFBRSxLQUFLLEVBQUUsNkZBQTZGLENBQUMsQ0FBQyxDQUFDO0lBRXJILENBQUM7Q0FFSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1vZHVsZSB9IGZyb20gXCIuLi8uLi9jb21waWxlci9wYXJzZXIvTW9kdWxlLmpzXCI7XHJcbmltcG9ydCB7IE1ldGhvZCwgUGFyYW1ldGVybGlzdCB9IGZyb20gXCIuLi8uLi9jb21waWxlci90eXBlcy9UeXBlcy5qc1wiO1xyXG5pbXBvcnQgeyBJbnRlcmZhY2UsIFR5cGVWYXJpYWJsZSwgS2xhc3MgfSBmcm9tIFwiLi4vLi4vY29tcGlsZXIvdHlwZXMvQ2xhc3MuanNcIjtcclxuaW1wb3J0IHsgdm9pZFByaW1pdGl2ZVR5cGUsIGJvb2xlYW5QcmltaXRpdmVUeXBlLCBpbnRQcmltaXRpdmVUeXBlIH0gZnJvbSBcIi4uLy4uL2NvbXBpbGVyL3R5cGVzL1ByaW1pdGl2ZVR5cGVzLmpzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgU2V0Q2xhc3MgZXh0ZW5kcyBJbnRlcmZhY2Uge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG1vZHVsZTogTW9kdWxlKSB7XHJcblxyXG4gICAgICAgIHN1cGVyKFwiU2V0XCIsIG1vZHVsZSwgXCJJbnRlcmZhY2UgbWl0IE1ldGhvZGVuIGVpbmVzIFNldCwgZC5oLiBlaW5lciBNZW5nZSwgZGllIGplZGVzIEVsZW1lbnQgbWF4aW1hbCBlaW5tYWwgZW50aMOkbHRcIik7XHJcblxyXG4gICAgICAgIGxldCBvYmplY3RUeXBlID0gbW9kdWxlLnR5cGVTdG9yZS5nZXRUeXBlKFwiT2JqZWN0XCIpO1xyXG5cclxuICAgICAgICBsZXQgdHlwZUU6IEtsYXNzID0gKDxLbGFzcz5tb2R1bGUudHlwZVN0b3JlLmdldFR5cGUoXCJPYmplY3RcIikpLmNsb25lKCk7XHJcbiAgICAgICAgdHlwZUUuaWRlbnRpZmllciA9IFwiRVwiO1xyXG4gICAgICAgIHR5cGVFLmlzVHlwZVZhcmlhYmxlID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgbGV0IHR2RTogVHlwZVZhcmlhYmxlID0ge1xyXG4gICAgICAgICAgICBpZGVudGlmaWVyOiBcIkVcIixcclxuICAgICAgICAgICAgc2NvcGVGcm9tOiB7IGxpbmU6IDEsIGNvbHVtbjogMSwgbGVuZ3RoOiAxIH0sXHJcbiAgICAgICAgICAgIHNjb3BlVG86IHsgbGluZTogMSwgY29sdW1uOiAxLCBsZW5ndGg6IDEgfSxcclxuICAgICAgICAgICAgdHlwZTogdHlwZUVcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLnR5cGVWYXJpYWJsZXMucHVzaCh0dkUpO1xyXG5cclxuICAgICAgICBsZXQgY29sbGVjdGlvbkludGVyZmFjZSA9ICg8SW50ZXJmYWNlPm1vZHVsZS50eXBlU3RvcmUuZ2V0VHlwZShcIkNvbGxlY3Rpb25cIikpLmNsb25lKCk7XHJcbiAgICAgICAgY29sbGVjdGlvbkludGVyZmFjZS50eXBlVmFyaWFibGVzID0gW3R2RV07XHJcblxyXG4gICAgICAgIHRoaXMuZXh0ZW5kcy5wdXNoKGNvbGxlY3Rpb25JbnRlcmZhY2UpO1xyXG5cclxuICAgICAgICB0aGlzLmFkZE1ldGhvZChuZXcgTWV0aG9kKFwiY29udGFpbnNcIiwgbmV3IFBhcmFtZXRlcmxpc3QoW1xyXG4gICAgICAgICAgICB7IGlkZW50aWZpZXI6IFwib1wiLCB0eXBlOiBvYmplY3RUeXBlLCBkZWNsYXJhdGlvbjogbnVsbCwgdXNhZ2VQb3NpdGlvbnM6IG51bGwsIGlzRmluYWw6IHRydWUgfVxyXG4gICAgICAgIF0pLCBib29sZWFuUHJpbWl0aXZlVHlwZSxcclxuICAgICAgICAgICAgbnVsbCwgIC8vIG5vIGltcGxlbWVudGF0aW9uIVxyXG4gICAgICAgICAgICB0cnVlLCBmYWxzZSwgXCJHaWJ0IGdlbmF1IGRhbm4gdHJ1ZSB6dXLDvGNrLCB3ZW5uIGRhcyBTZXQgZGFzIE9iamVrdCBvIGVudGjDpGx0LlwiKSk7XHJcblxyXG4gICAgICAgIHRoaXMuYWRkTWV0aG9kKG5ldyBNZXRob2QoXCJjb250YWluc0FsbFwiLCBuZXcgUGFyYW1ldGVybGlzdChbXHJcbiAgICAgICAgICAgIHsgaWRlbnRpZmllcjogXCJjXCIsIHR5cGU6IGNvbGxlY3Rpb25JbnRlcmZhY2UsIGRlY2xhcmF0aW9uOiBudWxsLCB1c2FnZVBvc2l0aW9uczogbnVsbCwgaXNGaW5hbDogdHJ1ZSB9XHJcbiAgICAgICAgXSksIGJvb2xlYW5QcmltaXRpdmVUeXBlLFxyXG4gICAgICAgICAgICBudWxsLCAgLy8gbm8gaW1wbGVtZW50YXRpb24hXHJcbiAgICAgICAgICAgIHRydWUsIGZhbHNlLCBcIkdpYnQgZ2VuYXUgZGFubiB0cnVlIHp1csO8Y2ssIHdlbm4gZGFzIFNldCBhbGxlIEVsZW1lbnRlIGRlciDDvGJlcmdlYmVuZW4gQ29sbGVjdGlvbiBlbnRow6RsdC5cIikpO1xyXG5cclxuICAgIH1cclxuXHJcbn1cclxuIl19