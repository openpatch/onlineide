import { Klass } from "../../compiler/types/Class.js";
import { intPrimitiveType } from "../../compiler/types/PrimitiveTypes.js";
import { Method, Parameterlist } from "../../compiler/types/Types.js";
import { RectangleHelper } from "../graphics/Rectangle.js";
export class GNGRechteckClass extends Klass {
    constructor(module, moduleStore) {
        super("Rechteck", module, "Rechteck-Klasse der Graphics'n Games-Bibliothek (Cornelsen-Verlag)");
        this.setBaseClass(module.typeStore.getType("GNGBaseFigur"));
        // this.addAttribute(new Attribute("PI", doublePrimitiveType, (object) => { return Math.PI }, true, Visibility.public, true, "Die Kreiszahl Pi (3.1415...)"));
        this.addMethod(new Method("Rechteck", new Parameterlist([]), null, (parameters) => {
            let o = parameters[0].value;
            o.intrinsicData["isGNG"] = true;
            let rh = new RectangleHelper(10, 10, 100, 100, module.main.getInterpreter(), o);
            o.intrinsicData["Actor"] = rh;
        }, false, false, 'Instanziert ein neues, achsenparalleles Rechteck-Objekt.', true));
        this.addMethod(new Method("GrößeSetzen", new Parameterlist([
            { identifier: "breite", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
            { identifier: "höhe", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }
        ]), null, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            let breite = parameters[1].value;
            let höhe = parameters[2].value;
            if (sh.testdestroyed("GrößeSetzen"))
                return;
            sh.height = höhe / sh.displayObject.scale.y;
            sh.width = breite / sh.displayObject.scale.x;
            sh.render();
        }, false, false, "Setzt die Breite und Höhe des Rechtecks.", false));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR05HUmVjaHRlY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvY2xpZW50L3J1bnRpbWVsaWJyYXJ5L2duZy9HTkdSZWNodGVjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDdEQsT0FBTyxFQUF1QixnQkFBZ0IsRUFBdUIsTUFBTSx3Q0FBd0MsQ0FBQztBQUNwSCxPQUFPLEVBQUUsTUFBTSxFQUFFLGFBQWEsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBR3RFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUUzRCxNQUFNLE9BQU8sZ0JBQWlCLFNBQVEsS0FBSztJQUV2QyxZQUFZLE1BQWMsRUFBRSxXQUF3QjtRQUVoRCxLQUFLLENBQUMsVUFBVSxFQUFFLE1BQU0sRUFBRSxvRUFBb0UsQ0FBQyxDQUFDO1FBRWhHLElBQUksQ0FBQyxZQUFZLENBQVEsTUFBTSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztRQUVuRSw4SkFBOEo7UUFFOUosSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxVQUFVLEVBQUUsSUFBSSxhQUFhLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUM3RCxDQUFDLFVBQVUsRUFBRSxFQUFFO1lBRVgsSUFBSSxDQUFDLEdBQWtCLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7WUFDM0MsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsR0FBRyxJQUFJLENBQUM7WUFFaEMsSUFBSSxFQUFFLEdBQUcsSUFBSSxlQUFlLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLE1BQU0sQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDaEYsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFLENBQUM7UUFFbEMsQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsMERBQTBELEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUV4RixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksTUFBTSxDQUFDLGFBQWEsRUFBRSxJQUFJLGFBQWEsQ0FBQztZQUN2RCxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLGdCQUFnQixFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsY0FBYyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFO1lBQ3hHLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsZ0JBQWdCLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUU7U0FDekcsQ0FBQyxFQUFFLElBQUksRUFDSixDQUFDLFVBQVUsRUFBRSxFQUFFO1lBRVgsSUFBSSxDQUFDLEdBQWtCLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7WUFDM0MsSUFBSSxFQUFFLEdBQW9CLENBQUMsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDbkQsSUFBSSxNQUFNLEdBQVcsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztZQUN6QyxJQUFJLElBQUksR0FBVyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1lBRXZDLElBQUksRUFBRSxDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUM7Z0JBQUUsT0FBTztZQUU1QyxFQUFFLENBQUMsTUFBTSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDNUMsRUFBRSxDQUFDLEtBQUssR0FBRyxNQUFNLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQzdDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUVoQixDQUFDLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSwwQ0FBMEMsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBRzdFLENBQUM7Q0FFSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1vZHVsZSwgTW9kdWxlU3RvcmUgfSBmcm9tIFwiLi4vLi4vY29tcGlsZXIvcGFyc2VyL01vZHVsZS5qc1wiO1xuaW1wb3J0IHsgS2xhc3MgfSBmcm9tIFwiLi4vLi4vY29tcGlsZXIvdHlwZXMvQ2xhc3MuanNcIjtcbmltcG9ydCB7IGRvdWJsZVByaW1pdGl2ZVR5cGUsIGludFByaW1pdGl2ZVR5cGUsIHN0cmluZ1ByaW1pdGl2ZVR5cGUgfSBmcm9tIFwiLi4vLi4vY29tcGlsZXIvdHlwZXMvUHJpbWl0aXZlVHlwZXMuanNcIjtcbmltcG9ydCB7IE1ldGhvZCwgUGFyYW1ldGVybGlzdCB9IGZyb20gXCIuLi8uLi9jb21waWxlci90eXBlcy9UeXBlcy5qc1wiO1xuaW1wb3J0IHsgUnVudGltZU9iamVjdCB9IGZyb20gXCIuLi8uLi9pbnRlcnByZXRlci9SdW50aW1lT2JqZWN0LmpzXCI7XG5pbXBvcnQgeyBJbnRlcnByZXRlciB9IGZyb20gXCIuLi8uLi9pbnRlcnByZXRlci9JbnRlcnByZXRlci5qc1wiO1xuaW1wb3J0IHsgUmVjdGFuZ2xlSGVscGVyIH0gZnJvbSBcIi4uL2dyYXBoaWNzL1JlY3RhbmdsZS5qc1wiO1xuXG5leHBvcnQgY2xhc3MgR05HUmVjaHRlY2tDbGFzcyBleHRlbmRzIEtsYXNzIHtcblxuICAgIGNvbnN0cnVjdG9yKG1vZHVsZTogTW9kdWxlLCBtb2R1bGVTdG9yZTogTW9kdWxlU3RvcmUpIHtcblxuICAgICAgICBzdXBlcihcIlJlY2h0ZWNrXCIsIG1vZHVsZSwgXCJSZWNodGVjay1LbGFzc2UgZGVyIEdyYXBoaWNzJ24gR2FtZXMtQmlibGlvdGhlayAoQ29ybmVsc2VuLVZlcmxhZylcIik7XG5cbiAgICAgICAgdGhpcy5zZXRCYXNlQ2xhc3MoPEtsYXNzPm1vZHVsZS50eXBlU3RvcmUuZ2V0VHlwZShcIkdOR0Jhc2VGaWd1clwiKSk7XG5cbiAgICAgICAgLy8gdGhpcy5hZGRBdHRyaWJ1dGUobmV3IEF0dHJpYnV0ZShcIlBJXCIsIGRvdWJsZVByaW1pdGl2ZVR5cGUsIChvYmplY3QpID0+IHsgcmV0dXJuIE1hdGguUEkgfSwgdHJ1ZSwgVmlzaWJpbGl0eS5wdWJsaWMsIHRydWUsIFwiRGllIEtyZWlzemFobCBQaSAoMy4xNDE1Li4uKVwiKSk7XG5cbiAgICAgICAgdGhpcy5hZGRNZXRob2QobmV3IE1ldGhvZChcIlJlY2h0ZWNrXCIsIG5ldyBQYXJhbWV0ZXJsaXN0KFtdKSwgbnVsbCxcbiAgICAgICAgICAgIChwYXJhbWV0ZXJzKSA9PiB7XG5cbiAgICAgICAgICAgICAgICBsZXQgbzogUnVudGltZU9iamVjdCA9IHBhcmFtZXRlcnNbMF0udmFsdWU7XG4gICAgICAgICAgICAgICAgby5pbnRyaW5zaWNEYXRhW1wiaXNHTkdcIl0gPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgbGV0IHJoID0gbmV3IFJlY3RhbmdsZUhlbHBlcigxMCwgMTAsIDEwMCwgMTAwLCBtb2R1bGUubWFpbi5nZXRJbnRlcnByZXRlcigpLCBvKTtcbiAgICAgICAgICAgICAgICBvLmludHJpbnNpY0RhdGFbXCJBY3RvclwiXSA9IHJoO1xuXG4gICAgICAgICAgICB9LCBmYWxzZSwgZmFsc2UsICdJbnN0YW56aWVydCBlaW4gbmV1ZXMsIGFjaHNlbnBhcmFsbGVsZXMgUmVjaHRlY2stT2JqZWt0LicsIHRydWUpKTtcblxuICAgICAgICB0aGlzLmFkZE1ldGhvZChuZXcgTWV0aG9kKFwiR3LDtsOfZVNldHplblwiLCBuZXcgUGFyYW1ldGVybGlzdChbXG4gICAgICAgICAgICB7IGlkZW50aWZpZXI6IFwiYnJlaXRlXCIsIHR5cGU6IGludFByaW1pdGl2ZVR5cGUsIGRlY2xhcmF0aW9uOiBudWxsLCB1c2FnZVBvc2l0aW9uczogbnVsbCwgaXNGaW5hbDogdHJ1ZSB9LFxuICAgICAgICAgICAgeyBpZGVudGlmaWVyOiBcImjDtmhlXCIsIHR5cGU6IGludFByaW1pdGl2ZVR5cGUsIGRlY2xhcmF0aW9uOiBudWxsLCB1c2FnZVBvc2l0aW9uczogbnVsbCwgaXNGaW5hbDogdHJ1ZSB9XG4gICAgICAgIF0pLCBudWxsLFxuICAgICAgICAgICAgKHBhcmFtZXRlcnMpID0+IHtcblxuICAgICAgICAgICAgICAgIGxldCBvOiBSdW50aW1lT2JqZWN0ID0gcGFyYW1ldGVyc1swXS52YWx1ZTtcbiAgICAgICAgICAgICAgICBsZXQgc2g6IFJlY3RhbmdsZUhlbHBlciA9IG8uaW50cmluc2ljRGF0YVtcIkFjdG9yXCJdO1xuICAgICAgICAgICAgICAgIGxldCBicmVpdGU6IG51bWJlciA9IHBhcmFtZXRlcnNbMV0udmFsdWU7XG4gICAgICAgICAgICAgICAgbGV0IGjDtmhlOiBudW1iZXIgPSBwYXJhbWV0ZXJzWzJdLnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgaWYgKHNoLnRlc3RkZXN0cm95ZWQoXCJHcsO2w59lU2V0emVuXCIpKSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICBzaC5oZWlnaHQgPSBow7ZoZSAvIHNoLmRpc3BsYXlPYmplY3Quc2NhbGUueTtcbiAgICAgICAgICAgICAgICBzaC53aWR0aCA9IGJyZWl0ZSAvIHNoLmRpc3BsYXlPYmplY3Quc2NhbGUueDtcbiAgICAgICAgICAgICAgICBzaC5yZW5kZXIoKTtcblxuICAgICAgICAgICAgfSwgZmFsc2UsIGZhbHNlLCBcIlNldHp0IGRpZSBCcmVpdGUgdW5kIEjDtmhlIGRlcyBSZWNodGVja3MuXCIsIGZhbHNlKSk7XG5cblxuICAgIH1cblxufVxuXG4iXX0=