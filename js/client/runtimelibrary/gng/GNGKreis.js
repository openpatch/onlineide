import { Klass } from "../../compiler/types/Class.js";
import { intPrimitiveType } from "../../compiler/types/PrimitiveTypes.js";
import { Method, Parameterlist } from "../../compiler/types/Types.js";
import { CircleHelper } from "../graphics/Circle.js";
export class GNGKreisClass extends Klass {
    constructor(module, moduleStore) {
        super("Kreis", module, "Kreis-Klasse der Graphics'n Games-Bibliothek (Cornelsen-Verlag)");
        this.setBaseClass(module.typeStore.getType("GNGBaseFigur"));
        // this.addAttribute(new Attribute("PI", doublePrimitiveType, (object) => { return Math.PI }, true, Visibility.public, true, "Die Kreiszahl Pi (3.1415...)"));
        this.addMethod(new Method("Kreis", new Parameterlist([]), null, (parameters) => {
            let o = parameters[0].value;
            o.intrinsicData["isGNG"] = true;
            let rh = new CircleHelper(60, 60, 50, module.main.getInterpreter(), o);
            o.intrinsicData["Actor"] = rh;
        }, false, false, 'Instanziert ein neues Kreis-Objekt.', true));
        this.addMethod(new Method("RadiusSetzen", new Parameterlist([
            { identifier: "radius", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }
        ]), null, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            let radius = parameters[1].value;
            if (sh.testdestroyed("radiusSetzen"))
                return;
            sh.setRadius(radius);
        }, false, false, "Setzt den Radius des Kreis-Objekts.", false));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR05HS3JlaXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvY2xpZW50L3J1bnRpbWVsaWJyYXJ5L2duZy9HTkdLcmVpcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDdEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDMUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxhQUFhLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUV0RSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFHckQsTUFBTSxPQUFPLGFBQWMsU0FBUSxLQUFLO0lBRXBDLFlBQVksTUFBYyxFQUFFLFdBQXdCO1FBRWhELEtBQUssQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLGlFQUFpRSxDQUFDLENBQUM7UUFFMUYsSUFBSSxDQUFDLFlBQVksQ0FBUSxNQUFNLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO1FBRW5FLDhKQUE4SjtRQUU5SixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sRUFBRSxJQUFJLGFBQWEsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQzFELENBQUMsVUFBVSxFQUFFLEVBQUU7WUFFWCxJQUFJLENBQUMsR0FBa0IsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztZQUMzQyxDQUFDLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQztZQUVoQyxJQUFJLEVBQUUsR0FBRyxJQUFJLFlBQVksQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3ZFLENBQUMsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDO1FBRWxDLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLHFDQUFxQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7UUFFbkUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxjQUFjLEVBQUUsSUFBSSxhQUFhLENBQUM7WUFDeEQsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxnQkFBZ0IsRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLGNBQWMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRTtTQUMzRyxDQUFDLEVBQUUsSUFBSSxFQUNKLENBQUMsVUFBVSxFQUFFLEVBQUU7WUFFWCxJQUFJLENBQUMsR0FBa0IsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztZQUMzQyxJQUFJLEVBQUUsR0FBaUIsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNoRCxJQUFJLE1BQU0sR0FBVyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1lBRXpDLElBQUksRUFBRSxDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQUM7Z0JBQUUsT0FBTztZQUU3QyxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRXpCLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLHFDQUFxQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFHeEUsQ0FBQztDQUVKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTW9kdWxlLCBNb2R1bGVTdG9yZSB9IGZyb20gXCIuLi8uLi9jb21waWxlci9wYXJzZXIvTW9kdWxlLmpzXCI7XG5pbXBvcnQgeyBLbGFzcyB9IGZyb20gXCIuLi8uLi9jb21waWxlci90eXBlcy9DbGFzcy5qc1wiO1xuaW1wb3J0IHsgaW50UHJpbWl0aXZlVHlwZSB9IGZyb20gXCIuLi8uLi9jb21waWxlci90eXBlcy9QcmltaXRpdmVUeXBlcy5qc1wiO1xuaW1wb3J0IHsgTWV0aG9kLCBQYXJhbWV0ZXJsaXN0IH0gZnJvbSBcIi4uLy4uL2NvbXBpbGVyL3R5cGVzL1R5cGVzLmpzXCI7XG5pbXBvcnQgeyBSdW50aW1lT2JqZWN0IH0gZnJvbSBcIi4uLy4uL2ludGVycHJldGVyL1J1bnRpbWVPYmplY3QuanNcIjtcbmltcG9ydCB7IENpcmNsZUhlbHBlciB9IGZyb20gXCIuLi9ncmFwaGljcy9DaXJjbGUuanNcIjtcbmltcG9ydCB7IFJlY3RhbmdsZUhlbHBlciB9IGZyb20gXCIuLi9ncmFwaGljcy9SZWN0YW5nbGUuanNcIjtcblxuZXhwb3J0IGNsYXNzIEdOR0tyZWlzQ2xhc3MgZXh0ZW5kcyBLbGFzcyB7XG5cbiAgICBjb25zdHJ1Y3Rvcihtb2R1bGU6IE1vZHVsZSwgbW9kdWxlU3RvcmU6IE1vZHVsZVN0b3JlKSB7XG5cbiAgICAgICAgc3VwZXIoXCJLcmVpc1wiLCBtb2R1bGUsIFwiS3JlaXMtS2xhc3NlIGRlciBHcmFwaGljcyduIEdhbWVzLUJpYmxpb3RoZWsgKENvcm5lbHNlbi1WZXJsYWcpXCIpO1xuXG4gICAgICAgIHRoaXMuc2V0QmFzZUNsYXNzKDxLbGFzcz5tb2R1bGUudHlwZVN0b3JlLmdldFR5cGUoXCJHTkdCYXNlRmlndXJcIikpO1xuXG4gICAgICAgIC8vIHRoaXMuYWRkQXR0cmlidXRlKG5ldyBBdHRyaWJ1dGUoXCJQSVwiLCBkb3VibGVQcmltaXRpdmVUeXBlLCAob2JqZWN0KSA9PiB7IHJldHVybiBNYXRoLlBJIH0sIHRydWUsIFZpc2liaWxpdHkucHVibGljLCB0cnVlLCBcIkRpZSBLcmVpc3phaGwgUGkgKDMuMTQxNS4uLilcIikpO1xuXG4gICAgICAgIHRoaXMuYWRkTWV0aG9kKG5ldyBNZXRob2QoXCJLcmVpc1wiLCBuZXcgUGFyYW1ldGVybGlzdChbXSksIG51bGwsXG4gICAgICAgICAgICAocGFyYW1ldGVycykgPT4ge1xuXG4gICAgICAgICAgICAgICAgbGV0IG86IFJ1bnRpbWVPYmplY3QgPSBwYXJhbWV0ZXJzWzBdLnZhbHVlO1xuICAgICAgICAgICAgICAgIG8uaW50cmluc2ljRGF0YVtcImlzR05HXCJdID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgIGxldCByaCA9IG5ldyBDaXJjbGVIZWxwZXIoNjAsIDYwLCA1MCwgbW9kdWxlLm1haW4uZ2V0SW50ZXJwcmV0ZXIoKSwgbyk7XG4gICAgICAgICAgICAgICAgby5pbnRyaW5zaWNEYXRhW1wiQWN0b3JcIl0gPSByaDtcblxuICAgICAgICAgICAgfSwgZmFsc2UsIGZhbHNlLCAnSW5zdGFuemllcnQgZWluIG5ldWVzIEtyZWlzLU9iamVrdC4nLCB0cnVlKSk7XG5cbiAgICAgICAgdGhpcy5hZGRNZXRob2QobmV3IE1ldGhvZChcIlJhZGl1c1NldHplblwiLCBuZXcgUGFyYW1ldGVybGlzdChbXG4gICAgICAgICAgICB7IGlkZW50aWZpZXI6IFwicmFkaXVzXCIsIHR5cGU6IGludFByaW1pdGl2ZVR5cGUsIGRlY2xhcmF0aW9uOiBudWxsLCB1c2FnZVBvc2l0aW9uczogbnVsbCwgaXNGaW5hbDogdHJ1ZSB9XG4gICAgICAgIF0pLCBudWxsLFxuICAgICAgICAgICAgKHBhcmFtZXRlcnMpID0+IHtcblxuICAgICAgICAgICAgICAgIGxldCBvOiBSdW50aW1lT2JqZWN0ID0gcGFyYW1ldGVyc1swXS52YWx1ZTtcbiAgICAgICAgICAgICAgICBsZXQgc2g6IENpcmNsZUhlbHBlciA9IG8uaW50cmluc2ljRGF0YVtcIkFjdG9yXCJdO1xuICAgICAgICAgICAgICAgIGxldCByYWRpdXM6IG51bWJlciA9IHBhcmFtZXRlcnNbMV0udmFsdWU7XG5cbiAgICAgICAgICAgICAgICBpZiAoc2gudGVzdGRlc3Ryb3llZChcInJhZGl1c1NldHplblwiKSkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgc2guc2V0UmFkaXVzKHJhZGl1cyk7XG5cbiAgICAgICAgICAgIH0sIGZhbHNlLCBmYWxzZSwgXCJTZXR6dCBkZW4gUmFkaXVzIGRlcyBLcmVpcy1PYmpla3RzLlwiLCBmYWxzZSkpO1xuXG5cbiAgICB9XG5cbn1cblxuIl19