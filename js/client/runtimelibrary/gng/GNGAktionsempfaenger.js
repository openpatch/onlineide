import { Interface } from "../../compiler/types/Class.js";
import { charPrimitiveType, intPrimitiveType, voidPrimitiveType } from "../../compiler/types/PrimitiveTypes.js";
import { Method, Parameterlist } from "../../compiler/types/Types.js";
export class GNGAktionsempfaengerInterface extends Interface {
    constructor(module) {
        super("Aktionsempfaenger", module, "GNG: Interface für die Aktionsausführung");
        this.addMethod(new Method("Ausführen", new Parameterlist([]), voidPrimitiveType, null, // no implementation!
        false, false, "Diese Methode wird vom Taktgeber aufgerufen."));
        this.addMethod(new Method("Taste", new Parameterlist([
            { identifier: "taste", type: charPrimitiveType, declaration: null, usagePositions: null, isFinal: true }
        ]), voidPrimitiveType, null, // no implementation!
        false, false, "Wird aufgerufen, wenn eine Taste gedrückt wird."));
        this.addMethod(new Method("SonderTaste", new Parameterlist([
            { identifier: "taste", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }
        ]), voidPrimitiveType, null, // no implementation!
        false, false, "Wird aufgerufen, wenn eine Sondertaste gedrückt wird."));
        this.addMethod(new Method("Geklickt", new Parameterlist([
            { identifier: "x", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
            { identifier: "y", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
            { identifier: "anzahl", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
        ]), voidPrimitiveType, null, // no implementation!
        false, false, "Wird aufgerufen, wenn eine die linke Maustaste gedrückt wird."));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR05HQWt0aW9uc2VtcGZhZW5nZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvY2xpZW50L3J1bnRpbWVsaWJyYXJ5L2duZy9HTkdBa3Rpb25zZW1wZmFlbmdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsU0FBUyxFQUFTLE1BQU0sK0JBQStCLENBQUM7QUFDakUsT0FBTyxFQUFFLGlCQUFpQixFQUF1QixnQkFBZ0IsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQ3JJLE9BQU8sRUFBRSxNQUFNLEVBQUUsYUFBYSxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFFdEUsTUFBTSxPQUFPLDZCQUE4QixTQUFRLFNBQVM7SUFFeEQsWUFBWSxNQUFjO1FBQ3RCLEtBQUssQ0FBQyxtQkFBbUIsRUFBRSxNQUFNLEVBQUUsMENBQTBDLENBQUMsQ0FBQztRQUUvRSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksTUFBTSxDQUFDLFdBQVcsRUFBRSxJQUFJLGFBQWEsQ0FBQyxFQUFFLENBQUMsRUFBRSxpQkFBaUIsRUFDM0UsSUFBSSxFQUFHLHFCQUFxQjtRQUM1QixLQUFLLEVBQUUsS0FBSyxFQUFFLDhDQUE4QyxDQUFDLENBQUMsQ0FBQztRQUVuRSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sRUFBRSxJQUFJLGFBQWEsQ0FBQztZQUNqRCxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLGlCQUFpQixFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsY0FBYyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFO1NBQzNHLENBQUMsRUFBRSxpQkFBaUIsRUFDakIsSUFBSSxFQUFHLHFCQUFxQjtRQUM1QixLQUFLLEVBQUUsS0FBSyxFQUFFLGlEQUFpRCxDQUFDLENBQUMsQ0FBQztRQUV0RSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksTUFBTSxDQUFDLGFBQWEsRUFBRSxJQUFJLGFBQWEsQ0FBQztZQUN2RCxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLGdCQUFnQixFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsY0FBYyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFO1NBQzFHLENBQUMsRUFBRSxpQkFBaUIsRUFDakIsSUFBSSxFQUFHLHFCQUFxQjtRQUM1QixLQUFLLEVBQUUsS0FBSyxFQUFFLHVEQUF1RCxDQUFDLENBQUMsQ0FBQztRQUU1RSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksTUFBTSxDQUFDLFVBQVUsRUFBRSxJQUFJLGFBQWEsQ0FBQztZQUNwRCxFQUFFLFVBQVUsRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLGdCQUFnQixFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsY0FBYyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFO1lBQ25HLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsZ0JBQWdCLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUU7WUFDbkcsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxnQkFBZ0IsRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLGNBQWMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRTtTQUMzRyxDQUFDLEVBQUUsaUJBQWlCLEVBQ2pCLElBQUksRUFBRyxxQkFBcUI7UUFDNUIsS0FBSyxFQUFFLEtBQUssRUFBRSwrREFBK0QsQ0FBQyxDQUFDLENBQUM7SUFHeEYsQ0FBQztDQUVKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTW9kdWxlIH0gZnJvbSBcIi4uLy4uL2NvbXBpbGVyL3BhcnNlci9Nb2R1bGUuanNcIjtcbmltcG9ydCB7IEludGVyZmFjZSwgS2xhc3MgfSBmcm9tIFwiLi4vLi4vY29tcGlsZXIvdHlwZXMvQ2xhc3MuanNcIjtcbmltcG9ydCB7IGNoYXJQcmltaXRpdmVUeXBlLCBkb3VibGVQcmltaXRpdmVUeXBlLCBpbnRQcmltaXRpdmVUeXBlLCB2b2lkUHJpbWl0aXZlVHlwZSB9IGZyb20gXCIuLi8uLi9jb21waWxlci90eXBlcy9QcmltaXRpdmVUeXBlcy5qc1wiO1xuaW1wb3J0IHsgTWV0aG9kLCBQYXJhbWV0ZXJsaXN0IH0gZnJvbSBcIi4uLy4uL2NvbXBpbGVyL3R5cGVzL1R5cGVzLmpzXCI7XG5cbmV4cG9ydCBjbGFzcyBHTkdBa3Rpb25zZW1wZmFlbmdlckludGVyZmFjZSBleHRlbmRzIEludGVyZmFjZSB7XG5cbiAgICBjb25zdHJ1Y3Rvcihtb2R1bGU6IE1vZHVsZSkge1xuICAgICAgICBzdXBlcihcIkFrdGlvbnNlbXBmYWVuZ2VyXCIsIG1vZHVsZSwgXCJHTkc6IEludGVyZmFjZSBmw7xyIGRpZSBBa3Rpb25zYXVzZsO8aHJ1bmdcIik7XG5cbiAgICAgICAgdGhpcy5hZGRNZXRob2QobmV3IE1ldGhvZChcIkF1c2bDvGhyZW5cIiwgbmV3IFBhcmFtZXRlcmxpc3QoW10pLCB2b2lkUHJpbWl0aXZlVHlwZSxcbiAgICAgICAgICAgIG51bGwsICAvLyBubyBpbXBsZW1lbnRhdGlvbiFcbiAgICAgICAgICAgIGZhbHNlLCBmYWxzZSwgXCJEaWVzZSBNZXRob2RlIHdpcmQgdm9tIFRha3RnZWJlciBhdWZnZXJ1ZmVuLlwiKSk7XG5cbiAgICAgICAgdGhpcy5hZGRNZXRob2QobmV3IE1ldGhvZChcIlRhc3RlXCIsIG5ldyBQYXJhbWV0ZXJsaXN0KFtcbiAgICAgICAgICAgIHsgaWRlbnRpZmllcjogXCJ0YXN0ZVwiLCB0eXBlOiBjaGFyUHJpbWl0aXZlVHlwZSwgZGVjbGFyYXRpb246IG51bGwsIHVzYWdlUG9zaXRpb25zOiBudWxsLCBpc0ZpbmFsOiB0cnVlIH1cbiAgICAgICAgXSksIHZvaWRQcmltaXRpdmVUeXBlLFxuICAgICAgICAgICAgbnVsbCwgIC8vIG5vIGltcGxlbWVudGF0aW9uIVxuICAgICAgICAgICAgZmFsc2UsIGZhbHNlLCBcIldpcmQgYXVmZ2VydWZlbiwgd2VubiBlaW5lIFRhc3RlIGdlZHLDvGNrdCB3aXJkLlwiKSk7XG5cbiAgICAgICAgdGhpcy5hZGRNZXRob2QobmV3IE1ldGhvZChcIlNvbmRlclRhc3RlXCIsIG5ldyBQYXJhbWV0ZXJsaXN0KFtcbiAgICAgICAgICAgIHsgaWRlbnRpZmllcjogXCJ0YXN0ZVwiLCB0eXBlOiBpbnRQcmltaXRpdmVUeXBlLCBkZWNsYXJhdGlvbjogbnVsbCwgdXNhZ2VQb3NpdGlvbnM6IG51bGwsIGlzRmluYWw6IHRydWUgfVxuICAgICAgICBdKSwgdm9pZFByaW1pdGl2ZVR5cGUsXG4gICAgICAgICAgICBudWxsLCAgLy8gbm8gaW1wbGVtZW50YXRpb24hXG4gICAgICAgICAgICBmYWxzZSwgZmFsc2UsIFwiV2lyZCBhdWZnZXJ1ZmVuLCB3ZW5uIGVpbmUgU29uZGVydGFzdGUgZ2VkcsO8Y2t0IHdpcmQuXCIpKTtcblxuICAgICAgICB0aGlzLmFkZE1ldGhvZChuZXcgTWV0aG9kKFwiR2VrbGlja3RcIiwgbmV3IFBhcmFtZXRlcmxpc3QoW1xuICAgICAgICAgICAgeyBpZGVudGlmaWVyOiBcInhcIiwgdHlwZTogaW50UHJpbWl0aXZlVHlwZSwgZGVjbGFyYXRpb246IG51bGwsIHVzYWdlUG9zaXRpb25zOiBudWxsLCBpc0ZpbmFsOiB0cnVlIH0sXG4gICAgICAgICAgICB7IGlkZW50aWZpZXI6IFwieVwiLCB0eXBlOiBpbnRQcmltaXRpdmVUeXBlLCBkZWNsYXJhdGlvbjogbnVsbCwgdXNhZ2VQb3NpdGlvbnM6IG51bGwsIGlzRmluYWw6IHRydWUgfSxcbiAgICAgICAgICAgIHsgaWRlbnRpZmllcjogXCJhbnphaGxcIiwgdHlwZTogaW50UHJpbWl0aXZlVHlwZSwgZGVjbGFyYXRpb246IG51bGwsIHVzYWdlUG9zaXRpb25zOiBudWxsLCBpc0ZpbmFsOiB0cnVlIH0sXG4gICAgICAgIF0pLCB2b2lkUHJpbWl0aXZlVHlwZSxcbiAgICAgICAgICAgIG51bGwsICAvLyBubyBpbXBsZW1lbnRhdGlvbiFcbiAgICAgICAgICAgIGZhbHNlLCBmYWxzZSwgXCJXaXJkIGF1ZmdlcnVmZW4sIHdlbm4gZWluZSBkaWUgbGlua2UgTWF1c3Rhc3RlIGdlZHLDvGNrdCB3aXJkLlwiKSk7XG5cblxuICAgIH1cblxufVxuXG4iXX0=