import { Klass } from "../../compiler/types/Class.js";
import { intPrimitiveType, stringPrimitiveType } from "../../compiler/types/PrimitiveTypes.js";
import { Method, Parameterlist } from "../../compiler/types/Types.js";
import { GNGFarben } from "./GNGFarben.js";
export class GNGBaseFigurClass extends Klass {
    constructor(module, moduleStore) {
        super("GNGBaseFigur", module, "Oberklasse der graphischen Elemente in der Graphics'n Games-Bibliothek (Cornelsen-Verlag)");
        // this.setBaseClass(<Klass>module.typeStore.getType("FilledShape"));
        // this.addAttribute(new Attribute("PI", doublePrimitiveType, (object) => { return Math.PI }, true, Visibility.public, true, "Die Kreiszahl Pi (3.1415...)"));
        this.addMethod(new Method("PositionSetzen", new Parameterlist([
            { identifier: "x", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
            { identifier: "y", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }
        ]), null, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            let x = parameters[1].value;
            let y = parameters[2].value;
            if (sh.testdestroyed("PositionSetzen"))
                return;
            sh.move(x - sh.getCenterX(), y - sh.getCenterY());
        }, false, false, "Verschiebt das Rechteck so, dass seine linke obere Ecke bei (x,y) zu liegen kommt.", false));
        this.addMethod(new Method("Verschieben", new Parameterlist([
            { identifier: "deltaX", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
            { identifier: "deltaY", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }
        ]), null, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            let x = parameters[1].value;
            let y = parameters[2].value;
            if (sh.testdestroyed("Verschieben"))
                return;
            sh.move(x, y);
        }, false, false, "Verschiebt die Figur um (x, y)", false));
        this.addMethod(new Method("Drehen", new Parameterlist([
            { identifier: "grad", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }
        ]), null, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            let grad = parameters[1].value;
            if (sh.testdestroyed("Drehen"))
                return;
            sh.rotate(grad);
        }, false, false, "Dreht die Figur um den angegebenen Winkel. Drehpunkt ist der Diagonalenschnittpunkt der kleinsten achsenparallelen Bounding Box um die Figur.", false));
        this.addMethod(new Method("FarbeSetzen", new Parameterlist([
            { identifier: "farbe", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
        ]), null, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            let farbe = parameters[1].value;
            let color = GNGFarben[farbe.toLocaleLowerCase()];
            if (color == null)
                color = 0x000000; // default: schwarz
            if (sh.testdestroyed("FarbeSetzen"))
                return;
            sh.setFillColor(color);
            sh.render();
        }, false, false, "Setzt die Farbe der Figur.", false));
        this.addMethod(new Method("WinkelSetzen", new Parameterlist([
            { identifier: "winkel", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
        ]), null, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            let winkel = parameters[1].value;
            if (sh.testdestroyed("WinkelSetzen"))
                return;
            sh.rotate(winkel - sh.angle);
        }, false, false, "Setzt den Drehwinkel der Figur. Der Winkel wird in Grad angegebenen, positive Werte bedeuten eine Drehung gegen den Uhrzeigersinn.", false));
        this.addMethod(new Method("SichtbarkeitSetzen", new Parameterlist([
            { identifier: "sichtbarkeit", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
        ]), null, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            let sichtbarkeit = parameters[1].value;
            if (sh.testdestroyed("SichtbarkeitSetzen"))
                return;
            sh.setVisible(sichtbarkeit);
        }, false, false, "Schaltet die Sichtbarkeit der Figur ein oder aus.", false));
        this.addMethod(new Method("Entfernen", new Parameterlist([]), null, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            if (sh.testdestroyed("Entfernen"))
                return;
            sh.destroy();
        }, false, false, "Schaltet die Sichtbarkeit der Figur ein oder aus.", false));
        this.addMethod(new Method("GanzNachVornBringen", new Parameterlist([]), null, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            if (sh.testdestroyed("GanzNachVornBringen"))
                return;
            return sh.bringToFront();
        }, false, false, 'Setzt das Grafikobjekt vor alle anderen.', false));
        this.addMethod(new Method("GanzNachHintenBringen", new Parameterlist([]), null, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            if (sh.testdestroyed("GanzNachHintenBringen"))
                return;
            return sh.sendToBack();
        }, false, false, 'Setzt das Grafikobjekt hinter alle anderen.', false));
        this.addMethod(new Method("NachVornBringen", new Parameterlist([]), null, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            if (sh.testdestroyed("NachVornBringen"))
                return;
            return sh.bringOnePlaneFurtherToFront();
        }, false, false, 'Setzt das Grafikobjekt eine Ebene nach vorne.', false));
        this.addMethod(new Method("NachHintenBringen", new Parameterlist([]), null, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            if (sh.testdestroyed("NachHintenBringen"))
                return;
            return sh.bringOnePlaneFurtherToBack();
        }, false, false, 'Setzt das Grafikobjekt eine Ebene nach hinten.', false));
    }
}
//# sourceMappingURL=data:application/json;base64,