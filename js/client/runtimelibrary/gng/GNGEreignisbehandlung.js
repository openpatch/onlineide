import { Klass } from "../../compiler/types/Class.js";
import { charPrimitiveType, intPrimitiveType, voidPrimitiveType } from "../../compiler/types/PrimitiveTypes.js";
import { Method, Parameterlist } from "../../compiler/types/Types.js";
export class GNGEreignisbehandlung extends Klass {
    constructor(module, moduleStore) {
        super("Ereignisbehandlung", module, "Zugriff auf Ereignisse einschließlich Taktgeber (Graphics'n Games-Bibliothek (Cornelsen-Verlag))");
        this.moduleStore = moduleStore;
        this.addMethod(new Method("Ereignisbehandlung", new Parameterlist([]), null, (parameters) => {
            let o = parameters[0].value;
            let helper = GNGEreignisbehandlung.getHelper(module);
            helper.registerEvents(o);
        }, false, false, 'Instanziert ein neues Ereignisbehandlungs-Objekt.', true));
        // this.addMethod(new Method("GrößeSetzen", new Parameterlist([
        //     { identifier: "größe", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }
        // ]), null,
        //     (parameters) => {
        //         let o: RuntimeObject = parameters[0].value;
        //         let sh: GroupHelper = o.intrinsicData["Actor"];
        //         let groesse: number = parameters[1].value;
        //     }, false, false, "Setzt die Größe der Figur.", false));
        this.addMethod(new Method("Starten()", new Parameterlist([]), null, (parameters) => {
            GNGEreignisbehandlung.getHelper(module).startTimer();
        }, false, false, "Zeitgeber starten.", false));
        this.addMethod(new Method("Anhalten()", new Parameterlist([]), null, (parameters) => {
            GNGEreignisbehandlung.getHelper(module).stopTimer();
        }, false, false, "Zeitgeber anhalten.", false));
        this.addMethod(new Method("TaktdauerSetzen", new Parameterlist([
            { identifier: "dauer", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
        ]), voidPrimitiveType, (parameters) => {
            let dauer = parameters[1].value;
            GNGEreignisbehandlung.getHelper(module).taktdauer = dauer;
        }, false, true, 'Setzt die Taktdauer des Zeitgebers in Millisekunden', false));
        this.addMethod(new Method("TaktImpulsAusführen", new Parameterlist([]), voidPrimitiveType, null, // no implementation!
        false, false, "Diese Methode wird vom Taktgeber aufgerufen."));
        this.addMethod(new Method("TasteGedrückt", new Parameterlist([
            { identifier: "taste", type: charPrimitiveType, declaration: null, usagePositions: null, isFinal: true }
        ]), voidPrimitiveType, null, // no implementation!
        false, false, "Wird aufgerufen, wenn eine Taste gedrückt wird."));
        this.addMethod(new Method("SonderTasteGedrückt", new Parameterlist([
            { identifier: "taste", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }
        ]), voidPrimitiveType, null, // no implementation!
        false, false, "Wird aufgerufen, wenn eine Sondertaste gedrückt wird."));
        this.addMethod(new Method("MausGecklickt", new Parameterlist([
            { identifier: "x", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
            { identifier: "y", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
            { identifier: "anzahl", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
        ]), voidPrimitiveType, null, // no implementation!
        false, false, "Wird aufgerufen, wenn eine die linke Maustaste gedrückt wird."));
    }
    static getHelper(module) {
        let interpreter = module.main.getInterpreter();
        if (interpreter.gngEreignisbehandlungHelper == null) {
            interpreter.gngEreignisbehandlungHelper = new GNGEreignisbehandlungHelper(module);
            interpreter.gngEreignisbehandlungHelper.bindEvents();
        }
        return interpreter.gngEreignisbehandlungHelper;
    }
}
export class GNGEreignisbehandlungHelper {
    constructor(module) {
        this.module = module;
        this.aktionsempfaengerTypes = ["ausführen", "taste", "sondertaste", "geklickt"];
        this.methodSignatureList = ["TaktImpulsAusführen()", "AktionAusführen()", "MausGeklickt(int, int, int)", "TasteGedrückt(char)", "SonderTasteGedrückt(int)"];
        this.methodToAktionsempfaengerTypeMap = {
            "TaktImpulsAusführen()": "ausführen",
            "AktionAusführen()": "ausführen",
            "MausGeklickt(int, int, int)": "geklickt",
            "TasteGedrückt(char)": "taste",
            "SonderTasteGedrückt(int)": "sondertaste"
        };
        // see https://www.freecodecamp.org/news/javascript-keycode-list-keypress-event-key-codes/
        this.keyToKeyCodeMap = {
            "Enter": 13,
            "ArrowLeft": 37,
            "ArrowRight": 39,
            "ArrowUp": 38,
            "ArrowDown": 40
        };
        // For gng library (Cornelsen-Verlag):
        this.aktionsempfaengerMap = {};
        this.taktdauer = 300;
        this.remainingTime = 0;
        for (let type of this.aktionsempfaengerTypes) {
            this.aktionsempfaengerMap[type] = [];
        }
    }
    registerEvents(o) {
        let klass = o.class; // This might be a child class of Ereignisbehandlung!
        for (let ms of this.methodSignatureList) {
            let method = klass.getMethodBySignature(ms);
            let type = this.methodToAktionsempfaengerTypeMap[ms];
            if ((method === null || method === void 0 ? void 0 : method.program) != null || (method === null || method === void 0 ? void 0 : method.invoke) != null) {
                this.aktionsempfaengerMap[type].push({
                    type: type,
                    method: method,
                    runtimeObject: o
                });
            }
        }
    }
    unregisterEvents(o) {
        let klass = o.class; // This might be a child class of Ereignisbehandlung!
        for (let ms of this.methodSignatureList) {
            let type = this.methodToAktionsempfaengerTypeMap[ms];
            this.aktionsempfaengerMap[type] =
                this.aktionsempfaengerMap[type].filter(ae => ae.runtimeObject != o);
        }
    }
    bindEvents() {
        let interpreter = this.module.main.getInterpreter();
        this.onKeyDownMethod = (key) => {
            if (key.length == 1) {
                for (let ae of this.aktionsempfaengerMap["taste"]) {
                    this.invokeMethod(ae.method, ae.runtimeObject, [{ type: charPrimitiveType, value: key }]);
                }
            }
            else {
                let keyCode = this.keyToKeyCodeMap[key];
                if (keyCode != null) {
                    for (let ae of this.aktionsempfaengerMap["sondertaste"]) {
                        this.invokeMethod(ae.method, ae.runtimeObject, [{ type: charPrimitiveType, value: keyCode }]);
                    }
                }
            }
        };
        interpreter.keyboardTool.keyDownCallbacks.push(this.onKeyDownMethod);
        this.startTimer();
    }
    detachEvents() {
        let interpreter = this.module.main.getInterpreter();
        let index = interpreter.keyboardTool.keyDownCallbacks.indexOf(this.onKeyDownMethod);
        if (index >= 0)
            interpreter.keyboardTool.keyDownCallbacks.splice(index, 1);
        this.stopTimer();
    }
    invokeMethod(method, runtimeObject, parameters = [], callback) {
        let program = method.program;
        let invoke = method.invoke;
        parameters.unshift({ type: runtimeObject.class, value: runtimeObject });
        if (program != null) {
            this.module.main.getInterpreter().runTimer(method, parameters, callback, false);
        }
        else if (invoke != null) {
            invoke(parameters);
        }
    }
    stopTimer() {
        this.timerRunning = false;
    }
    startTimer() {
        if (!this.timerRunning) {
            this.timerRunning = true;
            this.processTimerEntries();
        }
    }
    processTimerEntries() {
        if (!this.timerRunning)
            return;
        let dt = 10;
        this.remainingTime += dt;
        if (this.remainingTime > this.taktdauer) {
            this.remainingTime -= this.taktdauer;
            let liste = this.aktionsempfaengerMap["ausführen"];
            for (let ae of liste) {
                this.invokeMethod(ae.method, ae.runtimeObject, []);
            }
        }
        let that = this;
        setTimeout(() => {
            that.processTimerEntries();
        }, dt);
    }
    handleMouseClickedEvent(x, y) {
        let parameters = [
            { type: intPrimitiveType, value: Math.round(x) },
            { type: intPrimitiveType, value: Math.round(y) }
        ];
        let liste = this.aktionsempfaengerMap["geklickt"];
        for (let ae of liste) {
            this.invokeMethod(ae.method, ae.runtimeObject, parameters);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR05HRXJlaWduaXNiZWhhbmRsdW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2NsaWVudC9ydW50aW1lbGlicmFyeS9nbmcvR05HRXJlaWduaXNiZWhhbmRsdW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUN0RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsZ0JBQWdCLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUNoSCxPQUFPLEVBQUUsTUFBTSxFQUFFLGFBQWEsRUFBUyxNQUFNLCtCQUErQixDQUFDO0FBWTdFLE1BQU0sT0FBTyxxQkFBc0IsU0FBUSxLQUFLO0lBRTVDLFlBQVksTUFBYyxFQUFVLFdBQXdCO1FBRXhELEtBQUssQ0FBQyxvQkFBb0IsRUFBRSxNQUFNLEVBQUUsa0dBQWtHLENBQUMsQ0FBQztRQUZ4RyxnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQUt4RCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksTUFBTSxDQUFDLG9CQUFvQixFQUFFLElBQUksYUFBYSxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFDdkUsQ0FBQyxVQUFVLEVBQUUsRUFBRTtZQUVYLElBQUksQ0FBQyxHQUFrQixVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1lBRTNDLElBQUksTUFBTSxHQUFHLHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUVyRCxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRTdCLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLG1EQUFtRCxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7UUFFakYsK0RBQStEO1FBQy9ELDhHQUE4RztRQUM5RyxZQUFZO1FBQ1osd0JBQXdCO1FBRXhCLHNEQUFzRDtRQUN0RCwwREFBMEQ7UUFDMUQscURBQXFE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RSxDQUFTO1FBQ3hDLElBQUksVUFBVSxHQUFZO1lBQ3RCLEVBQUUsSUFBSSxFQUFFLGdCQUFnQixFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ2hELEVBQUUsSUFBSSxFQUFFLGdCQUFnQixFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFO1NBQ25ELENBQUE7UUFFRCxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDbEQsS0FBSyxJQUFJLEVBQUUsSUFBSSxLQUFLLEVBQUU7WUFDbEIsSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxhQUFhLEVBQUUsVUFBVSxDQUFDLENBQUM7U0FFOUQ7SUFFTCxDQUFDO0NBR0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNb2R1bGUsIE1vZHVsZVN0b3JlIH0gZnJvbSBcIi4uLy4uL2NvbXBpbGVyL3BhcnNlci9Nb2R1bGUuanNcIjtcbmltcG9ydCB7IEtsYXNzIH0gZnJvbSBcIi4uLy4uL2NvbXBpbGVyL3R5cGVzL0NsYXNzLmpzXCI7XG5pbXBvcnQgeyBjaGFyUHJpbWl0aXZlVHlwZSwgaW50UHJpbWl0aXZlVHlwZSwgdm9pZFByaW1pdGl2ZVR5cGUgfSBmcm9tIFwiLi4vLi4vY29tcGlsZXIvdHlwZXMvUHJpbWl0aXZlVHlwZXMuanNcIjtcbmltcG9ydCB7IE1ldGhvZCwgUGFyYW1ldGVybGlzdCwgVmFsdWUgfSBmcm9tIFwiLi4vLi4vY29tcGlsZXIvdHlwZXMvVHlwZXMuanNcIjtcbmltcG9ydCB7IFJ1bnRpbWVPYmplY3QgfSBmcm9tIFwiLi4vLi4vaW50ZXJwcmV0ZXIvUnVudGltZU9iamVjdC5qc1wiO1xuXG5cbmV4cG9ydCB0eXBlIEdOR0FrdGlvbnNlbXBmYWVuZ2VyVHlwZSA9IFwiYXVzZsO8aHJlblwiIHwgXCJ0YXN0ZVwiIHwgXCJzb25kZXJ0YXN0ZVwiIHwgXCJnZWtsaWNrdFwiO1xuXG5leHBvcnQgdHlwZSBHTkdBa3Rpb25zZW1wZmFlbmdlckRhdGEgPSB7XG4gICAgdHlwZTogR05HQWt0aW9uc2VtcGZhZW5nZXJUeXBlLFxuICAgIG1ldGhvZDogTWV0aG9kLFxuICAgIHJ1bnRpbWVPYmplY3Q6IFJ1bnRpbWVPYmplY3Rcbn1cblxuZXhwb3J0IGNsYXNzIEdOR0VyZWlnbmlzYmVoYW5kbHVuZyBleHRlbmRzIEtsYXNzIHtcblxuICAgIGNvbnN0cnVjdG9yKG1vZHVsZTogTW9kdWxlLCBwcml2YXRlIG1vZHVsZVN0b3JlOiBNb2R1bGVTdG9yZSkge1xuXG4gICAgICAgIHN1cGVyKFwiRXJlaWduaXNiZWhhbmRsdW5nXCIsIG1vZHVsZSwgXCJadWdyaWZmIGF1ZiBFcmVpZ25pc3NlIGVpbnNjaGxpZcOfbGljaCBUYWt0Z2ViZXIgKEdyYXBoaWNzJ24gR2FtZXMtQmlibGlvdGhlayAoQ29ybmVsc2VuLVZlcmxhZykpXCIpO1xuXG5cbiAgICAgICAgdGhpcy5hZGRNZXRob2QobmV3IE1ldGhvZChcIkVyZWlnbmlzYmVoYW5kbHVuZ1wiLCBuZXcgUGFyYW1ldGVybGlzdChbXSksIG51bGwsXG4gICAgICAgICAgICAocGFyYW1ldGVycykgPT4ge1xuXG4gICAgICAgICAgICAgICAgbGV0IG86IFJ1bnRpbWVPYmplY3QgPSBwYXJhbWV0ZXJzWzBdLnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgbGV0IGhlbHBlciA9IEdOR0VyZWlnbmlzYmVoYW5kbHVuZy5nZXRIZWxwZXIobW9kdWxlKTtcblxuICAgICAgICAgICAgICAgIGhlbHBlci5yZWdpc3RlckV2ZW50cyhvKTtcblxuICAgICAgICAgICAgfSwgZmFsc2UsIGZhbHNlLCAnSW5zdGFuemllcnQgZWluIG5ldWVzIEVyZWlnbmlzYmVoYW5kbHVuZ3MtT2JqZWt0LicsIHRydWUpKTtcblxuICAgICAgICAvLyB0aGlzLmFkZE1ldGhvZChuZXcgTWV0aG9kKFwiR3LDtsOfZVNldHplblwiLCBuZXcgUGFyYW1ldGVybGlzdChbXG4gICAgICAgIC8vICAgICB7IGlkZW50aWZpZXI6IFwiZ3LDtsOfZVwiLCB0eXBlOiBpbnRQcmltaXRpdmVUeXBlLCBkZWNsYXJhdGlvbjogbnVsbCwgdXNhZ2VQb3NpdGlvbnM6IG51bGwsIGlzRmluYWw6IHRydWUgfVxuICAgICAgICAvLyBdKSwgbnVsbCxcbiAgICAgICAgLy8gICAgIChwYXJhbWV0ZXJzKSA9PiB7XG5cbiAgICAgICAgLy8gICAgICAgICBsZXQgbzogUnVudGltZU9iamVjdCA9IHBhcmFtZXRlcnNbMF0udmFsdWU7XG4gICAgICAgIC8vICAgICAgICAgbGV0IHNoOiBHcm91cEhlbHBlciA9IG8uaW50cmluc2ljRGF0YVtcIkFjdG9yXCJdO1xuICAgICAgICAvLyAgICAgICAgIGxldCBncm9lc3NlOiBudW1iZXIgPSBwYXJhbWV0ZXJzWzFdLnZhbHVlO1xuXG5cbiAgICAgICAgLy8gICAgIH0sIGZhbHNlLCBmYWxzZSwgXCJTZXR6dCBkaWUgR3LDtsOfZSBkZXIgRmlndXIuXCIsIGZhbHNlKSk7XG5cbiAgICAgICAgdGhpcy5hZGRNZXRob2QobmV3IE1ldGhvZChcIlN0YXJ0ZW4oKVwiLCBuZXcgUGFyYW1ldGVybGlzdChbXG4gICAgICAgIF0pLCBudWxsLFxuICAgICAgICAgICAgKHBhcmFtZXRlcnMpID0+IHtcbiAgICAgICAgICAgICAgICAgR05HRXJlaWduaXNiZWhhbmRsdW5nLmdldEhlbHBlcihtb2R1bGUpLnN0YXJ0VGltZXIoKTtcblxuICAgICAgICAgICAgfSwgZmFsc2UsIGZhbHNlLCBcIlplaXRnZWJlciBzdGFydGVuLlwiLCBmYWxzZSkpO1xuXG4gICAgICAgIHRoaXMuYWRkTWV0aG9kKG5ldyBNZXRob2QoXCJBbmhhbHRlbigpXCIsIG5ldyBQYXJhbWV0ZXJsaXN0KFtcbiAgICAgICAgXSksIG51bGwsXG4gICAgICAgICAgICAocGFyYW1ldGVycykgPT4ge1xuICAgICAgICAgICAgICAgIEdOR0VyZWlnbmlzYmVoYW5kbHVuZy5nZXRIZWxwZXIobW9kdWxlKS5zdG9wVGltZXIoKTtcblxuICAgICAgICAgICAgfSwgZmFsc2UsIGZhbHNlLCBcIlplaXRnZWJlciBhbmhhbHRlbi5cIiwgZmFsc2UpKTtcblxuICAgICAgICB0aGlzLmFkZE1ldGhvZChuZXcgTWV0aG9kKFwiVGFrdGRhdWVyU2V0emVuXCIsIG5ldyBQYXJhbWV0ZXJsaXN0KFtcbiAgICAgICAgICAgIHsgaWRlbnRpZmllcjogXCJkYXVlclwiLCB0eXBlOiBpbnRQcmltaXRpdmVUeXBlLCBkZWNsYXJhdGlvbjogbnVsbCwgdXNhZ2VQb3NpdGlvbnM6IG51bGwsIGlzRmluYWw6IHRydWUgfSxcbiAgICAgICAgXSksIHZvaWRQcmltaXRpdmVUeXBlLFxuICAgICAgICAgICAgKHBhcmFtZXRlcnMpID0+IHtcblxuICAgICAgICAgICAgICAgIGxldCBkYXVlcjogbnVtYmVyID0gcGFyYW1ldGVyc1sxXS52YWx1ZTtcbiAgICAgICAgICAgICAgICBHTkdFcmVpZ25pc2JlaGFuZGx1bmcuZ2V0SGVscGVyKG1vZHVsZSkudGFrdGRhdWVyID0gZGF1ZXI7XG5cbiAgICAgICAgICAgIH0sIGZhbHNlLCB0cnVlLCAnU2V0enQgZGllIFRha3RkYXVlciBkZXMgWmVpdGdlYmVycyBpbiBNaWxsaXNla3VuZGVuJywgZmFsc2UpKTtcblxuXG4gICAgICAgIHRoaXMuYWRkTWV0aG9kKG5ldyBNZXRob2QoXCJUYWt0SW1wdWxzQXVzZsO8aHJlblwiLCBuZXcgUGFyYW1ldGVybGlzdChbXSksIHZvaWRQcmltaXRpdmVUeXBlLFxuICAgICAgICAgICAgbnVsbCwgIC8vIG5vIGltcGxlbWVudGF0aW9uIVxuICAgICAgICAgICAgZmFsc2UsIGZhbHNlLCBcIkRpZXNlIE1ldGhvZGUgd2lyZCB2b20gVGFrdGdlYmVyIGF1ZmdlcnVmZW4uXCIpKTtcblxuICAgICAgICB0aGlzLmFkZE1ldGhvZChuZXcgTWV0aG9kKFwiVGFzdGVHZWRyw7xja3RcIiwgbmV3IFBhcmFtZXRlcmxpc3QoW1xuICAgICAgICAgICAgeyBpZGVudGlmaWVyOiBcInRhc3RlXCIsIHR5cGU6IGNoYXJQcmltaXRpdmVUeXBlLCBkZWNsYXJhdGlvbjogbnVsbCwgdXNhZ2VQb3NpdGlvbnM6IG51bGwsIGlzRmluYWw6IHRydWUgfVxuICAgICAgICBdKSwgdm9pZFByaW1pdGl2ZVR5cGUsXG4gICAgICAgICAgICBudWxsLCAgLy8gbm8gaW1wbGVtZW50YXRpb24hXG4gICAgICAgICAgICBmYWxzZSwgZmFsc2UsIFwiV2lyZCBhdWZnZXJ1ZmVuLCB3ZW5uIGVpbmUgVGFzdGUgZ2VkcsO8Y2t0IHdpcmQuXCIpKTtcblxuICAgICAgICB0aGlzLmFkZE1ldGhvZChuZXcgTWV0aG9kKFwiU29uZGVyVGFzdGVHZWRyw7xja3RcIiwgbmV3IFBhcmFtZXRlcmxpc3QoW1xuICAgICAgICAgICAgeyBpZGVudGlmaWVyOiBcInRhc3RlXCIsIHR5cGU6IGludFByaW1pdGl2ZVR5cGUsIGRlY2xhcmF0aW9uOiBudWxsLCB1c2FnZVBvc2l0aW9uczogbnVsbCwgaXNGaW5hbDogdHJ1ZSB9XG4gICAgICAgIF0pLCB2b2lkUHJpbWl0aXZlVHlwZSxcbiAgICAgICAgICAgIG51bGwsICAvLyBubyBpbXBsZW1lbnRhdGlvbiFcbiAgICAgICAgICAgIGZhbHNlLCBmYWxzZSwgXCJXaXJkIGF1ZmdlcnVmZW4sIHdlbm4gZWluZSBTb25kZXJ0YXN0ZSBnZWRyw7xja3Qgd2lyZC5cIikpO1xuXG4gICAgICAgIHRoaXMuYWRkTWV0aG9kKG5ldyBNZXRob2QoXCJNYXVzR2Vja2xpY2t0XCIsIG5ldyBQYXJhbWV0ZXJsaXN0KFtcbiAgICAgICAgICAgIHsgaWRlbnRpZmllcjogXCJ4XCIsIHR5cGU6IGludFByaW1pdGl2ZVR5cGUsIGRlY2xhcmF0aW9uOiBudWxsLCB1c2FnZVBvc2l0aW9uczogbnVsbCwgaXNGaW5hbDogdHJ1ZSB9LFxuICAgICAgICAgICAgeyBpZGVudGlmaWVyOiBcInlcIiwgdHlwZTogaW50UHJpbWl0aXZlVHlwZSwgZGVjbGFyYXRpb246IG51bGwsIHVzYWdlUG9zaXRpb25zOiBudWxsLCBpc0ZpbmFsOiB0cnVlIH0sXG4gICAgICAgICAgICB7IGlkZW50aWZpZXI6IFwiYW56YWhsXCIsIHR5cGU6IGludFByaW1pdGl2ZVR5cGUsIGRlY2xhcmF0aW9uOiBudWxsLCB1c2FnZVBvc2l0aW9uczogbnVsbCwgaXNGaW5hbDogdHJ1ZSB9LFxuICAgICAgICBdKSwgdm9pZFByaW1pdGl2ZVR5cGUsXG4gICAgICAgICAgICBudWxsLCAgLy8gbm8gaW1wbGVtZW50YXRpb24hXG4gICAgICAgICAgICBmYWxzZSwgZmFsc2UsIFwiV2lyZCBhdWZnZXJ1ZmVuLCB3ZW5uIGVpbmUgZGllIGxpbmtlIE1hdXN0YXN0ZSBnZWRyw7xja3Qgd2lyZC5cIikpO1xuXG4gICAgfVxuXG4gICAgc3RhdGljIGdldEhlbHBlcihtb2R1bGU6IE1vZHVsZSk6R05HRXJlaWduaXNiZWhhbmRsdW5nSGVscGVye1xuICAgICAgICBsZXQgaW50ZXJwcmV0ZXIgPSBtb2R1bGUubWFpbi5nZXRJbnRlcnByZXRlcigpO1xuICAgICAgICBpZiAoaW50ZXJwcmV0ZXIuZ25nRXJlaWduaXNiZWhhbmRsdW5nSGVscGVyID09IG51bGwpIHtcbiAgICAgICAgICAgIGludGVycHJldGVyLmduZ0VyZWlnbmlzYmVoYW5kbHVuZ0hlbHBlciA9IG5ldyBHTkdFcmVpZ25pc2JlaGFuZGx1bmdIZWxwZXIobW9kdWxlKTtcbiAgICAgICAgICAgIGludGVycHJldGVyLmduZ0VyZWlnbmlzYmVoYW5kbHVuZ0hlbHBlci5iaW5kRXZlbnRzKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gaW50ZXJwcmV0ZXIuZ25nRXJlaWduaXNiZWhhbmRsdW5nSGVscGVyO1xuXG4gICAgfVxuXG59XG5cblxuZXhwb3J0IGNsYXNzIEdOR0VyZWlnbmlzYmVoYW5kbHVuZ0hlbHBlciB7XG5cbiAgICBha3Rpb25zZW1wZmFlbmdlclR5cGVzOiBzdHJpbmdbXSA9IFtcImF1c2bDvGhyZW5cIiwgXCJ0YXN0ZVwiLCBcInNvbmRlcnRhc3RlXCIsIFwiZ2VrbGlja3RcIl07XG4gICAgbWV0aG9kU2lnbmF0dXJlTGlzdDogc3RyaW5nW10gPSBbXCJUYWt0SW1wdWxzQXVzZsO8aHJlbigpXCIsIFwiQWt0aW9uQXVzZsO8aHJlbigpXCIsIFwiTWF1c0dla2xpY2t0KGludCwgaW50LCBpbnQpXCIsIFwiVGFzdGVHZWRyw7xja3QoY2hhcilcIiwgXCJTb25kZXJUYXN0ZUdlZHLDvGNrdChpbnQpXCJdO1xuICAgIG1ldGhvZFRvQWt0aW9uc2VtcGZhZW5nZXJUeXBlTWFwOiB7IFtzaWduYXR1cmU6IHN0cmluZ106IHN0cmluZyB9ID0ge1xuICAgICAgICBcIlRha3RJbXB1bHNBdXNmw7xocmVuKClcIjogXCJhdXNmw7xocmVuXCIsXG4gICAgICAgIFwiQWt0aW9uQXVzZsO8aHJlbigpXCI6IFwiYXVzZsO8aHJlblwiLFxuICAgICAgICBcIk1hdXNHZWtsaWNrdChpbnQsIGludCwgaW50KVwiOiBcImdla2xpY2t0XCIsXG4gICAgICAgIFwiVGFzdGVHZWRyw7xja3QoY2hhcilcIjogXCJ0YXN0ZVwiLFxuICAgICAgICBcIlNvbmRlclRhc3RlR2VkcsO8Y2t0KGludClcIjogXCJzb25kZXJ0YXN0ZVwiXG4gICAgfTtcblxuICAgIC8vIHNlZSBodHRwczovL3d3dy5mcmVlY29kZWNhbXAub3JnL25ld3MvamF2YXNjcmlwdC1rZXljb2RlLWxpc3Qta2V5cHJlc3MtZXZlbnQta2V5LWNvZGVzL1xuICAgIGtleVRvS2V5Q29kZU1hcDogeyBba2V5OiBzdHJpbmddOiBudW1iZXIgfSA9IHtcbiAgICAgICAgXCJFbnRlclwiOiAxMyxcbiAgICAgICAgXCJBcnJvd0xlZnRcIjogMzcsXG4gICAgICAgIFwiQXJyb3dSaWdodFwiOiAzOSxcbiAgICAgICAgXCJBcnJvd1VwXCI6IDM4LFxuICAgICAgICBcIkFycm93RG93blwiOiA0MFxuICAgIH1cblxuICAgIC8vIEZvciBnbmcgbGlicmFyeSAoQ29ybmVsc2VuLVZlcmxhZyk6XG4gICAgYWt0aW9uc2VtcGZhZW5nZXJNYXA6IHsgW2FrdGlvbnNlbXBmYWVuZ2VyVHlwZTogc3RyaW5nXTogR05HQWt0aW9uc2VtcGZhZW5nZXJEYXRhW10gfSA9IHt9O1xuXG4gICAgdGltZXJSdW5uaW5nOiBib29sZWFuO1xuICAgIHRha3RkYXVlcjogbnVtYmVyID0gMzAwO1xuICAgIHJlbWFpbmluZ1RpbWU6IG51bWJlciA9IDA7XG5cbiAgICBvbktleURvd25NZXRob2Q6IChrZXk6IHN0cmluZykgPT4gdm9pZDtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgbW9kdWxlOk1vZHVsZSl7XG4gICAgICAgIGZvciAobGV0IHR5cGUgb2YgdGhpcy5ha3Rpb25zZW1wZmFlbmdlclR5cGVzKSB7XG4gICAgICAgICAgICB0aGlzLmFrdGlvbnNlbXBmYWVuZ2VyTWFwW3R5cGVdID0gW107XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHJlZ2lzdGVyRXZlbnRzKG86IFJ1bnRpbWVPYmplY3QpIHtcbiAgICAgICAgbGV0IGtsYXNzID0gPEtsYXNzPm8uY2xhc3M7ICAgLy8gVGhpcyBtaWdodCBiZSBhIGNoaWxkIGNsYXNzIG9mIEVyZWlnbmlzYmVoYW5kbHVuZyFcblxuICAgICAgICBmb3IgKGxldCBtcyBvZiB0aGlzLm1ldGhvZFNpZ25hdHVyZUxpc3QpIHtcbiAgICAgICAgICAgIGxldCBtZXRob2Q6IE1ldGhvZCA9IGtsYXNzLmdldE1ldGhvZEJ5U2lnbmF0dXJlKG1zKTtcbiAgICAgICAgICAgIGxldCB0eXBlID0gdGhpcy5tZXRob2RUb0FrdGlvbnNlbXBmYWVuZ2VyVHlwZU1hcFttc107XG5cbiAgICAgICAgICAgIGlmIChtZXRob2Q/LnByb2dyYW0gIT0gbnVsbCB8fCBtZXRob2Q/Lmludm9rZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ha3Rpb25zZW1wZmFlbmdlck1hcFt0eXBlXS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogPEdOR0FrdGlvbnNlbXBmYWVuZ2VyVHlwZT50eXBlLFxuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgICAgICAgICAgICAgICAgcnVudGltZU9iamVjdDogb1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICB1bnJlZ2lzdGVyRXZlbnRzKG86IFJ1bnRpbWVPYmplY3QpIHtcbiAgICAgICAgbGV0IGtsYXNzID0gPEtsYXNzPm8uY2xhc3M7ICAgLy8gVGhpcyBtaWdodCBiZSBhIGNoaWxkIGNsYXNzIG9mIEVyZWlnbmlzYmVoYW5kbHVuZyFcblxuICAgICAgICBmb3IgKGxldCBtcyBvZiB0aGlzLm1ldGhvZFNpZ25hdHVyZUxpc3QpIHtcbiAgICAgICAgICAgIGxldCB0eXBlID0gdGhpcy5tZXRob2RUb0FrdGlvbnNlbXBmYWVuZ2VyVHlwZU1hcFttc107XG5cbiAgICAgICAgICAgIHRoaXMuYWt0aW9uc2VtcGZhZW5nZXJNYXBbdHlwZV0gPVxuICAgICAgICAgICAgICAgIHRoaXMuYWt0aW9uc2VtcGZhZW5nZXJNYXBbdHlwZV0uZmlsdGVyKGFlID0+IGFlLnJ1bnRpbWVPYmplY3QgIT0gbyk7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIGJpbmRFdmVudHMoKSB7XG4gICAgICAgIGxldCBpbnRlcnByZXRlciA9IHRoaXMubW9kdWxlLm1haW4uZ2V0SW50ZXJwcmV0ZXIoKTtcblxuICAgICAgICB0aGlzLm9uS2V5RG93bk1ldGhvZCA9IChrZXk6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgaWYgKGtleS5sZW5ndGggPT0gMSkge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGFlIG9mIHRoaXMuYWt0aW9uc2VtcGZhZW5nZXJNYXBbXCJ0YXN0ZVwiXSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmludm9rZU1ldGhvZChhZS5tZXRob2QsIGFlLnJ1bnRpbWVPYmplY3QsIFt7IHR5cGU6IGNoYXJQcmltaXRpdmVUeXBlLCB2YWx1ZToga2V5IH1dKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCBrZXlDb2RlID0gdGhpcy5rZXlUb0tleUNvZGVNYXBba2V5XTtcbiAgICAgICAgICAgICAgICBpZiAoa2V5Q29kZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGFlIG9mIHRoaXMuYWt0aW9uc2VtcGZhZW5nZXJNYXBbXCJzb25kZXJ0YXN0ZVwiXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnZva2VNZXRob2QoYWUubWV0aG9kLCBhZS5ydW50aW1lT2JqZWN0LCBbeyB0eXBlOiBjaGFyUHJpbWl0aXZlVHlwZSwgdmFsdWU6IGtleUNvZGUgfV0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH07XG5cbiAgICAgICAgaW50ZXJwcmV0ZXIua2V5Ym9hcmRUb29sLmtleURvd25DYWxsYmFja3MucHVzaCh0aGlzLm9uS2V5RG93bk1ldGhvZCk7XG5cbiAgICAgICAgdGhpcy5zdGFydFRpbWVyKCk7XG5cbiAgICB9XG5cbiAgICBkZXRhY2hFdmVudHMoKSB7XG4gICAgICAgIGxldCBpbnRlcnByZXRlciA9IHRoaXMubW9kdWxlLm1haW4uZ2V0SW50ZXJwcmV0ZXIoKTtcbiAgICAgICAgbGV0IGluZGV4ID0gaW50ZXJwcmV0ZXIua2V5Ym9hcmRUb29sLmtleURvd25DYWxsYmFja3MuaW5kZXhPZih0aGlzLm9uS2V5RG93bk1ldGhvZCk7XG4gICAgICAgIGlmIChpbmRleCA+PSAwKSBpbnRlcnByZXRlci5rZXlib2FyZFRvb2wua2V5RG93bkNhbGxiYWNrcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB0aGlzLnN0b3BUaW1lcigpO1xuICAgIH1cblxuXG4gICAgaW52b2tlTWV0aG9kKG1ldGhvZDogTWV0aG9kLCBydW50aW1lT2JqZWN0OiBSdW50aW1lT2JqZWN0LCBwYXJhbWV0ZXJzOiBWYWx1ZVtdID0gW10sIGNhbGxiYWNrPzogKCkgPT4gdm9pZCkge1xuICAgICAgICBsZXQgcHJvZ3JhbSA9IG1ldGhvZC5wcm9ncmFtO1xuICAgICAgICBsZXQgaW52b2tlID0gbWV0aG9kLmludm9rZTtcblxuICAgICAgICBwYXJhbWV0ZXJzLnVuc2hpZnQoeyB0eXBlOiBydW50aW1lT2JqZWN0LmNsYXNzLCB2YWx1ZTogcnVudGltZU9iamVjdCB9KTtcblxuICAgICAgICBpZiAocHJvZ3JhbSAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLm1vZHVsZS5tYWluLmdldEludGVycHJldGVyKCkucnVuVGltZXIobWV0aG9kLCBwYXJhbWV0ZXJzLCBjYWxsYmFjaywgZmFsc2UpO1xuICAgICAgICB9IGVsc2UgaWYgKGludm9rZSAhPSBudWxsKSB7XG4gICAgICAgICAgICBpbnZva2UocGFyYW1ldGVycyk7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHN0b3BUaW1lcigpIHtcbiAgICAgICAgdGhpcy50aW1lclJ1bm5pbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBzdGFydFRpbWVyKCkge1xuXG4gICAgICAgIGlmICghdGhpcy50aW1lclJ1bm5pbmcpIHtcbiAgICAgICAgICAgIHRoaXMudGltZXJSdW5uaW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMucHJvY2Vzc1RpbWVyRW50cmllcygpO1xuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBwcm9jZXNzVGltZXJFbnRyaWVzKCkge1xuXG4gICAgICAgIGlmICghdGhpcy50aW1lclJ1bm5pbmcpIHJldHVybjtcblxuICAgICAgICBsZXQgZHQgPSAxMDtcblxuICAgICAgICB0aGlzLnJlbWFpbmluZ1RpbWUgKz0gZHQ7XG4gICAgICAgIGlmICh0aGlzLnJlbWFpbmluZ1RpbWUgPiB0aGlzLnRha3RkYXVlcikge1xuICAgICAgICAgICAgdGhpcy5yZW1haW5pbmdUaW1lIC09IHRoaXMudGFrdGRhdWVyO1xuXG4gICAgICAgICAgICBsZXQgbGlzdGUgPSB0aGlzLmFrdGlvbnNlbXBmYWVuZ2VyTWFwW1wiYXVzZsO8aHJlblwiXTtcbiAgICAgICAgICAgIGZvciAobGV0IGFlIG9mIGxpc3RlKSB7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmludm9rZU1ldGhvZChhZS5tZXRob2QsIGFlLnJ1bnRpbWVPYmplY3QsIFtdKTtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgIH1cblxuICAgICAgICBsZXQgdGhhdCA9IHRoaXM7XG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGhhdC5wcm9jZXNzVGltZXJFbnRyaWVzKCk7XG4gICAgICAgIH0sIGR0KTtcblxuICAgIH1cblxuICAgIGhhbmRsZU1vdXNlQ2xpY2tlZEV2ZW50KHg6IG51bWJlciwgeTogbnVtYmVyKSB7XG4gICAgICAgIGxldCBwYXJhbWV0ZXJzOiBWYWx1ZVtdID0gW1xuICAgICAgICAgICAgeyB0eXBlOiBpbnRQcmltaXRpdmVUeXBlLCB2YWx1ZTogTWF0aC5yb3VuZCh4KSB9LFxuICAgICAgICAgICAgeyB0eXBlOiBpbnRQcmltaXRpdmVUeXBlLCB2YWx1ZTogTWF0aC5yb3VuZCh5KSB9XG4gICAgICAgIF1cblxuICAgICAgICBsZXQgbGlzdGUgPSB0aGlzLmFrdGlvbnNlbXBmYWVuZ2VyTWFwW1wiZ2VrbGlja3RcIl07XG4gICAgICAgIGZvciAobGV0IGFlIG9mIGxpc3RlKSB7XG4gICAgICAgICAgICB0aGlzLmludm9rZU1ldGhvZChhZS5tZXRob2QsIGFlLnJ1bnRpbWVPYmplY3QsIHBhcmFtZXRlcnMpO1xuXG4gICAgICAgIH1cblxuICAgIH1cblxuXG59XG5cbiJdfQ==