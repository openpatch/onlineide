import { Klass } from "../../compiler/types/Class.js";
import { doublePrimitiveType, booleanPrimitiveType } from "../../compiler/types/PrimitiveTypes.js";
import { Method, Parameterlist } from "../../compiler/types/Types.js";
import { RuntimeObject } from "../../interpreter/RuntimeObject.js";
import { FilledShapeHelper } from "./FilledShape.js";
import { ArrayType } from "../../compiler/types/Array.js";
export class PolygonClass extends Klass {
    constructor(module) {
        super("Polygon", module, "Wahlweise geschlossenes Polygon (mit Füllung und Rand) oder offener Streckenzug");
        this.setBaseClass(module.typeStore.getType("FilledShape"));
        // this.addAttribute(new Attribute("PI", doublePrimitiveType, (object) => { return Math.PI }, true, Visibility.public, true, "Die Kreiszahl Pi (3.1415...)"));
        this.addMethod(new Method("Polygon", new Parameterlist([
            { identifier: "closeAndFill", type: booleanPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
            { identifier: "points", type: new ArrayType(doublePrimitiveType), declaration: null, usagePositions: null, isFinal: true },
        ]), null, (parameters) => {
            let o = parameters[0].value;
            let closeAndFill = parameters[1].value;
            let points = parameters[2].value;
            let pointsNumber = [];
            points.forEach(v => pointsNumber.push(v.value));
            let ph = new PolygonHelper(pointsNumber, closeAndFill, module.main.getInterpreter(), o);
            o.intrinsicData["Actor"] = ph;
        }, false, false, 'Instanziert ein neues Polygon. Die Punkte werden als Array von double-Werten der Form {x1, y1, x2, y2, ...} übergeben.', true));
        this.addMethod(new Method("Polygon", new Parameterlist([
            { identifier: "closeAndFill", type: booleanPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
            { identifier: "points", type: new ArrayType(doublePrimitiveType), declaration: null, usagePositions: null, isFinal: true, isEllipsis: true },
        ]), null, (parameters) => {
            let o = parameters[0].value;
            let closeAndFill = parameters[1].value;
            let points = parameters[2].value;
            let pointsNumber = [];
            points.forEach(v => pointsNumber.push(v.value));
            let ph = new PolygonHelper(pointsNumber, closeAndFill, module.main.getInterpreter(), o);
            o.intrinsicData["Actor"] = ph;
        }, false, false, 'Instanziert ein neues Polygon. Die Punkte werden als double-Werte der Form x1, y1, x2, y2, ... übergeben.', true));
        this.addMethod(new Method("Polygon", new Parameterlist([
            { identifier: "closeAndFill", type: booleanPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
        ]), null, (parameters) => {
            let o = parameters[0].value;
            let closeAndFill = parameters[1].value;
            let pointsNumber = [];
            let ph = new PolygonHelper(pointsNumber, closeAndFill, module.main.getInterpreter(), o);
            o.intrinsicData["Actor"] = ph;
        }, false, false, 'Instanziert ein neues Polygon ohne Punkte.', true));
        this.addMethod(new Method("addPoint", new Parameterlist([
            { identifier: "x", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },
            { identifier: "y", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },
        ]), null, (parameters) => {
            let o = parameters[0].value;
            let x = parameters[1].value;
            let y = parameters[2].value;
            let sh = o.intrinsicData["Actor"];
            if (sh.testdestroyed("addPoint"))
                return;
            sh.addPoint(x, y);
        }, false, false, 'Fügt dem Polygon einen Punkt hinzu."', false));
        this.addMethod(new Method("addPoints", new Parameterlist([
            { identifier: "points", type: new ArrayType(doublePrimitiveType), declaration: null, usagePositions: null, isFinal: true },
        ]), null, (parameters) => {
            let o = parameters[0].value;
            let points = parameters[1].value;
            let sh = o.intrinsicData["Actor"];
            if (sh.testdestroyed("addPoints"))
                return;
            let p;
            for (let i = 0; i < points.length - 1; i += 2) {
                sh.addPoint(points[i].value, points[i + 1].value, i >= points.length - 2);
            }
        }, false, false, 'Fügt dem Polygon mehrere Punkte hinzu. Diese werden in einem double[] übergeben, das abwechselnd die x- und y-Koordinaten enthält."', false));
        this.addMethod(new Method("copy", new Parameterlist([]), this, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            if (sh.testdestroyed("copy"))
                return;
            return sh.getCopy(o.class);
        }, false, false, 'Erstellt eine Kopie des Polygon-Objekts und git sie zurück.', false));
    }
}
export class PolygonHelper extends FilledShapeHelper {
    constructor(points, closeAndFill, interpreter, runtimeObject) {
        super(interpreter, runtimeObject);
        this.closeAndFill = closeAndFill;
        let xSum = 0;
        let ySum = 0;
        this.hitPolygonInitial = [];
        for (let i = 0; i < points.length;) {
            let x = points[i++];
            let y = points[i++];
            xSum += x;
            ySum += y;
            this.hitPolygonInitial.push({ x: x, y: y });
        }
        if (points.length > 1) {
            this.centerXInitial = xSum / this.hitPolygonInitial.length;
            this.centerYInitial = ySum / this.hitPolygonInitial.length;
        }
        if (!closeAndFill) {
            this.borderColor = 0x0000ff;
        }
        this.render();
        this.addToDefaultGroup();
    }
    getCopy(klass) {
        let ro = new RuntimeObject(klass);
        let rh = new PolygonHelper([], this.closeAndFill, this.worldHelper.interpreter, ro);
        ro.intrinsicData["Actor"] = rh;
        rh.copyFrom(this);
        rh.render();
        return ro;
    }
    render() {
        let g = this.displayObject;
        if (this.displayObject == null) {
            g = new PIXI.Graphics();
            this.displayObject = g;
            this.worldHelper.stage.addChild(g);
        }
        else {
            g.clear();
        }
        if (this.fillColor != null && this.closeAndFill) {
            g.beginFill(this.fillColor, this.fillAlpha);
        }
        if (this.borderColor != null) {
            g.lineStyle(this.borderWidth, this.borderColor, this.borderAlpha, 0.5);
        }
        if (this.hitPolygonInitial.length > 0) {
            g.moveTo(this.hitPolygonInitial[0].x, this.hitPolygonInitial[0].y);
            for (let i = 1; i < this.hitPolygonInitial.length; i++) {
                g.lineTo(this.hitPolygonInitial[i].x, this.hitPolygonInitial[i].y);
            }
        }
        if (this.closeAndFill) {
            g.closePath();
        }
        if (this.fillColor != null && this.closeAndFill) {
            g.endFill();
        }
    }
    ;
    addPoint(x, y, render = true) {
        let p = new PIXI.Point(x, y);
        this.displayObject.transform.worldTransform.applyInverse(p, p);
        this.hitPolygonInitial.push({ x: p.x, y: p.y });
        this.hitPolygonDirty = true;
        if (render)
            this.render();
    }
    setPoint(x, y, index) {
        if (index == 0 || index == 1) {
            this.hitPolygonInitial[index] = { x: x, y: y };
            this.hitPolygonDirty = true;
            this.render();
        }
    }
    setPoints(x1, y1, x2, y2) {
        this.hitPolygonInitial = [{ x: x1, y: y1 }, { x: x2, y: y2 }];
        this.hitPolygonDirty = true;
        this.render();
    }
}
//# sourceMappingURL=data:application/json;base64,