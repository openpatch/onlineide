import { Method, Parameterlist, Attribute } from "../../compiler/types/Types.js";
import { Klass, Visibility } from "../../compiler/types/Class.js";
import { stringPrimitiveType } from "../../compiler/types/PrimitiveTypes.js";
import { RuntimeObject } from "../../interpreter/RuntimeObject.js";
import { SoundTools } from "../../tools/SoundTools.js";
export class SoundKlass extends Klass {
    constructor(module) {
        super("Sound", module, "Aufzählung aller Geräusche");
        this.setBaseClass(module.typeStore.getType("Object"));
        for (let sound of SoundTools.sounds) {
            this.addAttribute(new Attribute(sound.name, stringPrimitiveType, (value) => { value.value = sound.name; }, true, Visibility.public, true, sound.description));
        }
        this.staticClass.setupAttributeIndicesRecursive();
        this.staticClass.classObject = new RuntimeObject(this.staticClass);
        this.addMethod(new Method("playSound", new Parameterlist([
            { identifier: "sound", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true }
        ]), null, (parameters) => {
            let sound = parameters[1].value;
            SoundTools.play(sound);
        }, false, true, "Spielt einen Sound ab. Die Möglichen Sounds sind als statische Variablen der Klasse Sound hinterlegt. Tippe als Parameter also Sound gefolgt von einem Punkt ein, um eine Auswahl zu sehen!"));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU291bmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvY2xpZW50L3J1bnRpbWVsaWJyYXJ5L2dyYXBoaWNzL1NvdW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBUSxNQUFNLEVBQUUsYUFBYSxFQUFTLFNBQVMsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQzlGLE9BQU8sRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDbEUsT0FBTyxFQUFFLG1CQUFtQixFQUE2RCxNQUFNLHdDQUF3QyxDQUFDO0FBR3hJLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUNuRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFFdkQsTUFBTSxPQUFPLFVBQVcsU0FBUSxLQUFLO0lBRWpDLFlBQVksTUFBYztRQUN0QixLQUFLLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSw0QkFBNEIsQ0FBQyxDQUFDO1FBRXJELElBQUksQ0FBQyxZQUFZLENBQVEsTUFBTSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUU3RCxLQUFJLElBQUksS0FBSyxJQUFJLFVBQVUsQ0FBQyxNQUFNLEVBQUM7WUFDL0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLG1CQUFtQixFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUUsR0FBRyxLQUFLLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUEsQ0FBQyxDQUFDLEVBQUUsSUFBSSxFQUFFLFVBQVUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1NBQ2hLO1FBRUQsSUFBSSxDQUFDLFdBQVcsQ0FBQyw4QkFBOEIsRUFBRSxDQUFDO1FBRWxELElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxHQUFHLElBQUksYUFBYSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUVuRSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksTUFBTSxDQUFDLFdBQVcsRUFBRSxJQUFJLGFBQWEsQ0FBQztZQUNyRCxFQUFFLFVBQVUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLG1CQUFtQixFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsY0FBYyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFO1NBQzdHLENBQUMsRUFBRSxJQUFJLEVBQ1IsQ0FBQyxVQUFVLEVBQUUsRUFBRTtZQUNYLElBQUksS0FBSyxHQUFXLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7WUFDeEMsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMzQixDQUFDLEVBQ0MsS0FBSyxFQUFFLElBQUksRUFBRSw2TEFBNkwsQ0FBQyxDQUFDLENBQUM7SUFHbk4sQ0FBQztDQUVKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVHlwZSwgTWV0aG9kLCBQYXJhbWV0ZXJsaXN0LCBWYWx1ZSwgQXR0cmlidXRlIH0gZnJvbSBcIi4uLy4uL2NvbXBpbGVyL3R5cGVzL1R5cGVzLmpzXCI7XHJcbmltcG9ydCB7IEtsYXNzLCBWaXNpYmlsaXR5IH0gZnJvbSBcIi4uLy4uL2NvbXBpbGVyL3R5cGVzL0NsYXNzLmpzXCI7XHJcbmltcG9ydCB7IHN0cmluZ1ByaW1pdGl2ZVR5cGUsIGRvdWJsZVByaW1pdGl2ZVR5cGUsIGZsb2F0UHJpbWl0aXZlVHlwZSwgaW50UHJpbWl0aXZlVHlwZSB9IGZyb20gXCIuLi8uLi9jb21waWxlci90eXBlcy9QcmltaXRpdmVUeXBlcy5qc1wiO1xyXG5pbXBvcnQgeyBNb2R1bGUgfSBmcm9tIFwiLi4vLi4vY29tcGlsZXIvcGFyc2VyL01vZHVsZS5qc1wiO1xyXG5pbXBvcnQgeyBQcmludE1hbmFnZXIgfSBmcm9tIFwiLi4vLi4vbWFpbi9ndWkvUHJpbnRNYW5hZ2VyLmpzXCI7XHJcbmltcG9ydCB7IFJ1bnRpbWVPYmplY3QgfSBmcm9tIFwiLi4vLi4vaW50ZXJwcmV0ZXIvUnVudGltZU9iamVjdC5qc1wiO1xyXG5pbXBvcnQgeyBTb3VuZFRvb2xzIH0gZnJvbSBcIi4uLy4uL3Rvb2xzL1NvdW5kVG9vbHMuanNcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBTb3VuZEtsYXNzIGV4dGVuZHMgS2xhc3Mge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG1vZHVsZTogTW9kdWxlKSB7XHJcbiAgICAgICAgc3VwZXIoXCJTb3VuZFwiLCBtb2R1bGUsIFwiQXVmesOkaGx1bmcgYWxsZXIgR2Vyw6R1c2NoZVwiKTtcclxuXHJcbiAgICAgICAgdGhpcy5zZXRCYXNlQ2xhc3MoPEtsYXNzPm1vZHVsZS50eXBlU3RvcmUuZ2V0VHlwZShcIk9iamVjdFwiKSk7XHJcblxyXG4gICAgICAgIGZvcihsZXQgc291bmQgb2YgU291bmRUb29scy5zb3VuZHMpe1xyXG4gICAgICAgICAgICB0aGlzLmFkZEF0dHJpYnV0ZShuZXcgQXR0cmlidXRlKHNvdW5kLm5hbWUsIHN0cmluZ1ByaW1pdGl2ZVR5cGUsICh2YWx1ZSkgPT4geyB2YWx1ZS52YWx1ZSA9IHNvdW5kLm5hbWUgfSwgdHJ1ZSwgVmlzaWJpbGl0eS5wdWJsaWMsIHRydWUsIHNvdW5kLmRlc2NyaXB0aW9uKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnN0YXRpY0NsYXNzLnNldHVwQXR0cmlidXRlSW5kaWNlc1JlY3Vyc2l2ZSgpO1xyXG5cclxuICAgICAgICB0aGlzLnN0YXRpY0NsYXNzLmNsYXNzT2JqZWN0ID0gbmV3IFJ1bnRpbWVPYmplY3QodGhpcy5zdGF0aWNDbGFzcyk7XHJcblxyXG4gICAgICAgIHRoaXMuYWRkTWV0aG9kKG5ldyBNZXRob2QoXCJwbGF5U291bmRcIiwgbmV3IFBhcmFtZXRlcmxpc3QoW1xyXG4gICAgICAgICAgICB7IGlkZW50aWZpZXI6IFwic291bmRcIiwgdHlwZTogc3RyaW5nUHJpbWl0aXZlVHlwZSwgZGVjbGFyYXRpb246IG51bGwsIHVzYWdlUG9zaXRpb25zOiBudWxsLCBpc0ZpbmFsOiB0cnVlIH1cclxuICAgICAgICBdKSwgbnVsbCxcclxuICAgICAgICAocGFyYW1ldGVycykgPT4ge1xyXG4gICAgICAgICAgICBsZXQgc291bmQ6IHN0cmluZyA9IHBhcmFtZXRlcnNbMV0udmFsdWU7XHJcbiAgICAgICAgICAgIFNvdW5kVG9vbHMucGxheShzb3VuZCk7XHJcbiAgICAgICAgfSAgICBcclxuICAgICAgICAsIGZhbHNlLCB0cnVlLCBcIlNwaWVsdCBlaW5lbiBTb3VuZCBhYi4gRGllIE3DtmdsaWNoZW4gU291bmRzIHNpbmQgYWxzIHN0YXRpc2NoZSBWYXJpYWJsZW4gZGVyIEtsYXNzZSBTb3VuZCBoaW50ZXJsZWd0LiBUaXBwZSBhbHMgUGFyYW1ldGVyIGFsc28gU291bmQgZ2Vmb2xndCB2b24gZWluZW0gUHVua3QgZWluLCB1bSBlaW5lIEF1c3dhaGwgenUgc2VoZW4hXCIpKTtcclxuXHJcblxyXG4gICAgfVxyXG5cclxufSJdfQ==