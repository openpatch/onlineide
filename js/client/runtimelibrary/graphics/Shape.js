import { Klass, Visibility } from "../../compiler/types/Class.js";
import { Method, Parameterlist, Attribute } from "../../compiler/types/Types.js";
import { intPrimitiveType, doublePrimitiveType, voidPrimitiveType, booleanPrimitiveType, stringPrimitiveType } from "../../compiler/types/PrimitiveTypes.js";
import { ArrayType } from "../../compiler/types/Array.js";
import { ActorHelper } from "./Actor.js";
import { polygonEnthältPunkt, polygonBerührtPolygonExakt } from "../../tools/MatheTools.js";
import { ColorHelper } from "./ColorHelper.js";
export class ShapeClass extends Klass {
    constructor(module) {
        super("Shape", module, "Basisklasse für alle graphischen Objekte die verschoben, skaliert und gedreht werden können");
        this.setBaseClass(module.typeStore.getType("Actor"));
        this.isAbstract = true;
        // let matrixType = new ArrayType(doublePrimitiveType);
        let shapeType = module.typeStore.getType("Shape");
        let shapeArrayType = new ArrayType(shapeType);
        this.addAttribute(new Attribute("angle", doublePrimitiveType, (value) => {
            let rto = value.object;
            let helper = rto.intrinsicData["Actor"];
            if (helper == null || helper.isDestroyed || helper.displayObject == null) {
                value.value = 0;
                return;
            }
            value.value = helper.angle;
        }, false, Visibility.protected, true, "Richtung"));
        this.addAttribute(new Attribute("centerX", doublePrimitiveType, (value) => {
            let rto = value.object;
            let helper = rto.intrinsicData["Actor"];
            if (helper == null || helper.isDestroyed || helper.displayObject == null) {
                value.value = 0;
                return;
            }
            value.value = helper.getCenterX();
        }, false, Visibility.protected, true, "X-Koordinate des Diagonalenschnittpunkts der BoundingBox des Objekts"));
        this.addAttribute(new Attribute("centerY", doublePrimitiveType, (value) => {
            let rto = value.object;
            let helper = rto.intrinsicData["Actor"];
            if (helper == null || helper.isDestroyed || helper.displayObject == null) {
                value.value = 0;
                return;
            }
            value.value = helper.getCenterY();
        }, false, Visibility.protected, true, "Y-Koordinate des Diagonalenschnittpunkts der BoundingBox des Objekts"));
        this.setupAttributeIndicesRecursive();
        // this.addAttribute(new Attribute("transformation", matrixType,
        //     (value) => {
        //         let rto: RuntimeObject = value.object;
        //         let helper: ShapeHelper = rto.intrinsicData["Actor"];
        //         if (helper == null || helper.isDestroyed || helper.displayObject.transform == null) {
        //             value.value = null;
        //             return;
        //         }
        //         let matrix = helper.displayObject.localTransform.toArray(false);
        //         if (value.value == null) {
        //             value.value = [];
        //             for (let n of matrix) {
        //                 value.value.push({
        //                     type: doublePrimitiveType,
        //                     value: n
        //                 });
        //             }
        //         } else {
        //             let i: number = 0;
        //             for (let n of matrix) {
        //                 value.value[i++].value = n;
        //             }
        //         }
        //     }, false, Visibility.protected, true, "Transformationsmatrix"));
        this.addMethod(new Method("move", new Parameterlist([
            { identifier: "dx", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },
            { identifier: "dy", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },
        ]), voidPrimitiveType, (parameters) => {
            let o = parameters[0].value;
            let dx = parameters[1].value;
            let dy = parameters[2].value;
            let sh = o.intrinsicData["Actor"];
            if (sh.testdestroyed("move"))
                return;
            sh.move(dx, dy);
        }, false, false, "Verschiebt das Grafikobjekt um dx Pixel nach rechts und um dy Pixel nach unten.", false));
        this.addMethod(new Method("rotate", new Parameterlist([
            { identifier: "angleInDeg", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },
            { identifier: "centerX", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },
            { identifier: "centerY", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },
        ]), voidPrimitiveType, (parameters) => {
            let o = parameters[0].value;
            let angleInDeg = parameters[1].value;
            let centerX = parameters[2].value;
            let centerY = parameters[3].value;
            let sh = o.intrinsicData["Actor"];
            if (sh.testdestroyed("rotate"))
                return;
            sh.rotate(angleInDeg, centerX, centerY);
        }, false, false, "Dreht das Grafikobjekt um den angegebenen Winkel. Drehpunkt ist (centerX, centerY).", false));
        this.addMethod(new Method("rotate", new Parameterlist([
            { identifier: "angleInDeg", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },
        ]), voidPrimitiveType, (parameters) => {
            let o = parameters[0].value;
            let angleInDeg = parameters[1].value;
            let sh = o.intrinsicData["Actor"];
            if (sh.testdestroyed("rotate"))
                return;
            sh.rotate(angleInDeg);
        }, false, false, "Dreht das Grafikobjekt um den angegebenen Winkel. Drehpunkt ist der 'Mittelpunkt' des Objekts", false));
        this.addMethod(new Method("scale", new Parameterlist([
            { identifier: "factor", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },
            { identifier: "centerX", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },
            { identifier: "centerY", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },
        ]), voidPrimitiveType, (parameters) => {
            let o = parameters[0].value;
            let factor = parameters[1].value;
            let centerX = parameters[2].value;
            let centerY = parameters[3].value;
            let sh = o.intrinsicData["Actor"];
            if (sh.testdestroyed("scale"))
                return;
            sh.scale(factor, centerX, centerY);
        }, false, false, "Streckt das Grafikobjekt um den angegebenen Faktor. Das Zentrum der Streckung ist der Punkt (centerX, centerY)", false));
        this.addMethod(new Method("scale", new Parameterlist([
            { identifier: "factor", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },
        ]), voidPrimitiveType, (parameters) => {
            let o = parameters[0].value;
            let factor = parameters[1].value;
            let sh = o.intrinsicData["Actor"];
            if (sh.testdestroyed("scale"))
                return;
            sh.scale(factor);
        }, false, false, "Streckt das Grafikobjekt um den angegebenen Faktor. Das Zentrum der Streckung ist der 'Mittelpunkt' des Objekts.", false));
        this.addMethod(new Method("mirrorX", new Parameterlist([]), voidPrimitiveType, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            if (sh.testdestroyed("mirrorX"))
                return;
            sh.mirrorXY(-1, 1);
        }, false, false, "Spiegelt das Objekt in X-Richtung.", false));
        this.addMethod(new Method("mirrorY", new Parameterlist([]), voidPrimitiveType, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            if (sh.testdestroyed("mirrorX"))
                return;
            sh.mirrorXY(1, -1);
        }, false, false, "Spiegelt das Objekt in Y-Richtung.", false));
        this.addMethod(new Method("isOutsideView", new Parameterlist([]), booleanPrimitiveType, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            if (sh.testdestroyed("isOutsideView"))
                return;
            return sh.isOutsideView();
        }, false, false, "Gibt genau dann true zurück, wenn sich die Bounding Box des Objekts außerhalb des sichtbaren Bereichs befindet. ", false));
        this.addMethod(new Method("getCenterX", new Parameterlist([]), doublePrimitiveType, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            if (sh.testdestroyed("getCenterX"))
                return;
            return sh.getCenterX();
        }, false, false, "Gibt die x-Koordinate des 'Mittelpunkts' zurück. Der 'Mittelpunkt' des Grafikobjekts ist der Diagonalenschnittpunkt seiner achsenparallelen Bounding-Box.", false));
        this.addMethod(new Method("getCenterY", new Parameterlist([]), doublePrimitiveType, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            if (sh.testdestroyed("getCenterY"))
                return;
            return sh.getCenterY();
        }, false, false, "Gibt die y-Koordinate des 'Mittelpunkts' zurück. Der 'Mittelpunkt' des Grafikobjekts ist der Diagonalenschnittpunkt seiner achsenparallelen Bounding-Box.", false));
        this.addMethod(new Method("getAngle", new Parameterlist([]), doublePrimitiveType, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            if (sh.testdestroyed("getAngle"))
                return;
            return sh.angle;
        }, false, false, "Gibt den Winkel des Grafikobjekts in Grad zurück. Winkel == 0 bedeutet: dieselbe Richtung wie zum Zeipunkt der Instanzierung des Objekts. Positive Winkelzunahme bedeutet Rechtsdrehung.", false));
        this.addMethod(new Method("containsPoint", new Parameterlist([
            { identifier: "x", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },
            { identifier: "y", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },
        ]), booleanPrimitiveType, (parameters) => {
            let o = parameters[0].value;
            let x = parameters[1].value;
            let y = parameters[2].value;
            let sh = o.intrinsicData["Actor"];
            if (sh.testdestroyed("containsPoint"))
                return;
            return sh.containsPoint(x, y);
        }, false, false, "Gibt genau dann true zurück, wenn das Grafikobjekt den Punkt (x, y) enthält.", false));
        this.addMethod(new Method("collidesWith", new Parameterlist([
            { identifier: "object", type: this, declaration: null, usagePositions: null, isFinal: true },
        ]), booleanPrimitiveType, (parameters) => {
            let o = parameters[0].value;
            let shape = parameters[1].value;
            if (shape == null) {
                module.main.getInterpreter().throwException("Der zweite Parameter der Methode collidesWith darf nicht null sein.");
            }
            let sh = o.intrinsicData["Actor"];
            let sh1 = shape.intrinsicData["Actor"];
            if (sh.testdestroyed("collidesWith"))
                return;
            if (sh1.isDestroyed) {
                sh.worldHelper.interpreter.throwException("Die der Methode collidesWith als Parameter übergebene Figur ist bereits zerstört.");
                return;
            }
            return sh.collidesWith(sh1);
        }, false, false, "Gibt genau dann true zurück, wenn das Grafikobjekt und das andere Grafikobjekt kollidieren.", false));
        this.addMethod(new Method("setCenter", new Parameterlist([
            { identifier: "x", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },
            { identifier: "y", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },
        ]), voidPrimitiveType, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            let x = parameters[1].value;
            let y = parameters[2].value;
            if (sh.testdestroyed("setCenter"))
                return;
            sh.move(x - sh.getCenterX(), y - sh.getCenterY());
        }, false, false, "Verschiebt das Grafikobjekt so, dass sich sein 'Mittelpunkt' an den angegebenen Koordinaten befindet.", false));
        this.addMethod(new Method("setAngle", new Parameterlist([
            { identifier: "angleDeg", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },
        ]), voidPrimitiveType, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            let angleDeg = parameters[1].value;
            if (sh.testdestroyed("setAngle"))
                return;
            sh.rotate(angleDeg - sh.angle);
        }, false, false, "Dreht das Objekt zur angegebenen Richtung.", false));
        this.addMethod(new Method("setVisible", new Parameterlist([
            { identifier: "visible", type: booleanPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
        ]), voidPrimitiveType, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            let visible = parameters[1].value;
            if (sh.testdestroyed("setVisible"))
                return;
            sh.setVisible(visible);
        }, false, false, "Macht das Grafikobjekt sichtbar (visible == true) bzw. unsichtbar (visible == false).", false));
        this.addMethod(new Method("onMouseEnter", new Parameterlist([
            { identifier: "x", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },
            { identifier: "y", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },
        ]), null, null, // no statements!
        false, false, "Wird aufgerufen, wenn sich der Mauspfeil in das Objekt hineinbewegt.", false));
        this.addMethod(new Method("onMouseLeave", new Parameterlist([
            { identifier: "x", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },
            { identifier: "y", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },
        ]), null, null, // no statements!
        false, false, "Wird aufgerufen, wenn sich der Mauspfeil in das Objekt hineinbewegt.", false));
        this.addMethod(new Method("onMouseDown", new Parameterlist([
            { identifier: "x", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },
            { identifier: "y", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },
            { identifier: "key", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
        ]), null, null, // no statements!
        false, false, "Wird aufgerufen, wenn sich der Mauspfeil über dem Objekt befindet und der Benutzer eine Maustaste nach unten drückt.", false));
        this.addMethod(new Method("onMouseUp", new Parameterlist([
            { identifier: "x", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },
            { identifier: "y", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },
            { identifier: "key", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
        ]), null, null, // no statements!
        false, false, "Wird aufgerufen, wenn sich der Mauspfeil über dem Objekt befindet und der Benutzer eine Maustaste loslässt.", false));
        this.addMethod(new Method("onMouseMove", new Parameterlist([
            { identifier: "x", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },
            { identifier: "y", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },
        ]), null, null, // no statements!
        false, false, "Wird aufgerufen, wenn sich der Mauspfeil über dem Objekt befindet und bewegt.", false));
        this.addMethod(new Method("tint", new Parameterlist([
            { identifier: "colorAsRGBAString", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
        ]), voidPrimitiveType, (parameters) => {
            let o = parameters[0].value;
            let color = parameters[1].value;
            let sh = o.intrinsicData["Actor"];
            if (sh.testdestroyed("tint"))
                return;
            sh.tint(color);
        }, false, false, 'Überzieht das Grafikobjekt mit einer halbdurchsichtigen Farbschicht.', false));
        this.addMethod(new Method("startTrackingEveryMouseMovement", new Parameterlist([]), voidPrimitiveType, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            sh.trackMouseMove = true;
        }, false, false, 'Sorgt dafür, dass ab jetzt JEDE Bewegung des Mauszeigers (auch wenn sich dieser außerhalb des Objekts befindet) ein MouseMove-Ereignis für dieses Objekt auslöst. -> Praktisch zur Umsetzung des "Ziehens" von Objekten mit der Maus!', false));
        this.addMethod(new Method("stopTrackingEveryMouseMovement", new Parameterlist([]), voidPrimitiveType, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            sh.trackMouseMove = false;
        }, false, false, 'Sorgt dafür, dass ab jetzt nur noch dann Bewegungen des Mauszeigers ein MouseMove-Ereignis für dieses Objekt auslösen, wenn sich der Mauszeiger über dem Objekt befindet. -> Praktisch zur Umsetzung des "Ziehens" von Objekten mit der Maus!', false));
        this.addMethod(new Method("reactToMouseEventsWhenInvisible", new Parameterlist([
            { identifier: "react", type: booleanPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
        ]), voidPrimitiveType, (parameters) => {
            let o = parameters[0].value;
            let react = parameters[1].value;
            let sh = o.intrinsicData["Actor"];
            sh.reactToMouseEventsWhenInvisible = react;
        }, false, false, 'Legt fest, ob das Objekt auf Mausevents (buttondown, mouse move, ...) reagiert, wenn es unsichtbar ist.', false));
        this.addMethod(new Method("tint", new Parameterlist([
            { identifier: "colorAsRGBAString", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
        ]), voidPrimitiveType, (parameters) => {
            let o = parameters[0].value;
            let color = parameters[1].value;
            let sh = o.intrinsicData["Actor"];
            if (sh.testdestroyed("tint"))
                return;
            sh.tint(color);
        }, false, false, 'Überzieht das Grafikobjekt mit einer halbdurchsichtigen Farbschicht.', false));
        this.addMethod(new Method("copy", new Parameterlist([]), this, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            if (sh.testdestroyed("copy"))
                return;
            return sh.getCopy(o.class);
        }, true, false, 'Erstellt eine Kopie des Grafikobjekts und git sie zurück.', false));
        this.addMethod(new Method("bringToFront", new Parameterlist([]), voidPrimitiveType, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            if (sh.testdestroyed("bringToFront"))
                return;
            return sh.bringToFront();
        }, false, false, 'Setzt das Grafikobjekt vor alle anderen.', false));
        this.addMethod(new Method("sendToBack", new Parameterlist([]), voidPrimitiveType, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            if (sh.testdestroyed("sendToBack"))
                return;
            return sh.sendToBack();
        }, false, false, 'Setzt das Grafikobjekt hinter alle anderen.', false));
    }
}
export class ShapeHelper extends ActorHelper {
    constructor(interpreter, runtimeObject) {
        super(interpreter, runtimeObject);
        this.angle = 0;
        this.hitPolygonInitial = null;
        this.hitPolygonTransformed = null;
        this.hitPolygonDirty = true;
        this.reactToMouseEventsWhenInvisible = false;
        this.mouseLastSeenInsideObject = false;
        this.trackMouseMove = false;
        this.scaleFactor = 1.0;
        let listenerTypes = [
            { identifier: "MouseUp", signature: "(double, double, int)" },
            { identifier: "MouseDown", signature: "(double, double, int)" },
            { identifier: "MouseMove", signature: "(double, double)" },
            { identifier: "MouseEnter", signature: "(double, double)" },
            { identifier: "MouseLeave", signature: "(double, double)" },
        ];
        let sd = null;
        for (let lt of listenerTypes) {
            let method = runtimeObject.class.getMethodBySignature("on" + lt.identifier + lt.signature);
            if ((method === null || method === void 0 ? void 0 : method.program) != null || (method === null || method === void 0 ? void 0 : method.invoke) != null) {
                if (sd == null) {
                    sd = {
                        shapeHelper: this,
                        types: {},
                        methods: {}
                    };
                    this.worldHelper.mouseListenerShapes.push(sd);
                }
                sd.types[lt.identifier.toLowerCase()] = true;
                sd.methods[lt.identifier.toLowerCase()] = method;
            }
        }
        // if !(this instanceof GroupHelper)
        if (!this["shapes"]) {
            this.worldHelper.shapes.push(this);
        }
    }
    copyFrom(shapeHelper) {
        this.centerXInitial = shapeHelper.centerXInitial;
        this.centerYInitial = shapeHelper.centerYInitial;
        if (shapeHelper.hitPolygonInitial != null) {
            this.hitPolygonInitial = [];
            for (let p of shapeHelper.hitPolygonInitial)
                this.hitPolygonInitial.push(Object.assign({}, p));
        }
        this.setHitPolygonDirty(true);
        this.hitPolygonDirty = shapeHelper.hitPolygonDirty;
        this.reactToMouseEventsWhenInvisible = shapeHelper.reactToMouseEventsWhenInvisible;
        this.mouseLastSeenInsideObject = shapeHelper.mouseLastSeenInsideObject;
        this.displayObject.localTransform.copyFrom(shapeHelper.displayObject.transform.localTransform);
        this.displayObject.updateTransform();
    }
    setHitPolygonDirty(dirty) {
        this.hitPolygonDirty = dirty;
    }
    bringOnePlaneFurtherToFront() {
        let container = this.displayObject.parent;
        let highestIndex = container.children.length - 1;
        let index = container.getChildIndex(this.displayObject);
        if (index < highestIndex) {
            container.setChildIndex(this.displayObject, index + 1);
        }
    }
    bringOnePlaneFurtherToBack() {
        let container = this.displayObject.parent;
        let index = container.getChildIndex(this.displayObject);
        if (index > 0) {
            container.setChildIndex(this.displayObject, index - 1);
        }
    }
    bringToFront() {
        let container = this.displayObject.parent;
        let highestIndex = container.children.length - 1;
        container.setChildIndex(this.displayObject, highestIndex);
    }
    sendToBack() {
        let container = this.displayObject.parent;
        container.setChildIndex(this.displayObject, 0);
    }
    addToDefaultGroup() {
        if (this.worldHelper.defaultGroup != null) {
            this.runtimeObject.intrinsicData["Actor"] = this;
            let groupHelper = this.worldHelper.defaultGroup;
            groupHelper.add(this.runtimeObject);
        }
    }
    testdestroyed(method) {
        if (this.isDestroyed) {
            this.worldHelper.interpreter.throwException("Es wurde die Methode " + method + " eines bereits mit destroy() zerstörten Grafikobjekts aufgerufen.");
            return true;
        }
        return false;
    }
    tint(color) {
        let c = ColorHelper.parseColorToOpenGL(color);
        //@ts-ignore
        if (this.displayObject.tint) {
            //@ts-ignore
            this.displayObject.tint = c.color;
        }
        this.render();
    }
    setVisible(visible) {
        this.displayObject.visible = visible;
    }
    collidesWith(shapeHelper) {
        // if(!(this instanceof TurtleHelper) && (shapeHelper instanceof TurtleHelper)){
        if (!(this["lineElements"] != null) && (shapeHelper["lineElements"] != null)) {
            return shapeHelper.collidesWith(this);
        }
        this.displayObject.updateTransform();
        shapeHelper.displayObject.updateTransform();
        let bb = this.displayObject.getBounds();
        let bb1 = shapeHelper.displayObject.getBounds();
        if (bb.left > bb1.right || bb1.left > bb.right)
            return false;
        if (bb.top > bb1.bottom || bb1.top > bb.bottom)
            return false;
        if (shapeHelper["shapes"]) {
            return shapeHelper.collidesWith(this);
        }
        if (this.hitPolygonInitial == null || shapeHelper.hitPolygonInitial == null)
            return true;
        // boundig boxes collide, so check further:
        if (this.hitPolygonDirty)
            this.transformHitPolygon();
        if (shapeHelper.hitPolygonDirty)
            shapeHelper.transformHitPolygon();
        // return polygonBerührtPolygon(this.hitPolygonTransformed, shapeHelper.hitPolygonTransformed);
        return polygonBerührtPolygonExakt(this.hitPolygonTransformed, shapeHelper.hitPolygonTransformed, true, true);
    }
    containsPoint(x, y) {
        if (!this.displayObject.getBounds().contains(x, y))
            return false;
        if (this.hitPolygonInitial == null)
            return true;
        if (this.hitPolygonDirty)
            this.transformHitPolygon();
        return polygonEnthältPunkt(this.hitPolygonTransformed, { x: x, y: y });
    }
    transformHitPolygon() {
        let p = new PIXI.Point(this.centerXInitial, this.centerYInitial);
        this.displayObject.updateTransform();
        this.displayObject.transform.worldTransform.apply(p, p);
        this.hitPolygonTransformed = [];
        let m = this.displayObject.transform.worldTransform;
        for (let p of this.hitPolygonInitial) {
            this.hitPolygonTransformed.push({
                x: (m.a * p.x) + (m.c * p.y) + m.tx,
                y: (m.b * p.x) + (m.d * p.y) + m.ty
            });
        }
        this.setHitPolygonDirty(false);
    }
    isOutsideView() {
        let bounds = this.displayObject.getBounds(true);
        let screen = this.worldHelper.app.screen;
        return bounds.right < screen.left || bounds.left > screen.right
            || bounds.bottom < screen.top || bounds.top > screen.bottom;
    }
    move(dx, dy) {
        this.displayObject.localTransform.translate(dx, dy);
        this.displayObject.transform.onChange();
        this.displayObject.updateTransform();
        this.setHitPolygonDirty(true);
    }
    rotate(angleInDeg, cX, cY) {
        this.displayObject.updateTransform();
        if (cX == null) {
            let p = new PIXI.Point(this.centerXInitial, this.centerYInitial);
            this.displayObject.localTransform.apply(p, p);
            cX = p.x;
            cY = p.y;
        }
        else {
            let p = new PIXI.Point(cX, cY);
            this.worldHelper.stage.localTransform.apply(p, p);
            this.displayObject.transform.worldTransform.applyInverse(p, p);
            this.displayObject.localTransform.apply(p, p);
            cX = p.x;
            cY = p.y;
        }
        this.displayObject.localTransform.translate(-cX, -cY);
        this.displayObject.localTransform.rotate(-angleInDeg / 180 * Math.PI);
        this.displayObject.localTransform.translate(cX, cY);
        this.displayObject.transform.onChange();
        this.setHitPolygonDirty(true);
        this.angle += angleInDeg;
    }
    mirrorXY(scaleX, scaleY) {
        let cX, cY;
        this.displayObject.updateTransform();
        let p = new PIXI.Point(this.centerXInitial, this.centerYInitial);
        this.displayObject.localTransform.apply(p, p);
        cX = p.x;
        cY = p.y;
        this.displayObject.localTransform.translate(-cX, -cY);
        this.displayObject.localTransform.scale(scaleX, scaleY);
        this.displayObject.localTransform.translate(cX, cY);
        this.displayObject.transform.onChange();
        this.setHitPolygonDirty(true);
    }
    scale(factor, cX, cY) {
        this.displayObject.updateTransform();
        if (cX == null) {
            let p = new PIXI.Point(this.centerXInitial, this.centerYInitial);
            this.displayObject.localTransform.apply(p, p);
            cX = p.x;
            cY = p.y;
        }
        else {
            let p = new PIXI.Point(cX, cY);
            this.worldHelper.stage.localTransform.apply(p, p);
            this.displayObject.transform.worldTransform.applyInverse(p, p);
            this.displayObject.localTransform.apply(p, p);
            cX = p.x;
            cY = p.y;
        }
        this.displayObject.localTransform.translate(-cX, -cY);
        this.displayObject.localTransform.scale(factor, factor);
        this.displayObject.localTransform.translate(cX, cY);
        this.displayObject.transform.onChange();
        this.setHitPolygonDirty(true);
        this.scaleFactor *= factor;
    }
    getCenterX() {
        let p = new PIXI.Point(this.centerXInitial, this.centerYInitial);
        this.displayObject.updateTransform();
        // this.displayObject.localTransform.apply(p, p);
        this.displayObject.transform.worldTransform.apply(p, p);
        this.worldHelper.stage.localTransform.applyInverse(p, p);
        return p.x;
    }
    getCenterY() {
        let p = new PIXI.Point(this.centerXInitial, this.centerYInitial);
        this.displayObject.updateTransform();
        this.displayObject.transform.worldTransform.apply(p, p);
        this.worldHelper.stage.localTransform.applyInverse(p, p);
        return p.y;
    }
    destroy() {
        super.destroy();
        if (this.belongsToGroup != null) {
            this.belongsToGroup.remove(this.runtimeObject);
        }
        // if !(this instanceof GroupHelper)
        if (!this["shapes"]) {
            let index = this.worldHelper.shapes.indexOf(this);
            this.worldHelper.shapes.splice(index, 1);
        }
    }
    getCollidingShapes(groupHelper, shapeType) {
        let collidingShapes = [];
        for (let shape of groupHelper.shapes) {
            let shapeHelper = shape.intrinsicData["Actor"];
            if (shapeHelper.collidesWith(this)) {
                collidingShapes.push({
                    type: shapeType,
                    value: shape
                });
            }
        }
        return collidingShapes;
    }
}
//# sourceMappingURL=data:application/json;base64,