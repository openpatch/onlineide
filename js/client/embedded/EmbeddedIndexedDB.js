export class EmbeddedIndexedDB {
    open(successCallback) {
        if (window.indexedDB) {
            let request = window.indexedDB.open("LearnJ", 1);
            let that = this;
            request.onerror = function (ev) {
                console.log("Couldn't open IndexedDB: " + ev.type);
            };
            request.onsuccess = function (ev) {
                that.db = request.result;
                that.db.onerror = function (event) {
                    // Allgemeine Fehlerbehandlung, die fÃ¼r alle Anfragen an die Datenbank gilt. 
                    // @ts-ignore
                    console.log("Datenbankfehler: " + event.target.error.message);
                };
                successCallback();
            };
            request.onupgradeneeded = function (ev) {
                // @ts-ignore
                that.db = ev.target.result;
                let objectStore = that.db.createObjectStore("scripts", { keyPath: "scriptId", autoIncrement: false });
                objectStore.transaction.oncomplete = function (event) {
                };
            };
        }
        else {
            console.log("IndexedDB not available.");
        }
    }
    writeScript(scriptId, script) {
        let scriptObjectStore = this.db.transaction("scripts", "readwrite").objectStore("scripts");
        scriptObjectStore.put({
            scriptId: scriptId,
            script: script
        });
    }
    removeScript(scriptId) {
        let scriptObjectStore = this.db.transaction("scripts", "readwrite").objectStore("scripts");
        scriptObjectStore.delete(scriptId);
    }
    getScript(scriptId, callback) {
        let scriptObjectStore = this.db.transaction("scripts", "readwrite").objectStore("scripts");
        let request = scriptObjectStore.get(scriptId);
        request.onerror = (event) => {
            callback(null);
        };
        request.onsuccess = (event) => {
            if (request.result == null) {
                callback(null);
            }
            else {
                callback(request.result.script);
            }
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRW1iZWRkZWRJbmRleGVkREIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY2xpZW50L2VtYmVkZGVkL0VtYmVkZGVkSW5kZXhlZERCLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sT0FBTyxpQkFBaUI7SUFJbkIsSUFBSSxDQUFDLGVBQTJCO1FBRW5DLElBQUksTUFBTSxDQUFDLFNBQVMsRUFBRTtZQUVsQixJQUFJLE9BQU8sR0FBcUIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBRW5FLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQztZQUVoQixPQUFPLENBQUMsT0FBTyxHQUFHLFVBQXlDLEVBQVM7Z0JBQ2hFLE9BQU8sQ0FBQyxHQUFHLENBQUMsMkJBQTJCLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3ZELENBQUMsQ0FBQztZQUVGLE9BQU8sQ0FBQyxTQUFTLEdBQUcsVUFBeUMsRUFBUztnQkFDbEUsSUFBSSxDQUFDLEVBQUUsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDO2dCQUN6QixJQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sR0FBRyxVQUFTLEtBQUs7b0JBQzVCLDZFQUE2RTtvQkFDN0UsYUFBYTtvQkFDYixPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUNoRSxDQUFDLENBQUM7Z0JBQ0YsZUFBZSxFQUFFLENBQUM7WUFDeEIsQ0FBQyxDQUFDO1lBRUYsT0FBTyxDQUFDLGVBQWUsR0FBRyxVQUFTLEVBQVM7Z0JBQ3hDLGFBQWE7Z0JBQ2IsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztnQkFDM0IsSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLEVBQUUsRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLGFBQWEsRUFBRSxLQUFLLEVBQUMsQ0FBQyxDQUFDO2dCQUdyRyxXQUFXLENBQUMsV0FBVyxDQUFDLFVBQVUsR0FBRyxVQUFTLEtBQUs7Z0JBRW5ELENBQUMsQ0FBQTtZQUVMLENBQUMsQ0FBQTtTQUVKO2FBQU07WUFDSCxPQUFPLENBQUMsR0FBRyxDQUFDLDBCQUEwQixDQUFDLENBQUM7U0FDM0M7SUFFTCxDQUFDO0lBR00sV0FBVyxDQUFDLFFBQWdCLEVBQUUsTUFBYztRQUUvQyxJQUFJLGlCQUFpQixHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLFNBQVMsRUFBRSxXQUFXLENBQUMsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7UUFFM0YsaUJBQWlCLENBQUMsR0FBRyxDQUFDO1lBQ2xCLFFBQVEsRUFBRSxRQUFRO1lBQ2xCLE1BQU0sRUFBRSxNQUFNO1NBQ2pCLENBQUMsQ0FBQztJQUVQLENBQUM7SUFFTSxZQUFZLENBQUMsUUFBZ0I7UUFFaEMsSUFBSSxpQkFBaUIsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRTNGLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUV2QyxDQUFDO0lBR00sU0FBUyxDQUFDLFFBQWdCLEVBQUUsUUFBa0M7UUFFakUsSUFBSSxpQkFBaUIsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRTNGLElBQUksT0FBTyxHQUFHLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUU5QyxPQUFPLENBQUMsT0FBTyxHQUFHLENBQUMsS0FBSyxFQUFFLEVBQUU7WUFDeEIsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ25CLENBQUMsQ0FBQTtRQUVELE9BQU8sQ0FBQyxTQUFTLEdBQUcsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUMxQixJQUFHLE9BQU8sQ0FBQyxNQUFNLElBQUksSUFBSSxFQUFDO2dCQUN0QixRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDbEI7aUJBQU07Z0JBQ0gsUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDbkM7UUFDTCxDQUFDLENBQUE7SUFFTCxDQUFDO0NBR0oiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgRW1iZWRkZWRJbmRleGVkREIge1xyXG5cclxuICAgIHByaXZhdGUgZGI6IElEQkRhdGFiYXNlO1xyXG5cclxuICAgIHB1YmxpYyBvcGVuKHN1Y2Nlc3NDYWxsYmFjazogKCkgPT4gdm9pZCkge1xyXG5cclxuICAgICAgICBpZiAod2luZG93LmluZGV4ZWREQikge1xyXG5cclxuICAgICAgICAgICAgbGV0IHJlcXVlc3Q6IElEQk9wZW5EQlJlcXVlc3QgPSB3aW5kb3cuaW5kZXhlZERCLm9wZW4oXCJMZWFybkpcIiwgMSk7XHJcblxyXG4gICAgICAgICAgICBsZXQgdGhhdCA9IHRoaXM7XHJcblxyXG4gICAgICAgICAgICByZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiAodGhpczogSURCUmVxdWVzdDxJREJEYXRhYmFzZT4sIGV2OiBFdmVudCkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJDb3VsZG4ndCBvcGVuIEluZGV4ZWREQjogXCIgKyBldi50eXBlKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHJlcXVlc3Qub25zdWNjZXNzID0gZnVuY3Rpb24gKHRoaXM6IElEQlJlcXVlc3Q8SURCRGF0YWJhc2U+LCBldjogRXZlbnQpIHtcclxuICAgICAgICAgICAgICAgIHRoYXQuZGIgPSByZXF1ZXN0LnJlc3VsdDtcclxuICAgICAgICAgICAgICAgIHRoYXQuZGIub25lcnJvciA9IGZ1bmN0aW9uKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQWxsZ2VtZWluZSBGZWhsZXJiZWhhbmRsdW5nLCBkaWUgZsO8ciBhbGxlIEFuZnJhZ2VuIGFuIGRpZSBEYXRlbmJhbmsgZ2lsdC4gXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRGF0ZW5iYW5rZmVobGVyOiBcIiArIGV2ZW50LnRhcmdldC5lcnJvci5tZXNzYWdlKTtcclxuICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgc3VjY2Vzc0NhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICByZXF1ZXN0Lm9udXBncmFkZW5lZWRlZCA9IGZ1bmN0aW9uKGV2OiBFdmVudCl7XHJcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXHJcbiAgICAgICAgICAgICAgICB0aGF0LmRiID0gZXYudGFyZ2V0LnJlc3VsdDtcclxuICAgICAgICAgICAgICAgIGxldCBvYmplY3RTdG9yZSA9IHRoYXQuZGIuY3JlYXRlT2JqZWN0U3RvcmUoXCJzY3JpcHRzXCIsIHsga2V5UGF0aDogXCJzY3JpcHRJZFwiLCBhdXRvSW5jcmVtZW50OiBmYWxzZX0pO1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICBvYmplY3RTdG9yZS50cmFuc2FjdGlvbi5vbmNvbXBsZXRlID0gZnVuY3Rpb24oZXZlbnQpIHtcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiSW5kZXhlZERCIG5vdCBhdmFpbGFibGUuXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG5cclxuICAgIHB1YmxpYyB3cml0ZVNjcmlwdChzY3JpcHRJZDogc3RyaW5nLCBzY3JpcHQ6IHN0cmluZyl7XHJcblxyXG4gICAgICAgIGxldCBzY3JpcHRPYmplY3RTdG9yZSA9IHRoaXMuZGIudHJhbnNhY3Rpb24oXCJzY3JpcHRzXCIsIFwicmVhZHdyaXRlXCIpLm9iamVjdFN0b3JlKFwic2NyaXB0c1wiKTtcclxuXHJcbiAgICAgICAgc2NyaXB0T2JqZWN0U3RvcmUucHV0KHtcclxuICAgICAgICAgICAgc2NyaXB0SWQ6IHNjcmlwdElkLFxyXG4gICAgICAgICAgICBzY3JpcHQ6IHNjcmlwdFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcmVtb3ZlU2NyaXB0KHNjcmlwdElkOiBzdHJpbmcpe1xyXG5cclxuICAgICAgICBsZXQgc2NyaXB0T2JqZWN0U3RvcmUgPSB0aGlzLmRiLnRyYW5zYWN0aW9uKFwic2NyaXB0c1wiLCBcInJlYWR3cml0ZVwiKS5vYmplY3RTdG9yZShcInNjcmlwdHNcIik7XHJcblxyXG4gICAgICAgIHNjcmlwdE9iamVjdFN0b3JlLmRlbGV0ZShzY3JpcHRJZCk7XHJcblxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwdWJsaWMgZ2V0U2NyaXB0KHNjcmlwdElkOiBzdHJpbmcsIGNhbGxiYWNrOiAoc2NyaXB0OiBzdHJpbmcpID0+IHZvaWQpe1xyXG5cclxuICAgICAgICBsZXQgc2NyaXB0T2JqZWN0U3RvcmUgPSB0aGlzLmRiLnRyYW5zYWN0aW9uKFwic2NyaXB0c1wiLCBcInJlYWR3cml0ZVwiKS5vYmplY3RTdG9yZShcInNjcmlwdHNcIik7XHJcblxyXG4gICAgICAgIGxldCByZXF1ZXN0ID0gc2NyaXB0T2JqZWN0U3RvcmUuZ2V0KHNjcmlwdElkKTtcclxuXHJcbiAgICAgICAgcmVxdWVzdC5vbmVycm9yID0gKGV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmVxdWVzdC5vbnN1Y2Nlc3MgPSAoZXZlbnQpID0+IHtcclxuICAgICAgICAgICAgaWYocmVxdWVzdC5yZXN1bHQgPT0gbnVsbCl7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHJlcXVlc3QucmVzdWx0LnNjcmlwdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuXHJcbn0iXX0=