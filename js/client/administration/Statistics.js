import { ajax } from "../communication/AjaxHelper.js";
class Statistics {
    constructor() {
        this.timeFormat = 'YYYY-MM-DD HH:mm';
    }
    start() {
        let request = { now: false };
        let that = this;
        let secondsSinceLastUpdate = 0;
        ajax("getStatistics", request, (response) => {
            that.plotGraph(response.data);
            setInterval(() => {
                secondsSinceLastUpdate = 0;
                that.updateGraph();
            }, response.statisticPeriodSeconds * 1000);
            setInterval(() => {
                $('#updatetimer').text('NÃ¤chste Messung in ' + (response.statisticPeriodSeconds - secondsSinceLastUpdate) + " s");
                secondsSinceLastUpdate++;
            }, 1000);
        }, (message) => {
            alert("Es ist ein Fehler aufgetreten: " + message);
        });
        let getCurrentLoad = () => {
            let request = { now: true };
            ajax("getStatistics", request, (response) => {
                let d = response.data[0];
                let text = d.users + " User, " + Math.round(d.memory / 1000) + " kB, Requests pro Minute: " + d.requestsPerMinute;
                text += "<br>WebSockets: " + d.webSocketSessionCount + " Sessions with " + d.webSocketClientCount + " Clients, ";
                text += d.webSocketRequestPerSecond + " Requests pro Sekunde";
                $('#current').html(text);
                $('#userlist').text(d.userlist.join(", "));
                $('#current').css("color", "#0000ff");
                $('#current').animate({ color: "#000000" }, 1500);
            }, (message) => {
                alert("Es ist ein Fehler aufgetreten: " + message);
            });
        };
        getCurrentLoad();
        setInterval(getCurrentLoad, 5000);
    }
    updateGraph() {
        let request = { now: false };
        let that = this;
        ajax("getStatistics", request, (response) => {
            let incomingData = response.data;
            let optionsData = that.chart.data;
            let newData = [];
            if (that.rawLabels.length > 0) {
                let lastPlottedTime = that.rawLabels[that.rawLabels.length - 1];
                let i = 0;
                while (i < incomingData.length && incomingData[i].time != lastPlottedTime) {
                    i++;
                }
                if (i == incomingData.length) {
                    newData = incomingData;
                }
                else {
                    newData = incomingData.slice(i + 1);
                }
            }
            else {
                newData = incomingData;
            }
            for (let d of newData) {
                //@ts-ignore
                optionsData.labels.push(moment(d.time, this.timeFormat));
                optionsData.datasets[0].data.push(d.users);
                optionsData.datasets[1].data.push(d.memory / 1000000);
                optionsData.datasets[2].data.push(d.requestsPerMinute);
                optionsData.datasets[3].data.push(d.webSocketRequestPerSecond);
                that.rawLabels.push(d.time);
            }
            this.chart.update();
        }, (message) => {
            // alert("Es ist ein Fehler aufgetreten: " + message);
        });
    }
    plotGraph(data) {
        let ctx = document.getElementById('chart').getContext('2d');
        this.rawLabels = data.map((d) => d.time);
        //java: yyyy-MM-dd HH:mm
        let options = {
            // The type of chart we want to create
            type: 'line',
            // The data for our dataset
            data: {
                //@ts-ignore
                labels: data.map((d) => moment(d.time, this.timeFormat)),
                datasets: [
                    {
                        label: 'User',
                        fill: false,
                        backgroundColor: 'rgba(0, 0, 0, 0)',
                        borderColor: 'rgb(255, 99, 132)',
                        data: data.map((d) => d.users),
                        yAxisID: 'y-axis-1',
                        lineTension: 0
                    },
                    {
                        label: 'Memory (MB)',
                        fill: false,
                        backgroundColor: 'rgba(0, 0, 0, 0)',
                        borderColor: 'rgb(0, 100, 255)',
                        data: data.map((d) => Math.round(d.memory / 1000000)),
                        yAxisID: 'y-axis-2',
                        lineTension: 0
                    },
                    {
                        label: 'Requests per minute',
                        fill: false,
                        backgroundColor: 'rgba(0, 0, 0, 0)',
                        borderColor: 'rgb(0, 255, 100)',
                        data: data.map((d) => Math.round(d.requestsPerMinute)),
                        yAxisID: 'y-axis-1',
                        lineTension: 0
                    },
                    {
                        label: 'WS-Requests per second',
                        fill: false,
                        backgroundColor: 'rgba(0, 0, 0, 0)',
                        borderColor: 'rgb(100, 0, 255)',
                        data: data.map((d) => Math.round(d.webSocketRequestPerSecond)),
                        yAxisID: 'y-axis-2',
                        lineTension: 0
                    },
                ]
            },
            // Configuration options go here
            options: {
                responsive: true,
                maintainAspectRatio: false,
                hover: { mode: "index" },
                title: {
                    display: false,
                    text: 'Serverauslastung'
                },
                scales: {
                    xAxes: [{
                            type: 'time',
                            time: {
                                parser: this.timeFormat,
                                displayFormats: {
                                    hour: 'D.M.|H:mm'
                                }
                            },
                            distribution: 'series',
                            offset: true,
                            ticks: {
                                major: {
                                    enabled: true,
                                    fontStyle: 'bold'
                                },
                                source: 'data',
                                autoSkip: true,
                                autoSkipPadding: 75,
                                maxRotation: 0,
                                sampleSize: 100
                            }
                        }],
                    yAxes: [{
                            type: 'linear',
                            display: true,
                            position: 'left',
                            id: 'y-axis-1',
                        }, {
                            type: 'linear',
                            display: true,
                            position: 'right',
                            id: 'y-axis-2',
                            // grid line settings
                            gridLines: {
                                drawOnChartArea: false,
                            },
                        }],
                }
            }
        };
        //@ts-ignore
        this.chart = new Chart(ctx, options);
    }
}
$(() => {
    new Statistics().start();
});
//# sourceMappingURL=data:application/json;base64,