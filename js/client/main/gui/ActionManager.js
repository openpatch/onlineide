import { InterpreterState } from "../../interpreter/Interpreter.js";
import { SoundTools } from "../../tools/SoundTools.js";
export class ActionManager {
    constructor($mainElement, main) {
        this.$mainElement = $mainElement;
        this.main = main;
        this.actions = {};
        this.keyEntries = {};
        this.buttons = {};
    }
    init() {
        let $element = this.$mainElement;
        if ($element == null)
            $element = jQuery(document);
        let that = this;
        $element.on("keydown", function (event) {
            if (event != null) {
                that.executeKeyDownEvent(event);
                /*
                 * Event is bubbling down to body element
                 * when pressing space bar in embedded mode while program runs.
                 * This leads to scrolling page down. To prevent this:
                 */
                if (event.key == " " && that.main.isEmbedded() &&
                    that.main.getInterpreter().state == InterpreterState.running && !that.main.getMonacoEditor().hasTextFocus()) {
                    event.preventDefault();
                }
            }
        });
    }
    trigger(actionIdentifier) {
        let ae = this.actions[actionIdentifier];
        if (ae != null) {
            ae.action(actionIdentifier, null, "");
        }
    }
    registerAction(identifier, keys, action, text = "", button) {
        let ae = {
            action: action,
            identifier: identifier,
            keys: keys,
            text: text,
            active: true
        };
        this.actions[identifier] = ae;
        for (let key of keys) {
            if (this.keyEntries[key.toLowerCase()] == null) {
                this.keyEntries[key.toLowerCase()] = [];
            }
            this.keyEntries[key.toLowerCase()].push(ae);
        }
        if (button != null) {
            if (this.buttons[identifier] == null) {
                this.buttons[identifier] = [];
            }
            this.buttons[identifier].push(button);
            let t = text;
            if (keys.length > 0) {
                t += " [" + keys.join(", ") + "]";
            }
            button.attr("title", t);
            let mousePointer = window.PointerEvent ? "pointer" : "mouse";
            button.on(mousePointer + 'down', () => {
                if (ae.active) {
                    action(identifier, null, "mousedown");
                }
                if (identifier == "interpreter.start" && this.main.isEmbedded()) {
                    SoundTools.init();
                }
            });
        }
    }
    isActive(actionIdentifier) {
        let ae = this.actions[actionIdentifier];
        if (ae == null)
            return false;
        return ae.active;
    }
    setActive(actionIdentifier, active) {
        let ae = this.actions[actionIdentifier];
        if (ae != null) {
            ae.active = active;
        }
        let buttons = this.buttons[actionIdentifier];
        if (buttons != null) {
            for (let button of buttons) {
                if (active) {
                    button.addClass('jo_active');
                }
                else {
                    button.removeClass('jo_active');
                }
            }
        }
    }
    executeKeyDownEvent(event) {
        if (document.activeElement.tagName.toLowerCase() == "input") {
            return;
        }
        if (event.keyCode <= 18 && event.keyCode >= 16) {
            return; // ctrl, alt, shift
        }
        let key = "";
        if (event.ctrlKey) {
            key += "ctrl+";
        }
        if (event.shiftKey) {
            key += "shift+";
        }
        if (event.altKey) {
            key += "alt+";
        }
        if (event.key != null) {
            key += event.key.toLowerCase();
        }
        let actionEntries = this.keyEntries[key];
        if (actionEntries != null) {
            for (let actionEntry of actionEntries) {
                if (actionEntry.active) {
                    event.stopPropagation();
                    event.preventDefault();
                    actionEntry.action(actionEntry.identifier, null, key);
                    break;
                }
            }
        }
    }
}
//# sourceMappingURL=data:application/json;base64,