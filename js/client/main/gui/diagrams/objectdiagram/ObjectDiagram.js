import { Diagram } from "../Diagram.js";
import { ListDiagram } from "./ListDiagram.js";
export class ObjectDiagram extends Diagram {
    constructor(main, $objectDiagramDiv) {
        super($objectDiagramDiv.find('.jo_objectdiagram-canvas'), main);
        this.$objectDiagramDiv = $objectDiagramDiv;
        this.variants = [];
        this.currentVariant = null;
        this.variants.push(new ListDiagram(main, this));
        let $typeOption = $objectDiagramDiv.find('.jo_objectdiagram-type');
        $typeOption.empty();
        $typeOption.append('<option value="none" selected>Bitte ausw√§hlen...</option>');
        let i = 0;
        for (let variant of this.variants) {
            $typeOption.append('<option value="' + i + '">' + variant.getName() + '</option>');
        }
        let that = this;
        $typeOption.on('change', (e) => {
            //@ts-ignore
            let value = e.currentTarget.value;
            if (value == null) {
                if (that.currentVariant != null) {
                    that.$canvas.find('.jo_objectDiagramError').remove();
                    that.currentVariant.clear();
                }
                that.currentVariant = null;
            }
            else {
                let intValue = Number.parseInt(value);
                that.currentVariant = that.variants[intValue];
            }
            that.updateSettings();
        });
    }
    error(error) {
        this.$canvas.append('<div class="jo_objectDiagramError">' + error + '</div>');
    }
    updateSettings() {
        let $settingsDiv = this.$objectDiagramDiv.find('.jo_objectdiagram-settings');
        if (this.currentVariant != null) {
            $settingsDiv.empty();
            $settingsDiv.append(this.currentVariant.getSettingsElement());
        }
        else {
            $settingsDiv.empty();
        }
    }
    updateDiagram() {
        if (this.currentVariant != null) {
            this.currentVariant.updateDiagram();
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT2JqZWN0RGlhZ3JhbS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3NyYy9jbGllbnQvbWFpbi9ndWkvZGlhZ3JhbXMvb2JqZWN0ZGlhZ3JhbS9PYmplY3REaWFncmFtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDeEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRy9DLE1BQU0sT0FBTyxhQUFjLFNBQVEsT0FBTztJQUt0QyxZQUFZLElBQWMsRUFBVSxpQkFBc0M7UUFDdEUsS0FBSyxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRGhDLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBcUI7UUFIMUUsYUFBUSxHQUEyQixFQUFFLENBQUM7UUFDdEMsbUJBQWMsR0FBeUIsSUFBSSxDQUFDO1FBSXhDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksV0FBVyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBRWhELElBQUksV0FBVyxHQUFHLGlCQUFpQixDQUFDLElBQUksQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1FBQ25FLFdBQVcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUNwQixXQUFXLENBQUMsTUFBTSxDQUFDLDJEQUEyRCxDQUFDLENBQUM7UUFFaEYsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1YsS0FBSyxJQUFJLE9BQU8sSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQy9CLFdBQVcsQ0FBQyxNQUFNLENBQUMsaUJBQWlCLEdBQUcsQ0FBQyxHQUFHLElBQUksR0FBRyxPQUFPLENBQUMsT0FBTyxFQUFFLEdBQUcsV0FBVyxDQUFDLENBQUM7U0FDdEY7UUFFRCxJQUFJLElBQUksR0FBRyxJQUFJLENBQUM7UUFDaEIsV0FBVyxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRTtZQUMzQixZQUFZO1lBQ1osSUFBSSxLQUFLLEdBQVcsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUM7WUFDMUMsSUFBRyxLQUFLLElBQUksSUFBSSxFQUFDO2dCQUNiLElBQUcsSUFBSSxDQUFDLGNBQWMsSUFBSSxJQUFJLEVBQUM7b0JBQzNCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLHdCQUF3QixDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7b0JBQ3JELElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxFQUFFLENBQUM7aUJBQy9CO2dCQUNELElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDO2FBQzlCO2lCQUFNO2dCQUNILElBQUksUUFBUSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ3RDLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUNqRDtZQUNELElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUMxQixDQUFDLENBQUMsQ0FBQztJQUVQLENBQUM7SUFFRCxLQUFLLENBQUMsS0FBYTtRQUNmLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLHFDQUFxQyxHQUFHLEtBQUssR0FBRyxRQUFRLENBQUMsQ0FBQTtJQUNqRixDQUFDO0lBR0QsY0FBYztRQUNWLElBQUksWUFBWSxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsNEJBQTRCLENBQUMsQ0FBQztRQUM3RSxJQUFHLElBQUksQ0FBQyxjQUFjLElBQUksSUFBSSxFQUFDO1lBQzNCLFlBQVksQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUNyQixZQUFZLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsa0JBQWtCLEVBQUUsQ0FBQyxDQUFDO1NBQ2pFO2FBQU07WUFDSCxZQUFZLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDeEI7SUFDTCxDQUFDO0lBRUQsYUFBYTtRQUNULElBQUcsSUFBSSxDQUFDLGNBQWMsSUFBSSxJQUFJLEVBQUM7WUFDM0IsSUFBSSxDQUFDLGNBQWMsQ0FBQyxhQUFhLEVBQUUsQ0FBQztTQUN2QztJQUNMLENBQUM7Q0FFSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9iamVjdERpYWdyYW1WYXJpYW50IH0gZnJvbSBcIi4vT2JqZWN0RGlhZ3JhbVZhcmlhbnQuanNcIjtcclxuaW1wb3J0IHsgTWFpbiB9IGZyb20gXCIuLi8uLi8uLi9NYWluLmpzXCI7XHJcbmltcG9ydCB7IERpYWdyYW0gfSBmcm9tIFwiLi4vRGlhZ3JhbS5qc1wiO1xyXG5pbXBvcnQgeyBMaXN0RGlhZ3JhbSB9IGZyb20gXCIuL0xpc3REaWFncmFtLmpzXCI7XHJcbmltcG9ydCB7IE1haW5CYXNlIH0gZnJvbSBcIi4uLy4uLy4uL01haW5CYXNlLmpzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgT2JqZWN0RGlhZ3JhbSBleHRlbmRzIERpYWdyYW0ge1xyXG5cclxuICAgIHZhcmlhbnRzOiBPYmplY3REaWFncmFtVmFyaWFudFtdID0gW107XHJcbiAgICBjdXJyZW50VmFyaWFudDogT2JqZWN0RGlhZ3JhbVZhcmlhbnQgPSBudWxsO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG1haW46IE1haW5CYXNlLCBwcml2YXRlICRvYmplY3REaWFncmFtRGl2OiBKUXVlcnk8SFRNTEVsZW1lbnQ+KSB7XHJcbiAgICAgICAgc3VwZXIoJG9iamVjdERpYWdyYW1EaXYuZmluZCgnLmpvX29iamVjdGRpYWdyYW0tY2FudmFzJyksIG1haW4pO1xyXG4gICAgICAgIHRoaXMudmFyaWFudHMucHVzaChuZXcgTGlzdERpYWdyYW0obWFpbiwgdGhpcykpO1xyXG5cclxuICAgICAgICBsZXQgJHR5cGVPcHRpb24gPSAkb2JqZWN0RGlhZ3JhbURpdi5maW5kKCcuam9fb2JqZWN0ZGlhZ3JhbS10eXBlJyk7XHJcbiAgICAgICAgJHR5cGVPcHRpb24uZW1wdHkoKTtcclxuICAgICAgICAkdHlwZU9wdGlvbi5hcHBlbmQoJzxvcHRpb24gdmFsdWU9XCJub25lXCIgc2VsZWN0ZWQ+Qml0dGUgYXVzd8OkaGxlbi4uLjwvb3B0aW9uPicpO1xyXG5cclxuICAgICAgICBsZXQgaSA9IDA7XHJcbiAgICAgICAgZm9yIChsZXQgdmFyaWFudCBvZiB0aGlzLnZhcmlhbnRzKSB7XHJcbiAgICAgICAgICAgICR0eXBlT3B0aW9uLmFwcGVuZCgnPG9wdGlvbiB2YWx1ZT1cIicgKyBpICsgJ1wiPicgKyB2YXJpYW50LmdldE5hbWUoKSArICc8L29wdGlvbj4nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCB0aGF0ID0gdGhpcztcclxuICAgICAgICAkdHlwZU9wdGlvbi5vbignY2hhbmdlJywgKGUpID0+IHtcclxuICAgICAgICAgICAgLy9AdHMtaWdub3JlXHJcbiAgICAgICAgICAgIGxldCB2YWx1ZTogc3RyaW5nID0gZS5jdXJyZW50VGFyZ2V0LnZhbHVlO1xyXG4gICAgICAgICAgICBpZih2YWx1ZSA9PSBudWxsKXtcclxuICAgICAgICAgICAgICAgIGlmKHRoYXQuY3VycmVudFZhcmlhbnQgIT0gbnVsbCl7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC4kY2FudmFzLmZpbmQoJy5qb19vYmplY3REaWFncmFtRXJyb3InKS5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGF0LmN1cnJlbnRWYXJpYW50LmNsZWFyKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGF0LmN1cnJlbnRWYXJpYW50ID0gbnVsbDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGxldCBpbnRWYWx1ZSA9IE51bWJlci5wYXJzZUludCh2YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB0aGF0LmN1cnJlbnRWYXJpYW50ID0gdGhhdC52YXJpYW50c1tpbnRWYWx1ZV07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhhdC51cGRhdGVTZXR0aW5ncygpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBlcnJvcihlcnJvcjogc3RyaW5nKXtcclxuICAgICAgICB0aGlzLiRjYW52YXMuYXBwZW5kKCc8ZGl2IGNsYXNzPVwiam9fb2JqZWN0RGlhZ3JhbUVycm9yXCI+JyArIGVycm9yICsgJzwvZGl2PicpXHJcbiAgICB9XHJcblxyXG5cclxuICAgIHVwZGF0ZVNldHRpbmdzKCl7XHJcbiAgICAgICAgbGV0ICRzZXR0aW5nc0RpdiA9IHRoaXMuJG9iamVjdERpYWdyYW1EaXYuZmluZCgnLmpvX29iamVjdGRpYWdyYW0tc2V0dGluZ3MnKTtcclxuICAgICAgICBpZih0aGlzLmN1cnJlbnRWYXJpYW50ICE9IG51bGwpe1xyXG4gICAgICAgICAgICAkc2V0dGluZ3NEaXYuZW1wdHkoKTtcclxuICAgICAgICAgICAgJHNldHRpbmdzRGl2LmFwcGVuZCh0aGlzLmN1cnJlbnRWYXJpYW50LmdldFNldHRpbmdzRWxlbWVudCgpKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAkc2V0dGluZ3NEaXYuZW1wdHkoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHVwZGF0ZURpYWdyYW0oKXtcclxuICAgICAgICBpZih0aGlzLmN1cnJlbnRWYXJpYW50ICE9IG51bGwpe1xyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRWYXJpYW50LnVwZGF0ZURpYWdyYW0oKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59Il19