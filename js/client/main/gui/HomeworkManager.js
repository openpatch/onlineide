import { makeDiv } from "../../tools/HtmlTools.js";
import { stringToDate, dateToStringWithoutTime } from "../../tools/StringTools.js";
export class HomeworkManager {
    constructor(main, $bottomDiv) {
        this.main = main;
        this.$bottomDiv = $bottomDiv;
        this.showRevisionActive = false;
        this.$homeworkTab = $bottomDiv.find('.jo_tabs>.jo_homeworkTab');
    }
    initGUI() {
        let that = this;
        this.$homeworkTab.append(this.$homeworkTabLeft = makeDiv("", "jo_homeworkTabLeft jo_scrollable"));
        this.$homeworkTab.append(this.$homeworkTabRight = makeDiv("", "jo_homeworkTabRight jo_scrollable"));
        jQuery('#view-mode').prepend(this.$showRevisionButton = makeDiv("", "jo_button jo_active jo_homeworkRevisionButton", ""));
        this.$showRevisionButton.on("click", () => {
            if (this.showRevisionActive) {
                this.hideRevision();
            }
            else {
                this.showRevision(that.main.getCurrentlyEditedModule());
            }
        });
        this.$showRevisionButton.hide();
        jQuery('#diffEditor').hide();
    }
    showHomeWorkRevisionButton() {
        this.$showRevisionButton.text(this.showRevisionActive ? "Normalansicht" : "Korrekturen zeigen");
        this.$showRevisionButton.show();
    }
    hideHomeworkRevisionButton() {
        this.$showRevisionButton.hide();
    }
    showRevision(module) {
        module.file.text = module.getProgramTextFromMonacoModel();
        let file = module.file;
        jQuery('#editor').hide();
        jQuery('#diffEditor').show();
        var originalModel = monaco.editor.createModel(file.text_before_revision, "myJava");
        var modifiedModel = monaco.editor.createModel(file.text, "myJava");
        this.diffEditor = monaco.editor.createDiffEditor(document.getElementById("diffEditor"), {
            // You can optionally disable the resizing
            enableSplitViewResizing: true,
            originalEditable: false,
            readOnly: true,
            // Render the diff inline
            renderSideBySide: true
        });
        this.diffEditor.setModel({
            original: originalModel,
            modified: modifiedModel
        });
        this.showRevisionActive = true;
        this.showHomeWorkRevisionButton();
    }
    hideRevision() {
        if (this.showRevisionActive) {
            jQuery('#diffEditor').hide();
            this.diffEditor.dispose();
            this.diffEditor = null;
            jQuery('#editor').show();
            this.showRevisionActive = false;
            this.showHomeWorkRevisionButton();
        }
    }
    attachToWorkspaces(workspaces) {
        let daysWithModules = [];
        let map = {};
        workspaces.forEach(ws => {
            ws.moduleStore.getModules(false).forEach(module => {
                let dateString = module.file.submitted_date;
                if (dateString != null) {
                    let date = stringToDate(dateString);
                    let dateWithoutTime = dateToStringWithoutTime(date);
                    let dwm = map[dateWithoutTime];
                    if (dwm == null) {
                        dwm = {
                            date: date,
                            day: dateWithoutTime,
                            modules: []
                        };
                        map[dateWithoutTime] = dwm;
                        daysWithModules.push(dwm);
                    }
                    dwm.modules.push({ module: module, workspace: ws });
                }
            });
        });
        this.$homeworkTabLeft.empty();
        this.$homeworkTabRight.empty();
        let that = this;
        this.$homeworkTabLeft.append(makeDiv("", "jo_homeworkHeading", "Abgabetage:"));
        daysWithModules.sort((a, b) => {
            if (a.date.getFullYear() != b.date.getFullYear())
                return -Math.sign(a.date.getFullYear() - b.date.getFullYear());
            if (a.date.getMonth() != b.date.getMonth())
                return -Math.sign(a.date.getMonth() - b.date.getMonth());
            if (a.date.getDate() != b.date.getDate())
                return -Math.sign(a.date.getDate() - b.date.getDate());
            return 0;
        });
        let first = true;
        daysWithModules.forEach(dwm => {
            dwm.modules.sort((m1, m2) => m1.module.file.name.localeCompare(m2.module.file.name));
            let $div = makeDiv("", "jo_homeworkDate", dwm.day);
            this.$homeworkTabLeft.append($div);
            $div.on("click", (e) => {
                this.$homeworkTabLeft.find('.jo_homeworkDate').removeClass('jo_active');
                $div.addClass('jo_active');
                that.select(dwm);
            });
            if (first) {
                first = false;
                $div.addClass('jo_active');
                that.select(dwm);
            }
        });
    }
    select(dwm) {
        this.$homeworkTabRight.empty();
        this.$homeworkTabRight.append(makeDiv("", "jo_homeworkHeading", "Abgegebene Dateien:"));
        let that = this;
        dwm.modules.forEach(moduleWithWorkspace => {
            let $div = jQuery(`<div class="jo_homeworkEntry">Workspace <span class="jo_homework-workspace">
                    ${moduleWithWorkspace.workspace.name}</span>, Datei <span class="jo_homework-file">
                    ${moduleWithWorkspace.module.file.name}</span> (Abgabe: ${moduleWithWorkspace.module.file.submitted_date} )</div>`);
            that.$homeworkTabRight.append($div);
            $div.on("click", () => {
                that.main.projectExplorer.setWorkspaceActive(moduleWithWorkspace.workspace, true);
                that.main.projectExplorer.setModuleActive(moduleWithWorkspace.module);
                that.main.projectExplorer.fileListPanel.select(moduleWithWorkspace.module, false);
            });
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSG9tZXdvcmtNYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vc3JjL2NsaWVudC9tYWluL2d1aS9Ib21ld29ya01hbmFnZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBR25ELE9BQU8sRUFBRSxZQUFZLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQWNuRixNQUFNLE9BQU8sZUFBZTtJQVd4QixZQUFvQixJQUFVLEVBQVMsVUFBK0I7UUFBbEQsU0FBSSxHQUFKLElBQUksQ0FBTTtRQUFTLGVBQVUsR0FBVixVQUFVLENBQXFCO1FBSnRFLHVCQUFrQixHQUFZLEtBQUssQ0FBQztRQUtoQyxJQUFJLENBQUMsWUFBWSxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsMEJBQTBCLENBQUMsQ0FBQztJQUNwRSxDQUFDO0lBRUQsT0FBTztRQUNILElBQUksSUFBSSxHQUFHLElBQUksQ0FBQztRQUNoQixJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsT0FBTyxDQUFDLEVBQUUsRUFBRSxrQ0FBa0MsQ0FBQyxDQUFDLENBQUM7UUFDbEcsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLE9BQU8sQ0FBQyxFQUFFLEVBQUUsbUNBQW1DLENBQUMsQ0FBQyxDQUFDO1FBQ3BHLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLG1CQUFtQixHQUFHLE9BQU8sQ0FBQyxFQUFFLEVBQUUsK0NBQStDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUMxSCxJQUFJLENBQUMsbUJBQW1CLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUU7WUFDdEMsSUFBSSxJQUFJLENBQUMsa0JBQWtCLEVBQUU7Z0JBQ3pC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Q0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLGtCQUFrQixDQUFDLG1CQUFtQixDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztnQkFDbEYsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsZUFBZSxDQUFDLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUN0RSxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLG1CQUFtQixDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztZQUMxRixDQUFDLENBQUMsQ0FBQztRQUNQLENBQUMsQ0FBQyxDQUFBO0lBRU4sQ0FBQztDQUlKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWFpbkJhc2UgfSBmcm9tIFwiLi4vTWFpbkJhc2UuanNcIjtcclxuaW1wb3J0IHsgbWFrZURpdiB9IGZyb20gXCIuLi8uLi90b29scy9IdG1sVG9vbHMuanNcIjtcclxuaW1wb3J0IHsgV29ya3NwYWNlIH0gZnJvbSBcIi4uLy4uL3dvcmtzcGFjZS9Xb3Jrc3BhY2UuanNcIjtcclxuaW1wb3J0IHsgRmlsZSwgTW9kdWxlIH0gZnJvbSBcIi4uLy4uL2NvbXBpbGVyL3BhcnNlci9Nb2R1bGUuanNcIjtcclxuaW1wb3J0IHsgc3RyaW5nVG9EYXRlLCBkYXRlVG9TdHJpbmdXaXRob3V0VGltZSB9IGZyb20gXCIuLi8uLi90b29scy9TdHJpbmdUb29scy5qc1wiO1xyXG5pbXBvcnQgeyBNYWluIH0gZnJvbSBcIi4uL01haW4uanNcIjtcclxuXHJcbnR5cGUgTW9kdWxlV2l0aFdvcmtzcGFjZSA9IHtcclxuICAgIG1vZHVsZTogTW9kdWxlLFxyXG4gICAgd29ya3NwYWNlOiBXb3Jrc3BhY2VcclxufVxyXG5cclxudHlwZSBEYXlXaXRoTW9kdWxlcyA9IHtcclxuICAgIGRhdGU6IERhdGU7XHJcbiAgICBkYXk6IHN0cmluZztcclxuICAgIG1vZHVsZXM6IE1vZHVsZVdpdGhXb3Jrc3BhY2VbXTtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEhvbWV3b3JrTWFuYWdlciB7XHJcblxyXG4gICAgJGhvbWV3b3JrVGFiOiBKUXVlcnk8SFRNTEVsZW1lbnQ+O1xyXG4gICAgJGhvbWV3b3JrVGFiTGVmdDogSlF1ZXJ5PEhUTUxFbGVtZW50PjtcclxuICAgICRob21ld29ya1RhYlJpZ2h0OiBKUXVlcnk8SFRNTEVsZW1lbnQ+O1xyXG5cclxuICAgICRzaG93UmV2aXNpb25CdXR0b246IEpRdWVyeTxIVE1MRWxlbWVudD47XHJcbiAgICBzaG93UmV2aXNpb25BY3RpdmU6IGJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICBkaWZmRWRpdG9yOiBtb25hY28uZWRpdG9yLklTdGFuZGFsb25lRGlmZkVkaXRvcjtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIG1haW46IE1haW4sIHB1YmxpYyAkYm90dG9tRGl2OiBKUXVlcnk8SFRNTEVsZW1lbnQ+KSB7XHJcbiAgICAgICAgdGhpcy4kaG9tZXdvcmtUYWIgPSAkYm90dG9tRGl2LmZpbmQoJy5qb190YWJzPi5qb19ob21ld29ya1RhYicpO1xyXG4gICAgfVxyXG5cclxuICAgIGluaXRHVUkoKSB7XHJcbiAgICAgICAgbGV0IHRoYXQgPSB0aGlzO1xyXG4gICAgICAgIHRoaXMuJGhvbWV3b3JrVGFiLmFwcGVuZCh0aGlzLiRob21ld29ya1RhYkxlZnQgPSBtYWtlRGl2KFwiXCIsIFwiam9faG9tZXdvcmtUYWJMZWZ0IGpvX3Njcm9sbGFibGVcIikpO1xyXG4gICAgICAgIHRoaXMuJGhvbWV3b3JrVGFiLmFwcGVuZCh0aGlzLiRob21ld29ya1RhYlJpZ2h0ID0gbWFrZURpdihcIlwiLCBcImpvX2hvbWV3b3JrVGFiUmlnaHQgam9fc2Nyb2xsYWJsZVwiKSk7XHJcbiAgICAgICAgalF1ZXJ5KCcjdmlldy1tb2RlJykucHJlcGVuZCh0aGlzLiRzaG93UmV2aXNpb25CdXR0b24gPSBtYWtlRGl2KFwiXCIsIFwiam9fYnV0dG9uIGpvX2FjdGl2ZSBqb19ob21ld29ya1JldmlzaW9uQnV0dG9uXCIsIFwiXCIpKTtcclxuICAgICAgICB0aGlzLiRzaG93UmV2aXNpb25CdXR0b24ub24oXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNob3dSZXZpc2lvbkFjdGl2ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5oaWRlUmV2aXNpb24oKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2hvd1JldmlzaW9uKHRoYXQubWFpbi5nZXRDdXJyZW50bHlFZGl0ZWRNb2R1bGUoKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLiRzaG93UmV2aXNpb25CdXR0b24uaGlkZSgpO1xyXG4gICAgICAgIGpRdWVyeSgnI2RpZmZFZGl0b3InKS5oaWRlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2hvd0hvbWVXb3JrUmV2aXNpb25CdXR0b24oKSB7XHJcbiAgICAgICAgdGhpcy4kc2hvd1JldmlzaW9uQnV0dG9uLnRleHQodGhpcy5zaG93UmV2aXNpb25BY3RpdmUgPyBcIk5vcm1hbGFuc2ljaHRcIiA6IFwiS29ycmVrdHVyZW4gemVpZ2VuXCIpO1xyXG4gICAgICAgIHRoaXMuJHNob3dSZXZpc2lvbkJ1dHRvbi5zaG93KCk7XHJcbiAgICB9XHJcblxyXG4gICAgaGlkZUhvbWV3b3JrUmV2aXNpb25CdXR0b24oKSB7XHJcbiAgICAgICAgdGhpcy4kc2hvd1JldmlzaW9uQnV0dG9uLmhpZGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBzaG93UmV2aXNpb24obW9kdWxlOiBNb2R1bGUpIHtcclxuXHJcbiAgICAgICAgbW9kdWxlLmZpbGUudGV4dCA9IG1vZHVsZS5nZXRQcm9ncmFtVGV4dEZyb21Nb25hY29Nb2RlbCgpO1xyXG4gICAgICAgIGxldCBmaWxlID0gbW9kdWxlLmZpbGU7XHJcblxyXG4gICAgICAgIGpRdWVyeSgnI2VkaXRvcicpLmhpZGUoKTtcclxuICAgICAgICBqUXVlcnkoJyNkaWZmRWRpdG9yJykuc2hvdygpO1xyXG5cclxuICAgICAgICB2YXIgb3JpZ2luYWxNb2RlbCA9IG1vbmFjby5lZGl0b3IuY3JlYXRlTW9kZWwoZmlsZS50ZXh0X2JlZm9yZV9yZXZpc2lvbiwgXCJteUphdmFcIik7XHJcbiAgICAgICAgdmFyIG1vZGlmaWVkTW9kZWwgPSBtb25hY28uZWRpdG9yLmNyZWF0ZU1vZGVsKGZpbGUudGV4dCwgXCJteUphdmFcIik7XHJcblxyXG4gICAgICAgIHRoaXMuZGlmZkVkaXRvciA9IG1vbmFjby5lZGl0b3IuY3JlYXRlRGlmZkVkaXRvcihkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcImRpZmZFZGl0b3JcIiksIHtcclxuICAgICAgICAgICAgLy8gWW91IGNhbiBvcHRpb25hbGx5IGRpc2FibGUgdGhlIHJlc2l6aW5nXHJcbiAgICAgICAgICAgIGVuYWJsZVNwbGl0Vmlld1Jlc2l6aW5nOiB0cnVlLFxyXG4gICAgICAgICAgICBvcmlnaW5hbEVkaXRhYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgcmVhZE9ubHk6IHRydWUsXHJcbiAgICAgICAgICAgIC8vIFJlbmRlciB0aGUgZGlmZiBpbmxpbmVcclxuICAgICAgICAgICAgcmVuZGVyU2lkZUJ5U2lkZTogdHJ1ZVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLmRpZmZFZGl0b3Iuc2V0TW9kZWwoe1xyXG4gICAgICAgICAgICBvcmlnaW5hbDogb3JpZ2luYWxNb2RlbCxcclxuICAgICAgICAgICAgbW9kaWZpZWQ6IG1vZGlmaWVkTW9kZWxcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5zaG93UmV2aXNpb25BY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuc2hvd0hvbWVXb3JrUmV2aXNpb25CdXR0b24oKTtcclxuICAgIH1cclxuXHJcbiAgICBoaWRlUmV2aXNpb24oKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2hvd1JldmlzaW9uQWN0aXZlKSB7XHJcblxyXG4gICAgICAgICAgICBqUXVlcnkoJyNkaWZmRWRpdG9yJykuaGlkZSgpO1xyXG4gICAgICAgICAgICB0aGlzLmRpZmZFZGl0b3IuZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICB0aGlzLmRpZmZFZGl0b3IgPSBudWxsO1xyXG4gICAgICAgICAgICBqUXVlcnkoJyNlZGl0b3InKS5zaG93KCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnNob3dSZXZpc2lvbkFjdGl2ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLnNob3dIb21lV29ya1JldmlzaW9uQnV0dG9uKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBhdHRhY2hUb1dvcmtzcGFjZXMod29ya3NwYWNlczogV29ya3NwYWNlW10pIHtcclxuXHJcbiAgICAgICAgbGV0IGRheXNXaXRoTW9kdWxlczogRGF5V2l0aE1vZHVsZXNbXSA9IFtdO1xyXG4gICAgICAgIGxldCBtYXA6IHsgW2RheTogc3RyaW5nXTogRGF5V2l0aE1vZHVsZXMgfSA9IHt9O1xyXG5cclxuICAgICAgICB3b3Jrc3BhY2VzLmZvckVhY2god3MgPT4ge1xyXG4gICAgICAgICAgICB3cy5tb2R1bGVTdG9yZS5nZXRNb2R1bGVzKGZhbHNlKS5mb3JFYWNoKG1vZHVsZSA9PiB7XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IGRhdGVTdHJpbmcgPSBtb2R1bGUuZmlsZS5zdWJtaXR0ZWRfZGF0ZTtcclxuICAgICAgICAgICAgICAgIGlmIChkYXRlU3RyaW5nICE9IG51bGwpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGRhdGU6IERhdGUgPSBzdHJpbmdUb0RhdGUoZGF0ZVN0cmluZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGRhdGVXaXRob3V0VGltZSA9IGRhdGVUb1N0cmluZ1dpdGhvdXRUaW1lKGRhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBkd206IERheVdpdGhNb2R1bGVzID0gbWFwW2RhdGVXaXRob3V0VGltZV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGR3bSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGR3bSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGU6IGRhdGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXk6IGRhdGVXaXRob3V0VGltZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZHVsZXM6IFtdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcFtkYXRlV2l0aG91dFRpbWVdID0gZHdtO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXlzV2l0aE1vZHVsZXMucHVzaChkd20pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBkd20ubW9kdWxlcy5wdXNoKHttb2R1bGU6IG1vZHVsZSwgd29ya3NwYWNlOiB3c30pO1xyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy4kaG9tZXdvcmtUYWJMZWZ0LmVtcHR5KCk7XHJcbiAgICAgICAgdGhpcy4kaG9tZXdvcmtUYWJSaWdodC5lbXB0eSgpO1xyXG5cclxuICAgICAgICBsZXQgdGhhdCA9IHRoaXM7XHJcblxyXG4gICAgICAgIHRoaXMuJGhvbWV3b3JrVGFiTGVmdC5hcHBlbmQobWFrZURpdihcIlwiLCBcImpvX2hvbWV3b3JrSGVhZGluZ1wiLCBcIkFiZ2FiZXRhZ2U6XCIpKTtcclxuXHJcblxyXG4gICAgICAgIGRheXNXaXRoTW9kdWxlcy5zb3J0KChhLCBiKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChhLmRhdGUuZ2V0RnVsbFllYXIoKSAhPSBiLmRhdGUuZ2V0RnVsbFllYXIoKSkgcmV0dXJuIC1NYXRoLnNpZ24oYS5kYXRlLmdldEZ1bGxZZWFyKCkgLSBiLmRhdGUuZ2V0RnVsbFllYXIoKSk7XHJcbiAgICAgICAgICAgIGlmIChhLmRhdGUuZ2V0TW9udGgoKSAhPSBiLmRhdGUuZ2V0TW9udGgoKSkgcmV0dXJuIC1NYXRoLnNpZ24oYS5kYXRlLmdldE1vbnRoKCkgLSBiLmRhdGUuZ2V0TW9udGgoKSk7XHJcbiAgICAgICAgICAgIGlmIChhLmRhdGUuZ2V0RGF0ZSgpICE9IGIuZGF0ZS5nZXREYXRlKCkpIHJldHVybiAtTWF0aC5zaWduKGEuZGF0ZS5nZXREYXRlKCkgLSBiLmRhdGUuZ2V0RGF0ZSgpKTtcclxuICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGxldCBmaXJzdDogYm9vbGVhbiA9IHRydWU7XHJcblxyXG4gICAgICAgIGRheXNXaXRoTW9kdWxlcy5mb3JFYWNoKGR3bSA9PiB7XHJcblxyXG4gICAgICAgICAgICBkd20ubW9kdWxlcy5zb3J0KChtMSwgbTIpID0+IG0xLm1vZHVsZS5maWxlLm5hbWUubG9jYWxlQ29tcGFyZShtMi5tb2R1bGUuZmlsZS5uYW1lKSk7XHJcblxyXG4gICAgICAgICAgICBsZXQgJGRpdiA9IG1ha2VEaXYoXCJcIiwgXCJqb19ob21ld29ya0RhdGVcIiwgZHdtLmRheSk7XHJcbiAgICAgICAgICAgIHRoaXMuJGhvbWV3b3JrVGFiTGVmdC5hcHBlbmQoJGRpdik7XHJcblxyXG4gICAgICAgICAgICAkZGl2Lm9uKFwiY2xpY2tcIiwgKGUpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuJGhvbWV3b3JrVGFiTGVmdC5maW5kKCcuam9faG9tZXdvcmtEYXRlJykucmVtb3ZlQ2xhc3MoJ2pvX2FjdGl2ZScpO1xyXG4gICAgICAgICAgICAgICAgJGRpdi5hZGRDbGFzcygnam9fYWN0aXZlJyk7XHJcbiAgICAgICAgICAgICAgICB0aGF0LnNlbGVjdChkd20pO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGlmIChmaXJzdCkge1xyXG4gICAgICAgICAgICAgICAgZmlyc3QgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICRkaXYuYWRkQ2xhc3MoJ2pvX2FjdGl2ZScpO1xyXG4gICAgICAgICAgICAgICAgdGhhdC5zZWxlY3QoZHdtKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9KTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgc2VsZWN0KGR3bTogRGF5V2l0aE1vZHVsZXMpIHtcclxuICAgICAgICB0aGlzLiRob21ld29ya1RhYlJpZ2h0LmVtcHR5KCk7XHJcbiAgICAgICAgdGhpcy4kaG9tZXdvcmtUYWJSaWdodC5hcHBlbmQobWFrZURpdihcIlwiLCBcImpvX2hvbWV3b3JrSGVhZGluZ1wiLCBcIkFiZ2VnZWJlbmUgRGF0ZWllbjpcIikpO1xyXG4gICAgICAgIGxldCB0aGF0ID0gdGhpcztcclxuICAgICAgICBkd20ubW9kdWxlcy5mb3JFYWNoKG1vZHVsZVdpdGhXb3Jrc3BhY2UgPT4ge1xyXG4gICAgICAgICAgICBsZXQgJGRpdiA9IGpRdWVyeShgPGRpdiBjbGFzcz1cImpvX2hvbWV3b3JrRW50cnlcIj5Xb3Jrc3BhY2UgPHNwYW4gY2xhc3M9XCJqb19ob21ld29yay13b3Jrc3BhY2VcIj5cclxuICAgICAgICAgICAgICAgICAgICAke21vZHVsZVdpdGhXb3Jrc3BhY2Uud29ya3NwYWNlLm5hbWV9PC9zcGFuPiwgRGF0ZWkgPHNwYW4gY2xhc3M9XCJqb19ob21ld29yay1maWxlXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgJHttb2R1bGVXaXRoV29ya3NwYWNlLm1vZHVsZS5maWxlLm5hbWV9PC9zcGFuPiAoQWJnYWJlOiAke21vZHVsZVdpdGhXb3Jrc3BhY2UubW9kdWxlLmZpbGUuc3VibWl0dGVkX2RhdGV9ICk8L2Rpdj5gKTtcclxuICAgICAgICAgICAgdGhhdC4kaG9tZXdvcmtUYWJSaWdodC5hcHBlbmQoJGRpdik7XHJcbiAgICAgICAgICAgICRkaXYub24oXCJjbGlja1wiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5tYWluLnByb2plY3RFeHBsb3Jlci5zZXRXb3Jrc3BhY2VBY3RpdmUobW9kdWxlV2l0aFdvcmtzcGFjZS53b3Jrc3BhY2UsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoYXQubWFpbi5wcm9qZWN0RXhwbG9yZXIuc2V0TW9kdWxlQWN0aXZlKG1vZHVsZVdpdGhXb3Jrc3BhY2UubW9kdWxlKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGF0Lm1haW4ucHJvamVjdEV4cGxvcmVyLmZpbGVMaXN0UGFuZWwuc2VsZWN0KG1vZHVsZVdpdGhXb3Jrc3BhY2UubW9kdWxlLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgXHJcbiAgICB9XHJcblxyXG5cclxuXHJcbn0iXX0=