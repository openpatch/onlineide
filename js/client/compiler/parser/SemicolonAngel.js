export class SemicolonAngel {
    constructor(main) {
        this.main = main;
        this.semicolonPositions = [];
    }
    startRegistering() {
        this.semicolonPositions.forEach(p => p.isThereAgain = false);
        this.time = new Date().getTime();
    }
    register(position, module) {
        let oldEvidence = this.semicolonPositions.find(p => p.position.line == position.line && p.position.column == position.column);
        if (oldEvidence) {
            oldEvidence.isThereAgain = true;
        }
        else {
            this.semicolonPositions.push({ position: position, firstSeenMs: this.time, isThereAgain: true, module: module });
        }
    }
    healSemicolons() {
        let time = new Date().getTime();
        this.semicolonPositions = this.semicolonPositions.filter(p => p.isThereAgain);
        let currentlyEditedModule = this.main.getCurrentlyEditedModule();
        let cursorLine = this.main.getMonacoEditor().getPosition().lineNumber;
        this.semicolonPositions.filter(p => time - p.firstSeenMs > 2000).forEach(p => {
            let isCurrentModule = p.module.file.id != null && p.module.file.id == currentlyEditedModule.file.id;
            let editOperations = [
                {
                    range: new monaco.Range(p.position.line, p.position.column, p.position.line, p.position.column),
                    text: ";",
                    forceMoveMarkers: true
                }
            ];
            if (isCurrentModule) {
                if (Math.abs(cursorLine - p.position.line) > 1) {
                    let editor = this.main.getMonacoEditor();
                    const selection = editor.getSelection();
                    editor.executeEdits('Semicolon-Angel', editOperations);
                    editor.setSelection(selection);
                    this.semicolonPositions.splice(this.semicolonPositions.indexOf(p), 1);
                }
            }
        });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2VtaWNvbG9uQW5nZWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvY2xpZW50L2NvbXBpbGVyL3BhcnNlci9TZW1pY29sb25BbmdlbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFXQSxNQUFNLE9BQU8sY0FBYztJQUt2QixZQUFvQixJQUFjO1FBQWQsU0FBSSxHQUFKLElBQUksQ0FBVTtRQUhsQyx1QkFBa0IsR0FBd0IsRUFBRSxDQUFDO0lBSzdDLENBQUM7SUFFRCxnQkFBZ0I7UUFDWixJQUFJLENBQUMsa0JBQWtCLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUMsQ0FBQztRQUM3RCxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDckMsQ0FBQztJQUVELFFBQVEsQ0FBQyxRQUFzQixFQUFFLE1BQWM7UUFDM0MsSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsSUFBSSxJQUFJLFFBQVEsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxNQUFNLElBQUksUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzlILElBQUcsV0FBVyxFQUFDO1lBQ1gsV0FBVyxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUM7U0FDbkM7YUFBTTtZQUNILElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsRUFBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLFlBQVksRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBQyxDQUFDLENBQUM7U0FDbEg7SUFDTCxDQUFDO0lBRUQsY0FBYztRQUNWLElBQUksSUFBSSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDaEMsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFOUUsSUFBSSxxQkFBcUIsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLHdCQUF3QixFQUFFLENBQUM7UUFDakUsSUFBSSxVQUFVLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxVQUFVLENBQUM7UUFFdEUsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUV6RSxJQUFJLGVBQWUsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksSUFBSSxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO1lBRXBHLElBQUksY0FBYyxHQUFtRDtnQkFDakU7b0JBQ0ksS0FBSyxFQUFFLElBQUksTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztvQkFDL0YsSUFBSSxFQUFFLEdBQUc7b0JBQ1QsZ0JBQWdCLEVBQUUsSUFBSTtpQkFDekI7YUFDSixDQUFBO1lBRUQsSUFBRyxlQUFlLEVBQUM7Z0JBQ2YsSUFBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBQztvQkFDMUMsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztvQkFDekMsTUFBTSxTQUFTLEdBQUcsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDO29CQUN4QyxNQUFNLENBQUMsWUFBWSxDQUFDLGlCQUFpQixFQUFFLGNBQWMsQ0FBQyxDQUFDO29CQUN2RCxNQUFNLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDO29CQUMvQixJQUFJLENBQUMsa0JBQWtCLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7aUJBQ3pFO2FBQ0o7UUFHTCxDQUFDLENBQUMsQ0FBQztJQUVQLENBQUM7Q0FFSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRleHRQb3NpdGlvbiB9IGZyb20gXCIuLi9sZXhlci9Ub2tlblwiO1xyXG5pbXBvcnQgeyBNb2R1bGUgfSBmcm9tIFwiLi9Nb2R1bGVcIjtcclxuaW1wb3J0IHsgTWFpbkJhc2UgfSBmcm9tIFwiLi4vLi4vbWFpbi9NYWluQmFzZVwiO1xyXG5cclxudHlwZSBTZW1pY29sb25Qb3NpdGlvbiA9IHtcclxuICAgIHBvc2l0aW9uOiBUZXh0UG9zaXRpb247XHJcbiAgICBtb2R1bGU6IE1vZHVsZTtcclxuICAgIGZpcnN0U2Vlbk1zOiBudW1iZXI7XHJcbiAgICBpc1RoZXJlQWdhaW46IGJvb2xlYW47XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBTZW1pY29sb25BbmdlbCB7XHJcbiAgICBcclxuICAgIHNlbWljb2xvblBvc2l0aW9uczogU2VtaWNvbG9uUG9zaXRpb25bXSA9IFtdO1xyXG4gICAgdGltZTogbnVtYmVyO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgbWFpbjogTWFpbkJhc2Upe1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBzdGFydFJlZ2lzdGVyaW5nKCl7XHJcbiAgICAgICAgdGhpcy5zZW1pY29sb25Qb3NpdGlvbnMuZm9yRWFjaChwID0+IHAuaXNUaGVyZUFnYWluID0gZmFsc2UpO1xyXG4gICAgICAgIHRoaXMudGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlZ2lzdGVyKHBvc2l0aW9uOiBUZXh0UG9zaXRpb24sIG1vZHVsZTogTW9kdWxlKXtcclxuICAgICAgICBsZXQgb2xkRXZpZGVuY2UgPSB0aGlzLnNlbWljb2xvblBvc2l0aW9ucy5maW5kKHAgPT4gcC5wb3NpdGlvbi5saW5lID09IHBvc2l0aW9uLmxpbmUgJiYgcC5wb3NpdGlvbi5jb2x1bW4gPT0gcG9zaXRpb24uY29sdW1uKTtcclxuICAgICAgICBpZihvbGRFdmlkZW5jZSl7XHJcbiAgICAgICAgICAgIG9sZEV2aWRlbmNlLmlzVGhlcmVBZ2FpbiA9IHRydWU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5zZW1pY29sb25Qb3NpdGlvbnMucHVzaCh7cG9zaXRpb246IHBvc2l0aW9uLCBmaXJzdFNlZW5NczogdGhpcy50aW1lLCBpc1RoZXJlQWdhaW46IHRydWUsIG1vZHVsZTogbW9kdWxlfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGhlYWxTZW1pY29sb25zKCl7XHJcbiAgICAgICAgbGV0IHRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgICAgICB0aGlzLnNlbWljb2xvblBvc2l0aW9ucyA9IHRoaXMuc2VtaWNvbG9uUG9zaXRpb25zLmZpbHRlcihwID0+IHAuaXNUaGVyZUFnYWluKTtcclxuXHJcbiAgICAgICAgbGV0IGN1cnJlbnRseUVkaXRlZE1vZHVsZSA9IHRoaXMubWFpbi5nZXRDdXJyZW50bHlFZGl0ZWRNb2R1bGUoKTtcclxuICAgICAgICBsZXQgY3Vyc29yTGluZSA9IHRoaXMubWFpbi5nZXRNb25hY29FZGl0b3IoKS5nZXRQb3NpdGlvbigpLmxpbmVOdW1iZXI7XHJcblxyXG4gICAgICAgIHRoaXMuc2VtaWNvbG9uUG9zaXRpb25zLmZpbHRlcihwID0+IHRpbWUgLSBwLmZpcnN0U2Vlbk1zID4gMjAwMCkuZm9yRWFjaChwID0+IHtcclxuXHJcbiAgICAgICAgICAgIGxldCBpc0N1cnJlbnRNb2R1bGUgPSBwLm1vZHVsZS5maWxlLmlkICE9IG51bGwgJiYgcC5tb2R1bGUuZmlsZS5pZCA9PSBjdXJyZW50bHlFZGl0ZWRNb2R1bGUuZmlsZS5pZDtcclxuXHJcbiAgICAgICAgICAgIGxldCBlZGl0T3BlcmF0aW9uczogbW9uYWNvLmVkaXRvci5JSWRlbnRpZmllZFNpbmdsZUVkaXRPcGVyYXRpb25bXSA9IFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICByYW5nZTogbmV3IG1vbmFjby5SYW5nZShwLnBvc2l0aW9uLmxpbmUsIHAucG9zaXRpb24uY29sdW1uLCBwLnBvc2l0aW9uLmxpbmUsIHAucG9zaXRpb24uY29sdW1uKSxcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIjtcIixcclxuICAgICAgICAgICAgICAgICAgICBmb3JjZU1vdmVNYXJrZXJzOiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIF1cclxuXHJcbiAgICAgICAgICAgIGlmKGlzQ3VycmVudE1vZHVsZSl7XHJcbiAgICAgICAgICAgICAgICBpZihNYXRoLmFicyhjdXJzb3JMaW5lIC0gcC5wb3NpdGlvbi5saW5lKSA+IDEpe1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBlZGl0b3IgPSB0aGlzLm1haW4uZ2V0TW9uYWNvRWRpdG9yKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0aW9uID0gZWRpdG9yLmdldFNlbGVjdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgIGVkaXRvci5leGVjdXRlRWRpdHMoJ1NlbWljb2xvbi1BbmdlbCcsIGVkaXRPcGVyYXRpb25zKTtcclxuICAgICAgICAgICAgICAgICAgICBlZGl0b3Iuc2V0U2VsZWN0aW9uKHNlbGVjdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZW1pY29sb25Qb3NpdGlvbnMuc3BsaWNlKHRoaXMuc2VtaWNvbG9uUG9zaXRpb25zLmluZGV4T2YocCksIDEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IFxyXG5cclxuXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgfVxyXG5cclxufSJdfQ==