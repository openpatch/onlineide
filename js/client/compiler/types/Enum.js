import { Klass, Visibility } from "./Class.js";
import { Attribute, Method, Parameterlist } from "./Types.js";
import { RuntimeObject } from "../../interpreter/RuntimeObject.js";
import { ArrayType } from "./Array.js";
import { stringPrimitiveType, intPrimitiveType, objectType } from "./PrimitiveTypes.js";
export class EnumRuntimeObject extends RuntimeObject {
    constructor(en, enumValue) {
        super(en);
        this.enumValue = enumValue;
    }
}
export class Enum extends Klass {
    constructor(identifier, module, enumValueNodes) {
        super(identifier, module);
        this.enumInfoList = [];
        this.identifierToInfoMap = {};
        this.indexToInfoMap = {};
        this.valueList = null;
        this.baseClass = objectType;
        let i = 0;
        for (let evn of enumValueNodes) {
            let attribute = new Attribute(evn.identifier, this, null, true, Visibility.public, true);
            if (evn.position != null) {
                attribute.declaration = {
                    module: module,
                    position: evn.position
                };
                attribute.usagePositions.set(module, [evn.position]);
            }
            this.staticClass.addAttribute(attribute);
            let ev = {
                identifier: evn.identifier,
                ordinal: i++
            };
            this.enumInfoList.push(ev);
            this.identifierToInfoMap[evn.identifier] = ev;
            this.indexToInfoMap[ev.ordinal] = ev;
        }
        if (module.isSystemModule) {
            this.valueList = {
                type: new ArrayType(this),
                value: []
            };
            for (let ei of this.enumInfoList) {
                ei.object = new EnumRuntimeObject(this, ei);
                this.valueList.value.push({
                    type: this,
                    value: ei.object
                });
            }
        }
        let that = this;
        this.staticClass.addMethod(new Method("getValues", new Parameterlist([]), new ArrayType(this), (parameters) => {
            if (this.valueList == null) {
                let values = [];
                for (let vi of this.enumInfoList) {
                    values.push({
                        type: that,
                        value: vi.object
                    });
                }
                this.valueList = {
                    type: new ArrayType(that),
                    value: values
                };
            }
            return this.valueList;
        }, false, true));
        this.addMethod(new Method("toString", new Parameterlist([]), stringPrimitiveType, (parameters) => {
            let erto = (parameters[0].value);
            return erto.enumValue.identifier;
        }, false, false));
        this.addMethod(new Method("toOrdinal", new Parameterlist([]), intPrimitiveType, (parameters) => {
            let erto = (parameters[0].value);
            return erto.enumValue.ordinal;
        }, false, false));
    }
    getOrdinal(valueIdentifier) {
        let enumInfo = this.identifierToInfoMap[valueIdentifier];
        if (enumInfo == null)
            return -1;
        return enumInfo.ordinal;
    }
    debugOutput(value, maxLength = 40) {
        let enumObject = value.value;
        return this.identifier + "." + enumObject.enumValue.identifier;
    }
    canCastTo(type) {
        if (type == intPrimitiveType) {
            return true;
        }
        return super.canCastTo(type);
    }
    castTo(value, type) {
        if (type == intPrimitiveType) {
            let en = value.value;
            return {
                type: intPrimitiveType,
                value: en.enumValue.ordinal
            };
        }
        return super.castTo(value, type);
    }
}
//# sourceMappingURL=data:application/json;base64,