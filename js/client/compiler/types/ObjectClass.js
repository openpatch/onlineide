import { Method, Parameterlist } from "./Types.js";
import { stringPrimitiveType } from "./PrimitiveTypes.js";
import { Klass } from "./Class.js";
/**
 * Base class for all classes
 */
export class ObjectClass extends Klass {
    constructor(module) {
        super("Object", module, "Basisklasse aller Klassen");
        // stringPrimitiveType is used here before it is initialized. This problem is solved
        // in the constructor of StringprimitiveType.
        this.addMethod(new Method("toString", new Parameterlist([]), stringPrimitiveType, (parameters) => {
            return "(" + parameters[0].value.class.identifier + ")";
        }, false, false));
        // // Add default parameterless constructor
        // let m = new Method("Object", new Parameterlist([]), null,
        // (parameters) => {
        // }, false, false);
        // m.isConstructor = true;
        // this.addMethod(m);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT2JqZWN0Q2xhc3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvY2xpZW50L2NvbXBpbGVyL3R5cGVzL09iamVjdENsYXNzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxNQUFNLEVBQUUsYUFBYSxFQUFTLE1BQU0sWUFBWSxDQUFDO0FBQzFELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRzFELE9BQU8sRUFBYSxLQUFLLEVBQUUsTUFBTSxZQUFZLENBQUM7QUFROUM7O0dBRUc7QUFFSCxNQUFNLE9BQU8sV0FBWSxTQUFRLEtBQUs7SUFFbEMsWUFBWSxNQUFjO1FBQ3RCLEtBQUssQ0FBQyxRQUFRLEVBQUUsTUFBTSxFQUFFLDJCQUEyQixDQUFDLENBQUM7UUFFckQsb0ZBQW9GO1FBQ3BGLDZDQUE2QztRQUM3QyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksTUFBTSxDQUFDLFVBQVUsRUFBRSxJQUFJLGFBQWEsQ0FBQyxFQUFFLENBQUMsRUFBRSxtQkFBbUIsRUFDNUUsQ0FBQyxVQUFVLEVBQUUsRUFBRTtZQUVYLE9BQU8sR0FBRyxHQUE0QixVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBTSxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDO1FBRXRGLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUd0QiwyQ0FBMkM7UUFDM0MsNERBQTREO1FBQzVELG9CQUFvQjtRQUVwQixvQkFBb0I7UUFFcEIsMEJBQTBCO1FBRTFCLHFCQUFxQjtJQUV6QixDQUFDO0NBSUoiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNZXRob2QsIFBhcmFtZXRlcmxpc3QsIFZhbHVlIH0gZnJvbSBcIi4vVHlwZXMuanNcIjtcclxuaW1wb3J0IHsgc3RyaW5nUHJpbWl0aXZlVHlwZSB9IGZyb20gXCIuL1ByaW1pdGl2ZVR5cGVzLmpzXCI7XHJcbmltcG9ydCB7IFJ1bnRpbWVPYmplY3QgfSBmcm9tIFwiLi4vLi4vaW50ZXJwcmV0ZXIvUnVudGltZU9iamVjdC5qc1wiO1xyXG5pbXBvcnQgeyBNb2R1bGUgfSBmcm9tIFwiLi4vcGFyc2VyL01vZHVsZS5qc1wiO1xyXG5pbXBvcnQgeyBJbnRlcmZhY2UsIEtsYXNzIH0gZnJvbSBcIi4vQ2xhc3MuanNcIjtcclxuLy8gbmV1OlxyXG5pbXBvcnQgeyBFbnVtLCBFbnVtUnVudGltZU9iamVjdCB9IGZyb20gXCIuL0VudW0uanNcIjtcclxuaW1wb3J0IHsgdHlwZSB9IGZyb20gXCJqcXVlcnlcIjtcclxuaW1wb3J0IHsganNvbiB9IGZyb20gXCJleHByZXNzXCI7XHJcbmltcG9ydCB7IEFycmF5VHlwZSB9IGZyb20gXCIuL0FycmF5LmpzXCI7XHJcblxyXG5cclxuLyoqXHJcbiAqIEJhc2UgY2xhc3MgZm9yIGFsbCBjbGFzc2VzXHJcbiAqL1xyXG5cclxuZXhwb3J0IGNsYXNzIE9iamVjdENsYXNzIGV4dGVuZHMgS2xhc3Mge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG1vZHVsZTogTW9kdWxlKSB7XHJcbiAgICAgICAgc3VwZXIoXCJPYmplY3RcIiwgbW9kdWxlLCBcIkJhc2lza2xhc3NlIGFsbGVyIEtsYXNzZW5cIik7XHJcblxyXG4gICAgICAgIC8vIHN0cmluZ1ByaW1pdGl2ZVR5cGUgaXMgdXNlZCBoZXJlIGJlZm9yZSBpdCBpcyBpbml0aWFsaXplZC4gVGhpcyBwcm9ibGVtIGlzIHNvbHZlZFxyXG4gICAgICAgIC8vIGluIHRoZSBjb25zdHJ1Y3RvciBvZiBTdHJpbmdwcmltaXRpdmVUeXBlLlxyXG4gICAgICAgIHRoaXMuYWRkTWV0aG9kKG5ldyBNZXRob2QoXCJ0b1N0cmluZ1wiLCBuZXcgUGFyYW1ldGVybGlzdChbXSksIHN0cmluZ1ByaW1pdGl2ZVR5cGUsXHJcbiAgICAgICAgICAgIChwYXJhbWV0ZXJzKSA9PiB7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiKFwiICsgKDxSdW50aW1lT2JqZWN0Pjx1bmtub3duPnBhcmFtZXRlcnNbMF0udmFsdWUpLmNsYXNzLmlkZW50aWZpZXIgKyBcIilcIjtcclxuXHJcbiAgICAgICAgICAgIH0sIGZhbHNlLCBmYWxzZSkpO1xyXG5cclxuXHJcbiAgICAgICAgLy8gLy8gQWRkIGRlZmF1bHQgcGFyYW1ldGVybGVzcyBjb25zdHJ1Y3RvclxyXG4gICAgICAgIC8vIGxldCBtID0gbmV3IE1ldGhvZChcIk9iamVjdFwiLCBuZXcgUGFyYW1ldGVybGlzdChbXSksIG51bGwsXHJcbiAgICAgICAgLy8gKHBhcmFtZXRlcnMpID0+IHtcclxuXHJcbiAgICAgICAgLy8gfSwgZmFsc2UsIGZhbHNlKTtcclxuICAgICAgICBcclxuICAgICAgICAvLyBtLmlzQ29uc3RydWN0b3IgPSB0cnVlO1xyXG5cclxuICAgICAgICAvLyB0aGlzLmFkZE1ldGhvZChtKTtcclxuXHJcbiAgICB9XHJcblxyXG5cclxuXHJcbn1cclxuIl19