export class WatcherElement {
    constructor(expression, accordionElement, main, $secondLine, $rightTextInFirstLine) {
        this.expression = expression;
        this.accordionElement = accordionElement;
        this.main = main;
        this.$secondLine = $secondLine;
        this.$rightTextInFirstLine = $rightTextInFirstLine;
    }
    setError(error) {
        this.$secondLine.empty();
        this.$secondLine.append(jQuery('<div class="jo_watcherResult">' + "---" + '</div>'));
    }
    evaluate() {
        let evaluator = this.main.getCurrentWorkspace().evaluator;
        let result = evaluator.evaluate(this.expression);
        if (result.error != null) {
            this.setError(result.error);
        }
        else {
            let v = "---";
            if (result.value != null) {
                v = result.value.type.debugOutput(result.value);
            }
            this.$secondLine.empty();
            this.$rightTextInFirstLine.empty();
            monaco.editor.colorize(v, 'myJava', { tabSize: 3 }).then((command) => {
                let $result = jQuery('<div class="jo_watcherResult">' + command + '</div>');
                if (this.expression.length + v.length < 20) {
                    this.$rightTextInFirstLine.append($result);
                }
                else {
                    this.$secondLine.append($result);
                }
            });
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiV2F0Y2hlckVsZW1lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY2xpZW50L2ludGVycHJldGVyL1dhdGNoZXJFbGVtZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBLE1BQU0sT0FBTyxjQUFjO0lBRXZCLFlBQW1CLFVBQWtCLEVBQVMsZ0JBQWtDLEVBQ3BFLElBQWMsRUFBVSxXQUFnQyxFQUFVLHFCQUEwQztRQURyRyxlQUFVLEdBQVYsVUFBVSxDQUFRO1FBQVMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUNwRSxTQUFJLEdBQUosSUFBSSxDQUFVO1FBQVUsZ0JBQVcsR0FBWCxXQUFXLENBQXFCO1FBQVUsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUFxQjtJQUV4SCxDQUFDO0lBRUQsUUFBUSxDQUFDLEtBQWE7UUFDbEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUN6QixJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsZ0NBQWdDLEdBQUcsS0FBSyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDekYsQ0FBQztJQUVELFFBQVE7UUFFSixJQUFJLFNBQVMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUMsU0FBUyxDQUFDO1FBQzFELElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ2pELElBQUksTUFBTSxDQUFDLEtBQUssSUFBSSxJQUFJLEVBQUU7WUFDdEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDL0I7YUFBTTtZQUVILElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQztZQUNkLElBQUksTUFBTSxDQUFDLEtBQUssSUFBSSxJQUFJLEVBQUU7Z0JBQ3RCLENBQUMsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQ25EO1lBRUQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUN6QixJQUFJLENBQUMscUJBQXFCLENBQUMsS0FBSyxFQUFFLENBQUM7WUFFbkMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLFFBQVEsRUFBRSxFQUFFLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO2dCQUVqRSxJQUFJLE9BQU8sR0FBRyxNQUFNLENBQUMsZ0NBQWdDLEdBQUcsT0FBTyxHQUFHLFFBQVEsQ0FBQyxDQUFDO2dCQUU1RSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxNQUFNLEdBQUcsRUFBRSxFQUFFO29CQUN4QyxJQUFJLENBQUMscUJBQXFCLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2lCQUM5QztxQkFBTTtvQkFDSCxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztpQkFDcEM7WUFFTCxDQUFDLENBQ0EsQ0FBQztTQUNMO0lBR0wsQ0FBQztDQUVKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWNjb3JkaW9uRWxlbWVudCB9IGZyb20gXCIuLi9tYWluL2d1aS9BY2NvcmRpb24uanNcIjtcclxuaW1wb3J0IHsgTWFpbiB9IGZyb20gXCIuLi9tYWluL01haW4uanNcIjtcclxuaW1wb3J0IHsgTWFpbkJhc2UgfSBmcm9tIFwiLi4vbWFpbi9NYWluQmFzZS5qc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFdhdGNoZXJFbGVtZW50IHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgZXhwcmVzc2lvbjogc3RyaW5nLCBwdWJsaWMgYWNjb3JkaW9uRWxlbWVudDogQWNjb3JkaW9uRWxlbWVudCxcclxuICAgICAgICBwcml2YXRlIG1haW46IE1haW5CYXNlLCBwcml2YXRlICRzZWNvbmRMaW5lOiBKUXVlcnk8SFRNTEVsZW1lbnQ+LCBwcml2YXRlICRyaWdodFRleHRJbkZpcnN0TGluZTogSlF1ZXJ5PEhUTUxFbGVtZW50Pikge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBzZXRFcnJvcihlcnJvcjogc3RyaW5nKSB7XHJcbiAgICAgICAgdGhpcy4kc2Vjb25kTGluZS5lbXB0eSgpO1xyXG4gICAgICAgIHRoaXMuJHNlY29uZExpbmUuYXBwZW5kKGpRdWVyeSgnPGRpdiBjbGFzcz1cImpvX3dhdGNoZXJSZXN1bHRcIj4nICsgXCItLS1cIiArICc8L2Rpdj4nKSk7XHJcbiAgICB9XHJcblxyXG4gICAgZXZhbHVhdGUoKSB7XHJcblxyXG4gICAgICAgIGxldCBldmFsdWF0b3IgPSB0aGlzLm1haW4uZ2V0Q3VycmVudFdvcmtzcGFjZSgpLmV2YWx1YXRvcjtcclxuICAgICAgICBsZXQgcmVzdWx0ID0gZXZhbHVhdG9yLmV2YWx1YXRlKHRoaXMuZXhwcmVzc2lvbik7XHJcbiAgICAgICAgaWYgKHJlc3VsdC5lcnJvciAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0RXJyb3IocmVzdWx0LmVycm9yKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgbGV0IHYgPSBcIi0tLVwiO1xyXG4gICAgICAgICAgICBpZiAocmVzdWx0LnZhbHVlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHYgPSByZXN1bHQudmFsdWUudHlwZS5kZWJ1Z091dHB1dChyZXN1bHQudmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLiRzZWNvbmRMaW5lLmVtcHR5KCk7XHJcbiAgICAgICAgICAgIHRoaXMuJHJpZ2h0VGV4dEluRmlyc3RMaW5lLmVtcHR5KCk7XHJcblxyXG4gICAgICAgICAgICBtb25hY28uZWRpdG9yLmNvbG9yaXplKHYsICdteUphdmEnLCB7IHRhYlNpemU6IDMgfSkudGhlbigoY29tbWFuZCkgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCAkcmVzdWx0ID0galF1ZXJ5KCc8ZGl2IGNsYXNzPVwiam9fd2F0Y2hlclJlc3VsdFwiPicgKyBjb21tYW5kICsgJzwvZGl2PicpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmV4cHJlc3Npb24ubGVuZ3RoICsgdi5sZW5ndGggPCAyMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJHJpZ2h0VGV4dEluRmlyc3RMaW5lLmFwcGVuZCgkcmVzdWx0KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kc2Vjb25kTGluZS5hcHBlbmQoJHJlc3VsdCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICB9XHJcblxyXG59XHJcbiJdfQ==