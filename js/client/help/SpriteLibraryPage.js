export class SpriteLibraryPage {
    start() {
        let $entries = jQuery('#entries');
        let $set;
        let nameOld = "";
        for (let e of SpriteLibrary) {
            let tilesX = e.tilesX == null ? 1 : e.tilesX;
            let tilesY = e.tilesY == null ? 1 : e.tilesY;
            let index = e.index == null ? 0 : e.index;
            for (let row = 0; row < tilesY; row++) {
                for (let column = 0; column < tilesX; column++) {
                    if (e.name != nameOld) {
                        nameOld = e.name;
                        $set = jQuery('<div class="jo_spritelibrary-set jo_scrollable"></div>');
                        $entries.append(jQuery('<div class="jo_spritelibrary-heading">' + e.name + "</div>"));
                        jQuery('#entries').append($set);
                    }
                    let $sh = jQuery('<div class="' + e.name + "_" + (index) + '"></div>');
                    let width;
                    let height;
                    let $outerbox = jQuery('<div class="jo_spritelibrary-box"></div>');
                    let $innerbox = jQuery('<div class="jo_spritelibrary-innerbox"></div>');
                    $outerbox.append($innerbox);
                    if (e.scale != null) {
                        let $sh1 = jQuery('<div class="jo_transformed-sprite" style="transform: scale(' + e.scale + '); transform-origin: top left"></div>');
                        $sh1.append($sh);
                        $innerbox.append($sh1);
                        $set.append($outerbox);
                        width = $sh.width();
                        height = $sh.height();
                        $sh1.css({ width: width * e.scale + "px", height: height * e.scale + "px" });
                    }
                    else {
                        $innerbox.append($sh);
                        $set.append($outerbox);
                        width = $sh.width();
                        height = $sh.height();
                    }
                    $outerbox.append('<div class="jo_spritelibrary-subscript">Nr. ' + index + '</div>');
                    $outerbox.append('<div class="jo_spritelibrary-subscript">' + width + ' x ' + height + '</div>');
                    if (e.indexName != null) {
                        $outerbox.append('<div class="jo_spritelibrary-subscript">(' + e.indexName + ')</div>');
                    }
                    index++;
                }
            }
        }
    }
}
jQuery(() => {
    new SpriteLibraryPage().start();
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3ByaXRlTGlicmFyeVBhZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY2xpZW50L2hlbHAvU3ByaXRlTGlicmFyeVBhZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBYUEsTUFBTSxPQUFPLGlCQUFpQjtJQUMxQixLQUFLO1FBRUQsSUFBSSxRQUFRLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ2xDLElBQUksSUFBeUIsQ0FBQztRQUU5QixJQUFJLE9BQU8sR0FBVyxFQUFFLENBQUM7UUFDekIsS0FBSyxJQUFJLENBQUMsSUFBSSxhQUFhLEVBQUU7WUFFekIsSUFBSSxNQUFNLEdBQUcsQ0FBQyxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQztZQUM3QyxJQUFJLE1BQU0sR0FBRyxDQUFDLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO1lBQzdDLElBQUksS0FBSyxHQUFXLENBQUMsQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7WUFFbEQsS0FBSyxJQUFJLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLE1BQU0sRUFBRSxHQUFHLEVBQUUsRUFBRTtnQkFDbkMsS0FBSyxJQUFJLE1BQU0sR0FBRyxDQUFDLEVBQUUsTUFBTSxHQUFHLE1BQU0sRUFBRSxNQUFNLEVBQUUsRUFBRTtvQkFDNUMsSUFBSSxDQUFDLENBQUMsSUFBSSxJQUFJLE9BQU8sRUFBRTt3QkFDbkIsT0FBTyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUM7d0JBQ2pCLElBQUksR0FBRyxNQUFNLENBQUMsd0RBQXdELENBQUMsQ0FBQzt3QkFDeEUsUUFBUSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsd0NBQXdDLEdBQUcsQ0FBQyxDQUFDLElBQUksR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDO3dCQUN0RixNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO3FCQUNuQztvQkFDRCxJQUFJLEdBQUcsR0FBRyxNQUFNLENBQUMsY0FBYyxHQUFHLENBQUMsQ0FBQyxJQUFJLEdBQUcsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUM7b0JBQ3ZFLElBQUksS0FBYSxDQUFDO29CQUNsQixJQUFJLE1BQWMsQ0FBQztvQkFDbkIsSUFBSSxTQUFTLEdBQUcsTUFBTSxDQUFDLDBDQUEwQyxDQUFDLENBQUM7b0JBQ25FLElBQUksU0FBUyxHQUFHLE1BQU0sQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO29CQUN4RSxTQUFTLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO29CQUM1QixJQUFJLENBQUMsQ0FBQyxLQUFLLElBQUksSUFBSSxFQUFFO3dCQUNqQixJQUFJLElBQUksR0FBRyxNQUFNLENBQUMsNkRBQTZELEdBQUcsQ0FBQyxDQUFDLEtBQUssR0FBRyx1Q0FBdUMsQ0FBQyxDQUFDO3dCQUNySSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO3dCQUNqQixTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO3dCQUN2QixJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO3dCQUN2QixLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO3dCQUNwQixNQUFNLEdBQUcsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDO3dCQUN0QixJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxFQUFFLEtBQUssR0FBRyxDQUFDLENBQUMsS0FBSyxHQUFHLElBQUksRUFBRSxNQUFNLEVBQUUsTUFBTSxHQUFHLENBQUMsQ0FBQyxLQUFLLEdBQUcsSUFBSSxFQUFFLENBQUMsQ0FBQztxQkFDaEY7eUJBQU07d0JBQ0gsU0FBUyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQzt3QkFDdEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQzt3QkFDdkIsS0FBSyxHQUFHLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQzt3QkFDcEIsTUFBTSxHQUFHLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQztxQkFDekI7b0JBQ0QsU0FBUyxDQUFDLE1BQU0sQ0FBQyw4Q0FBOEMsR0FBRyxLQUFLLEdBQUcsUUFBUSxDQUFDLENBQUM7b0JBQ3BGLFNBQVMsQ0FBQyxNQUFNLENBQUMsMENBQTBDLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRyxNQUFNLEdBQUcsUUFBUSxDQUFDLENBQUM7b0JBQ2pHLElBQUksQ0FBQyxDQUFDLFNBQVMsSUFBSSxJQUFJLEVBQUU7d0JBQ3JCLFNBQVMsQ0FBQyxNQUFNLENBQUMsMkNBQTJDLEdBQUcsQ0FBQyxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUMsQ0FBQztxQkFDM0Y7b0JBQ0QsS0FBSyxFQUFFLENBQUM7aUJBQ1g7YUFDSjtTQUNKO0lBR0wsQ0FBQztDQUNKO0FBRUQsTUFBTSxDQUFDLEdBQUcsRUFBRTtJQUNSLElBQUksaUJBQWlCLEVBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztBQUNwQyxDQUFDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbInR5cGUgU3ByaXRlTGlicmFyeUVudHJ5ID0ge1xyXG4gICAgZmlsZW5hbWU6IHN0cmluZyxcclxuICAgIG5hbWU6IHN0cmluZyxcclxuICAgIGluZGV4PzogbnVtYmVyLFxyXG4gICAgc2NhbGU/OiBudW1iZXIsXHJcbiAgICBpbmRleE5hbWU/OiBzdHJpbmcsXHJcbiAgICB0aWxlc1g/OiBudW1iZXIsXHJcbiAgICB0aWxlc1k/OiBudW1iZXIsXHJcbiAgICBtaW5JbmRleD86IG51bWJlclxyXG59XHJcblxyXG5kZWNsYXJlIHZhciBTcHJpdGVMaWJyYXJ5OiBTcHJpdGVMaWJyYXJ5RW50cnlbXTtcclxuXHJcbmV4cG9ydCBjbGFzcyBTcHJpdGVMaWJyYXJ5UGFnZSB7XHJcbiAgICBzdGFydCgpIHtcclxuXHJcbiAgICAgICAgbGV0ICRlbnRyaWVzID0galF1ZXJ5KCcjZW50cmllcycpO1xyXG4gICAgICAgIGxldCAkc2V0OiBKUXVlcnk8SFRNTEVsZW1lbnQ+O1xyXG5cclxuICAgICAgICBsZXQgbmFtZU9sZDogc3RyaW5nID0gXCJcIjtcclxuICAgICAgICBmb3IgKGxldCBlIG9mIFNwcml0ZUxpYnJhcnkpIHtcclxuXHJcbiAgICAgICAgICAgIGxldCB0aWxlc1ggPSBlLnRpbGVzWCA9PSBudWxsID8gMSA6IGUudGlsZXNYO1xyXG4gICAgICAgICAgICBsZXQgdGlsZXNZID0gZS50aWxlc1kgPT0gbnVsbCA/IDEgOiBlLnRpbGVzWTtcclxuICAgICAgICAgICAgbGV0IGluZGV4OiBudW1iZXIgPSBlLmluZGV4ID09IG51bGwgPyAwIDogZS5pbmRleDtcclxuXHJcbiAgICAgICAgICAgIGZvciAobGV0IHJvdyA9IDA7IHJvdyA8IHRpbGVzWTsgcm93KyspIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGNvbHVtbiA9IDA7IGNvbHVtbiA8IHRpbGVzWDsgY29sdW1uKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZS5uYW1lICE9IG5hbWVPbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZU9sZCA9IGUubmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNldCA9IGpRdWVyeSgnPGRpdiBjbGFzcz1cImpvX3Nwcml0ZWxpYnJhcnktc2V0IGpvX3Njcm9sbGFibGVcIj48L2Rpdj4nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGVudHJpZXMuYXBwZW5kKGpRdWVyeSgnPGRpdiBjbGFzcz1cImpvX3Nwcml0ZWxpYnJhcnktaGVhZGluZ1wiPicgKyBlLm5hbWUgKyBcIjwvZGl2PlwiKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGpRdWVyeSgnI2VudHJpZXMnKS5hcHBlbmQoJHNldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGxldCAkc2ggPSBqUXVlcnkoJzxkaXYgY2xhc3M9XCInICsgZS5uYW1lICsgXCJfXCIgKyAoaW5kZXgpICsgJ1wiPjwvZGl2PicpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB3aWR0aDogbnVtYmVyO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBoZWlnaHQ6IG51bWJlcjtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgJG91dGVyYm94ID0galF1ZXJ5KCc8ZGl2IGNsYXNzPVwiam9fc3ByaXRlbGlicmFyeS1ib3hcIj48L2Rpdj4nKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgJGlubmVyYm94ID0galF1ZXJ5KCc8ZGl2IGNsYXNzPVwiam9fc3ByaXRlbGlicmFyeS1pbm5lcmJveFwiPjwvZGl2PicpO1xyXG4gICAgICAgICAgICAgICAgICAgICRvdXRlcmJveC5hcHBlbmQoJGlubmVyYm94KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZS5zY2FsZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCAkc2gxID0galF1ZXJ5KCc8ZGl2IGNsYXNzPVwiam9fdHJhbnNmb3JtZWQtc3ByaXRlXCIgc3R5bGU9XCJ0cmFuc2Zvcm06IHNjYWxlKCcgKyBlLnNjYWxlICsgJyk7IHRyYW5zZm9ybS1vcmlnaW46IHRvcCBsZWZ0XCI+PC9kaXY+Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzaDEuYXBwZW5kKCRzaCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRpbm5lcmJveC5hcHBlbmQoJHNoMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzZXQuYXBwZW5kKCRvdXRlcmJveCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoID0gJHNoLndpZHRoKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlaWdodCA9ICRzaC5oZWlnaHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNoMS5jc3MoeyB3aWR0aDogd2lkdGggKiBlLnNjYWxlICsgXCJweFwiLCBoZWlnaHQ6IGhlaWdodCAqIGUuc2NhbGUgKyBcInB4XCIgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGlubmVyYm94LmFwcGVuZCgkc2gpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2V0LmFwcGVuZCgkb3V0ZXJib3gpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aWR0aCA9ICRzaC53aWR0aCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSAkc2guaGVpZ2h0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICRvdXRlcmJveC5hcHBlbmQoJzxkaXYgY2xhc3M9XCJqb19zcHJpdGVsaWJyYXJ5LXN1YnNjcmlwdFwiPk5yLiAnICsgaW5kZXggKyAnPC9kaXY+Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJG91dGVyYm94LmFwcGVuZCgnPGRpdiBjbGFzcz1cImpvX3Nwcml0ZWxpYnJhcnktc3Vic2NyaXB0XCI+JyArIHdpZHRoICsgJyB4ICcgKyBoZWlnaHQgKyAnPC9kaXY+Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUuaW5kZXhOYW1lICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJG91dGVyYm94LmFwcGVuZCgnPGRpdiBjbGFzcz1cImpvX3Nwcml0ZWxpYnJhcnktc3Vic2NyaXB0XCI+KCcgKyBlLmluZGV4TmFtZSArICcpPC9kaXY+Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGluZGV4Kys7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG5cclxuICAgIH1cclxufVxyXG5cclxualF1ZXJ5KCgpID0+IHtcclxuICAgIG5ldyBTcHJpdGVMaWJyYXJ5UGFnZSgpLnN0YXJ0KCk7XHJcbn0pIl19