import { makeDiv } from "../../tools/HtmlTools.js";
import { ajax } from "../../communication/AjaxHelper.js";
export class RepositoryCreateManager {
    constructor(main) {
        this.main = main;
        this.guiReady = false;
        this.publishedToItems = [
            { value: "0", object: 0, caption: "Keine Veröffentlichung (privates Repository)" },
            { value: "1", object: 1, caption: "Veröffentlicht für alls Schüler/innen der Klasse" },
            { value: "2", object: 2, caption: "Veröffentlicht für alls Schüler/innen der Schule" },
        ];
        this.repositoryOwnerItems = [];
        this.users = [];
    }
    initGUI() {
        this.guiReady = true;
        let that = this;
        let $updateDiv = jQuery('#updateRepo-div');
        $updateDiv.append(this.$mainHeading = makeDiv("updateRepo-mainHeading"));
        $updateDiv.append(this.$settingsDiv = makeDiv("updateRepo-settingsDiv"));
        this.$settingsDiv.append(jQuery('<div class="updateRepo-settingsLabel">Name des Repositorys:</div>'));
        this.$settingsDiv.append(this.$repoName = jQuery('<input type="text" class="updateRepo-inputcolumn"></input>'));
        this.$settingsDiv.append(jQuery('<div class="updateRepo-settingsLabel">Beschreibung:</div>'));
        this.$settingsDiv.append(this.$repoDescription = jQuery('<textarea class="updateRepo-inputcolumn" style="min-height: 4em"></textarea>'));
        this.$settingsDiv.append(jQuery('<div class="updateRepo-settingsLabel">Veröffentlicht für:</div>'));
        this.$settingsDiv.append(this.$repoPublishedTo = jQuery('<select class="updateRepo-inputcolumn"></select>'));
        this.setItems(this.$repoPublishedTo, this.publishedToItems);
        this.$settingsDiv.append(jQuery('<div class="updateRepo-settingsLabel">Eigentümer:</div>'));
        this.$settingsDiv.append(this.$repoOwner = jQuery('<select class="updateRepo-inputcolumn"></select>'));
        $updateDiv.append(this.$userlistDiv = makeDiv("updateRepo-userlistDiv"));
        this.$userlistDiv.append(makeDiv(null, "updateRepo-userlistheading", "Benutzer, die das Repository nutzen", { "grid-column": 1, "position": "sticky", "top": 0 }));
        this.$userlistDiv.append(makeDiv(null, "updateRepo-userlistheading", "Schreibberechtigung", { "grid-column": 2, "position": "sticky", "top": 0 }));
        let $buttonDiv = makeDiv("updateRepo-buttonDiv");
        $buttonDiv.append(this.$saveUpdateButton = makeDiv("", "jo_synchro_button", "Änderungen speichern", { "background-color": "var(--updateButtonBackground)", "color": "var(--updateButtonColor)" }));
        this.$saveUpdateButton.on("click", () => { that.saveButtonClicked(); });
        $buttonDiv.append(this.$createButton = makeDiv("", "jo_synchro_button", "Repository erstellen", { "background-color": "var(--createButtonBackground)", "color": "var(--createButtonColor)" }));
        this.$createButton.on("click", () => { that.createButtonClicked(); });
        $buttonDiv.append(this.$cancelButton = makeDiv("", "jo_synchro_button", "Abbrechen", { "background-color": "var(--cancelButtonBackground)", "color": "var(--cancelButtonColor)" }));
        this.$cancelButton.on("click", () => { that.cancelButtonClicked(); });
        $updateDiv.append($buttonDiv);
    }
    setItems($selectElement, items) {
        items.forEach(item => {
            let element = jQuery(`<option value=${item.value}>${item.caption}</option>`);
            $selectElement.append(element);
            element.data('object', item.object);
        });
        $selectElement.data('items', items);
    }
    show(mode, workspace, repository_id) {
        this.workspace = workspace;
        if (!this.guiReady) {
            this.initGUI();
        }
        let $synchroDiv = jQuery('#updateRepo-div');
        $synchroDiv.css('visibility', 'visible');
        let $mainDiv = jQuery('#main');
        $mainDiv.css('visibility', 'hidden');
        if (mode == "create") {
            this.initCreateMode(workspace);
        }
        else {
            this.initUpdateMode(repository_id);
        }
    }
    initUpdateMode(repository_id) {
        let user = this.main.user;
        this.$mainHeading.text("Bitte warten...");
        this.$createButton.hide();
        this.$saveUpdateButton.show();
        let grq = { repository_id: repository_id, workspace_id: null };
        let that = this;
        ajax('getRepository', grq, (response) => {
            let repository = response.repository;
            that.$repoName.val(repository.name);
            that.$repoDescription.val(repository.description);
            that.$repoPublishedTo.val("" + repository.published_to);
            that.$mainHeading.text(`Eigenschaften des Repositorys "${repository.name}" bearbeiten:`);
            let grlq = {
                repository_id: repository_id
            };
            ajax('getRepositoryUserList', grlq, (response) => {
                that.users = response.repositoryUserList;
                that.$userlistDiv.find('div').not('.updateRepo-userlistheading').remove();
                response.repositoryUserList.forEach(userData => {
                    let $userDiv = makeDiv("", "updateRepo-userDiv", `${userData.firstName} ${userData.lastName} (${userData.username})`, { 'grid-column': 1 });
                    let $canWriteDiv = makeDiv("", "canWriteDiv", "", { 'grid-column': 2 });
                    let $canWriteCheckBox = jQuery('<input type="checkbox">');
                    $canWriteDiv.append($canWriteCheckBox);
                    //@ts-ignore
                    $canWriteCheckBox.attr('checked', userData.canWrite);
                    $canWriteCheckBox.data('user', userData);
                    that.$userlistDiv.append($userDiv, $canWriteDiv);
                });
                that.$repoOwner.empty();
                that.setItems(that.$repoOwner, response.repositoryUserList.map(userData => {
                    let se = {
                        caption: `${userData.firstName} ${userData.lastName} (${userData.username})`,
                        object: userData,
                        value: userData.user_id + ""
                    };
                    return se;
                }));
            });
        });
    }
    initCreateMode(workspace) {
        let user = this.main.user;
        let userInfo = {
            firstName: user.rufname,
            lastName: user.familienname,
            username: user.username,
            user_id: user.id,
            canWrite: true,
            klasse: ""
        };
        this.$mainHeading.text(`Repository anlegen und mit Workspace "${workspace.name}" verknüpfen:`);
        this.$createButton.show();
        this.$saveUpdateButton.hide();
        this.repositoryOwnerItems = [{
                caption: user.rufname + " " + user.familienname + " (" + user.username + ")",
                object: userInfo,
                value: "0"
            }];
        this.setItems(this.$repoOwner, this.repositoryOwnerItems);
        this.$repoName.val(workspace.name);
        this.$userlistDiv.append(makeDiv("", "updateRepo-tutorial", `Sobald das Repository angelegt ist, 
        können die anderen Schüler/innen Deiner Klasse/Schule es finden und über Repoitory->Checkout mit ihren Workspaces verbinden. 
        Sie werden dann in dieser Liste erscheinen.`, { "grid-column": "1 / span 2", "align-self": "start", "padding-left": "10px" }));
    }
    hide() {
        let $synchroDiv = jQuery('#updateRepo-div');
        $synchroDiv.css('visibility', 'hidden');
        let $mainDiv = jQuery('#main');
        $mainDiv.css('visibility', 'visible');
    }
    saveButtonClicked() {
    }
    createButtonClicked() {
        let publishedTo = this.getSelectedObject(this.$repoPublishedTo);
        let repoName = this.$repoName.val();
        let repoDescription = this.$repoDescription.val();
        this.main.networkManager.sendCreateRepository(this.workspace, publishedTo, repoName, repoDescription, (error, repository_id) => {
            if (error == null) {
                let projectExplorer = this.main.projectExplorer;
                let element = projectExplorer.workspaceListPanel.findElement(this.workspace);
                projectExplorer.workspaceListPanel.setElementClass(element, "repository");
                this.workspace.renderSynchronizeButton();
                projectExplorer.showRepositoryButtonIfNeeded(this.workspace);
                this.hide();
            }
            else {
                alert(error);
            }
        });
    }
    cancelButtonClicked() {
        this.hide();
    }
    getSelectedObject($selectDiv) {
        var _a;
        let items = $selectDiv.data('items');
        let selectedValue = $selectDiv.val();
        return (_a = items.find(item => item.value == selectedValue)) === null || _a === void 0 ? void 0 : _a.object;
    }
}
//# sourceMappingURL=data:application/json;base64,