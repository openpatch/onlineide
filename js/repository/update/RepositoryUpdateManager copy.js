import { makeDiv, setSelectItems, getSelectedObject } from "../../tools/HtmlTools.js";
import { ajax } from "../../communication/AjaxHelper.js";
export class RepositoryUpdateManager {
    constructor(main) {
        this.main = main;
        this.guiReady = false;
        this.publishedToItems = [
            { value: 0, object: 0, caption: "Keine Veröffentlichung (privates Repository)" },
            { value: 1, object: 1, caption: "Veröffentlicht für alls Schüler/innen der Klasse" },
            { value: 2, object: 2, caption: "Veröffentlicht für alls Schüler/innen der Schule" },
        ];
        this.repositoryOwnerItems = [];
        this.users = [];
    }
    initGUI() {
        this.guiReady = true;
        let that = this;
        let $updateDiv = jQuery('#updateRepo-div');
        $updateDiv.append(this.$mainHeading = makeDiv('updateRepo-mainHeading', "createUpdateRepo-mainHeading", ""));
        this.$mainHeading.append(makeDiv("", "", "Repositories verwalten"));
        this.$mainHeading.append(this.$exitButton = makeDiv("", "jo_synchro_button", "Zurück zum Programmieren", { "background-color": "var(--cancelButtonBackground)", "color": "var(--cancelButtonColor)", "font-size": "10pt" }));
        this.$exitButton.on("click", () => { that.exitButtonClicked(); });
        let $divBelow = makeDiv("updateRepo-divBelow");
        $updateDiv.append($divBelow);
        let $divLeft = makeDiv("updateRepo-divLeft");
        $divBelow.append($divLeft);
        $divLeft.append(makeDiv('', 'updateRepo-minorHeading', 'Repositories:'));
        this.$repoListDiv = makeDiv("updateRepo-repoListDiv");
        $divLeft.append(this.$repoListDiv);
        let $rightDiv = makeDiv("updateRepo-divRight");
        $divBelow.append($rightDiv);
        let $settingsDiv = makeDiv("", "createUpdateRepo-settingsDiv");
        $rightDiv.append($settingsDiv);
        $settingsDiv.append(jQuery('<div class="createUpdateRepo-settingsLabel">Name des Repositorys:</div>'));
        $settingsDiv.append(this.$repoName = jQuery('<input type="text" class="createUpdateRepo-inputcolumn"></input>'));
        $settingsDiv.append(jQuery('<div class="createUpdateRepo-settingsLabel">Beschreibung:</div>'));
        $settingsDiv.append(this.$repoDescription = jQuery('<textarea class="createUpdateRepo-inputcolumn" style="min-height: 4em"></textarea>'));
        $settingsDiv.append(jQuery('<div class="createUpdateRepo-settingsLabel">Veröffentlicht für:</div>'));
        $settingsDiv.append(this.$repoPublishedTo = jQuery('<select class="createUpdateRepo-inputcolumn"></select>'));
        setSelectItems(this.$repoPublishedTo, this.publishedToItems);
        $settingsDiv.append(jQuery('<div class="createUpdateRepo-settingsLabel">Eigentümer:</div>'));
        $settingsDiv.append(this.$repoOwner = jQuery('<select class="createUpdateRepo-inputcolumn"></select>'));
        $settingsDiv.append(this.$userlistDiv = makeDiv("updateRepo-userlistDiv"));
        this.$userlistDiv.append(makeDiv(null, "updateRepo-userlistheading", "Benutzer, die das Repository nutzen", { "grid-column": 1 }));
        this.$userlistDiv.append(makeDiv(null, "updateRepo-userlistheading", "Schreibberechtigung", { "grid-column": 2 }));
        $rightDiv.append(this.$userlistDiv);
        let $buttonDiv = makeDiv("updateRepo-buttonDiv");
        $buttonDiv.append(this.$saveButton = makeDiv("", "jo_synchro_button", "Änderungen speichern", { "background-color": "var(--updateButtonBackground)", "color": "var(--updateButtonColor)" }));
        this.$saveButton.on("click", () => { that.saveButtonClicked(); });
        $rightDiv.append($buttonDiv);
    }
    show(repository_id) {
        if (!this.guiReady) {
            this.initGUI();
        }
        let $synchroDiv = jQuery('#updateRepo-div');
        $synchroDiv.css('visibility', 'visible');
        let $mainDiv = jQuery('#main');
        $mainDiv.css('visibility', 'hidden');
        let user = this.main.user;
        this.$saveButton.show();
        let grlq = {
            onlyOwnRepositories: true
        };
        this.$repoListDiv.empty();
        let that = this;
        ajax('getRepositoryList', grlq, (response) => {
            let $firstDiv;
            let firstRepInfo;
            response.repositories.forEach(repInfo => {
                let $div = makeDiv('', 'updateRepo-repoListItem', repInfo.name);
                this.$repoListDiv.append($div);
                $div.on('click', (e) => {
                    that.selectRepository($div, repInfo);
                });
                $div.data('repoInfo', repInfo);
                if (firstRepInfo == null) {
                    firstRepInfo = repInfo;
                    $firstDiv = $div;
                }
            });
            if ($firstDiv != null) {
                this.selectRepository($firstDiv, firstRepInfo);
            }
        });
    }
    selectRepository($repoDiv, repInfo) {
        this.$repoListDiv.find('.updateRepo-repoListItem').removeClass('active');
        $repoDiv.addClass('active');
        this.$repoName.val(repInfo.name);
        this.$repoDescription.val(repInfo.description);
        this.$repoPublishedTo.val(repInfo.published_to);
        this.$repoOwner.empty();
        this.$userlistDiv.not('.updateRepo-userlistheading').remove();
        let req = { repository_id: repInfo.id };
        let that = this;
        ajax('getRepositoryUserList', req, (response) => {
            response.repositoryUserList.forEach(userData => {
                let $userDiv = makeDiv("", "updateRepo-userDiv", `${userData.firstName} ${userData.lastName} (${userData.username})`, { 'grid-column': 1 });
                let $canWriteDiv = makeDiv("", "canWriteDiv", "", { 'grid-column': 2 });
                let $canWriteCheckBox = jQuery('<input type="checkbox">');
                $canWriteDiv.append($canWriteCheckBox);
                //@ts-ignore
                $canWriteCheckBox.attr('checked', userData.canWrite);
                $canWriteCheckBox.data('user', userData);
                that.$userlistDiv.append($userDiv, $canWriteDiv);
            });
            that.$repoOwner.empty();
            setSelectItems(that.$repoOwner, response.repositoryUserList.map(userData => {
                let se = {
                    caption: `${userData.firstName} ${userData.lastName} (${userData.username})`,
                    object: userData,
                    value: userData.user_id + ""
                };
                return se;
            }));
        });
    }
    hide() {
        let $synchroDiv = jQuery('#updateRepo-div');
        $synchroDiv.css('visibility', 'hidden');
        let $mainDiv = jQuery('#main');
        $mainDiv.css('visibility', 'visible');
    }
    saveButtonClicked() {
        let selectedItem = this.$repoListDiv.find('.active').first();
        let repoData = selectedItem.data('repoInfo');
        let owner = getSelectedObject(this.$repoOwner);
        let published_to = getSelectedObject(this.$repoPublishedTo);
        let updateRepositoryRequest = {
            owner_id: owner.user_id,
            description: this.$repoDescription.val(),
            published_to: published_to,
            repository_id: repoData.id
        };
        ajax("updateRepository", updateRepositoryRequest, (response) => {
            //TODO: update user write access..
        });
    }
    exitButtonClicked() {
        this.hide();
    }
}
//# sourceMappingURL=data:application/json;base64,