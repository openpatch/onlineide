export class RepositoryTool {
    static deserializeRepository(repo) {
        if (repo.files != null && repo.files.startsWith('[')) {
            repo.fileEntries = JSON.parse(repo.files);
        }
        else {
            repo.fileEntries = [];
        }
        repo.fileEntries.forEach(fe => fe.text = fe.text.replace(/\r\n/g, "\n"));
        if (!repo.history.endsWith("]"))
            repo.history += "]";
        repo.historyEntries = JSON.parse(repo.history);
    }
    static copyRepository(repo, withHistoryElements) {
        let crepo = Object.assign({}, repo);
        if (repo.fileEntries != null) {
            crepo.fileEntries = [];
            for (let fe of repo.fileEntries) {
                crepo.fileEntries.push(Object.assign({}, fe));
            }
        }
        if (repo.historyEntries != null && withHistoryElements) {
            crepo.historyEntries = [];
            for (let he of repo.historyEntries) {
                let che = Object.assign({}, he);
                if (he.historyFiles != null) {
                    che.historyFiles = [];
                    for (let hfe of he.historyFiles) {
                        che.historyFiles.push(Object.assign({}, hfe));
                    }
                }
                crepo.historyEntries.push(che);
            }
        }
        return crepo;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUmVwb3NpdG9yeVRvb2wuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY2xpZW50L3JlcG9zaXRvcnkvUmVwb3NpdG9yeVRvb2wudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxPQUFPLGNBQWM7SUFFdkIsTUFBTSxDQUFDLHFCQUFxQixDQUFDLElBQWdCO1FBRXpDLElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDbEQsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUM3QzthQUFNO1lBQ0gsSUFBSSxDQUFDLFdBQVcsR0FBRyxFQUFFLENBQUM7U0FDekI7UUFFRCxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7UUFFekUsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQztZQUFFLElBQUksQ0FBQyxPQUFPLElBQUksR0FBRyxDQUFDO1FBQ3JELElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFbkQsQ0FBQztJQUVELE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBZ0IsRUFBRSxtQkFBNEI7UUFFaEUsSUFBSSxLQUFLLEdBQWUsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFaEQsSUFBSSxJQUFJLENBQUMsV0FBVyxJQUFJLElBQUksRUFBRTtZQUMxQixLQUFLLENBQUMsV0FBVyxHQUFHLEVBQUUsQ0FBQztZQUN2QixLQUFLLElBQUksRUFBRSxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7Z0JBQzdCLEtBQUssQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7YUFDakQ7U0FDSjtRQUVELElBQUksSUFBSSxDQUFDLGNBQWMsSUFBSSxJQUFJLElBQUksbUJBQW1CLEVBQUU7WUFDcEQsS0FBSyxDQUFDLGNBQWMsR0FBRyxFQUFFLENBQUM7WUFDMUIsS0FBSyxJQUFJLEVBQUUsSUFBSSxJQUFJLENBQUMsY0FBYyxFQUFFO2dCQUNoQyxJQUFJLEdBQUcsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztnQkFFaEMsSUFBSSxFQUFFLENBQUMsWUFBWSxJQUFJLElBQUksRUFBRTtvQkFDekIsR0FBRyxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUM7b0JBQ3RCLEtBQUssSUFBSSxHQUFHLElBQUksRUFBRSxDQUFDLFlBQVksRUFBRTt3QkFDN0IsR0FBRyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztxQkFDakQ7aUJBQ0o7Z0JBRUQsS0FBSyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDbEM7U0FDSjtRQUVELE9BQU8sS0FBSyxDQUFDO0lBRWpCLENBQUM7Q0FHSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlcG9zaXRvcnkgfSBmcm9tIFwiLi4vY29tbXVuaWNhdGlvbi9EYXRhLmpzXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgUmVwb3NpdG9yeVRvb2wge1xyXG5cclxuICAgIHN0YXRpYyBkZXNlcmlhbGl6ZVJlcG9zaXRvcnkocmVwbzogUmVwb3NpdG9yeSkge1xyXG5cclxuICAgICAgICBpZiAocmVwby5maWxlcyAhPSBudWxsICYmIHJlcG8uZmlsZXMuc3RhcnRzV2l0aCgnWycpKSB7XHJcbiAgICAgICAgICAgIHJlcG8uZmlsZUVudHJpZXMgPSBKU09OLnBhcnNlKHJlcG8uZmlsZXMpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJlcG8uZmlsZUVudHJpZXMgPSBbXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJlcG8uZmlsZUVudHJpZXMuZm9yRWFjaChmZSA9PiBmZS50ZXh0ID0gZmUudGV4dC5yZXBsYWNlKC9cXHJcXG4vZywgXCJcXG5cIikpO1xyXG5cclxuICAgICAgICBpZiAoIXJlcG8uaGlzdG9yeS5lbmRzV2l0aChcIl1cIikpIHJlcG8uaGlzdG9yeSArPSBcIl1cIjtcclxuICAgICAgICByZXBvLmhpc3RvcnlFbnRyaWVzID0gSlNPTi5wYXJzZShyZXBvLmhpc3RvcnkpO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgY29weVJlcG9zaXRvcnkocmVwbzogUmVwb3NpdG9yeSwgd2l0aEhpc3RvcnlFbGVtZW50czogYm9vbGVhbik6IFJlcG9zaXRvcnkge1xyXG5cclxuICAgICAgICBsZXQgY3JlcG86IFJlcG9zaXRvcnkgPSBPYmplY3QuYXNzaWduKHt9LCByZXBvKTtcclxuXHJcbiAgICAgICAgaWYgKHJlcG8uZmlsZUVudHJpZXMgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBjcmVwby5maWxlRW50cmllcyA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBmZSBvZiByZXBvLmZpbGVFbnRyaWVzKSB7XHJcbiAgICAgICAgICAgICAgICBjcmVwby5maWxlRW50cmllcy5wdXNoKE9iamVjdC5hc3NpZ24oe30sIGZlKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChyZXBvLmhpc3RvcnlFbnRyaWVzICE9IG51bGwgJiYgd2l0aEhpc3RvcnlFbGVtZW50cykge1xyXG4gICAgICAgICAgICBjcmVwby5oaXN0b3J5RW50cmllcyA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBoZSBvZiByZXBvLmhpc3RvcnlFbnRyaWVzKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgY2hlID0gT2JqZWN0LmFzc2lnbih7fSwgaGUpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChoZS5oaXN0b3J5RmlsZXMgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoZS5oaXN0b3J5RmlsZXMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBoZmUgb2YgaGUuaGlzdG9yeUZpbGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoZS5oaXN0b3J5RmlsZXMucHVzaChPYmplY3QuYXNzaWduKHt9LCBoZmUpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgY3JlcG8uaGlzdG9yeUVudHJpZXMucHVzaChjaGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gY3JlcG87XHJcblxyXG4gICAgfVxyXG5cclxuICAgIFxyXG59Il19