import { InterpreterState } from "../interpreter/Interpreter.js";
export class KeyboardTool {
    constructor(element, main) {
        this.main = main;
        this.pressedKeys = {};
        this.keyPressedCallbacks = [];
        this.keyUpCallbacks = [];
        this.keyDownCallbacks = [];
        this.registerListeners(element);
    }
    unregisterListeners() {
        this.element.off("keydown");
        this.element.off("keyup");
        this.element.off("keypressed");
    }
    registerListeners(element) {
        this.element = element;
        let that = this;
        element.on("keydown", (e) => {
            let key = e.key;
            if (key == null)
                return true;
            if (e.shiftKey)
                key = "shift+" + key;
            if (e.ctrlKey)
                key = "ctrl" + key;
            if (e.altKey)
                key = "alt" + key;
            that.pressedKeys[key.toLowerCase()] = true;
            for (let kpc of that.keyDownCallbacks) {
                kpc(key);
            }
            // prevent <html>-Element from scrolling in embedded mode
            if (this.main.isEmbedded() && this.main.getInterpreter().state == InterpreterState.running && !this.main.getMonacoEditor().hasTextFocus()) {
                if (["ArrowUp", "ArrowDown", "ArrowLeft", "ArrowRight"].indexOf(e.key) >= 0)
                    e.preventDefault();
            }
            return true;
        });
        element.on("keyup", (e) => {
            let key = e.key;
            if (key == null)
                return true;
            if (typeof key == "undefined")
                return;
            if (e.shiftKey)
                key = "shift+" + key;
            if (e.ctrlKey)
                key = "ctrl" + key;
            if (e.altKey)
                key = "alt" + key;
            that.pressedKeys[key.toLowerCase()] = false;
            for (let kpc of that.keyUpCallbacks) {
                kpc(key);
            }
            // in ActionManager.init there is a 
            // if(that.main.isEmbedded && key == " "){
            //     for(let kpc of that.keyPressedCallbacks){
            //         kpc(key);
            //     }    
            // }
            return true;
        });
        element.on("keyup", (e) => {
            let k = e.key;
            if (e.shiftKey && k.length > 1) {
                k = "[shift]+" + k;
            }
            if (e.ctrlKey && k.length > 1) {
                k = "[ctrl]+" + k;
            }
            if (e.altKey && k.length > 1) {
                k = "[alt]+" + k;
            }
            for (let kpc of that.keyPressedCallbacks) {
                kpc(k);
            }
            return true;
        });
    }
    isPressed(key) {
        if (key == null)
            return null;
        return this.pressedKeys[key.toLowerCase()] == true;
    }
    unsubscribeAllListeners() {
        this.keyPressedCallbacks = [];
    }
}
//# sourceMappingURL=data:application/json;base64,