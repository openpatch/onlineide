export function hash(s) {
    let hash = 0;
    let chr;
    for (let i = 0; i < s.length; i++) {
        chr = s.charCodeAt(i);
        hash = ((hash << 5) - hash) + chr;
        hash |= 0; // Convert to 32bit integer
    }
    return hash;
}
export function escapeHtml(unsafe) {
    return unsafe
        .replace(/['"]+/g, '')
        .replace(/&/g, "&amp;")
        .replace(/</g, "&lt;")
        .replace(/>/g, "&gt;")
        .replace(/"/g, "&quot;")
        .replace(/'/g, "&#039;");
}
export function dateToString(date) {
    return `${twoDez(date.getDate())}.${twoDez(date.getMonth() + 1)}.${date.getFullYear()}, ${twoDez(date.getHours())}:${twoDez(date.getMinutes())}`;
}
export function dateToStringWithoutTime(date) {
    return `${twoDez(date.getDate())}.${twoDez(date.getMonth() + 1)}.${date.getFullYear()}`;
}
function twoDez(z) {
    if (z < 10)
        return "0" + z;
    return "" + z;
}
export function stringToDate(text) {
    let match = text.match(/^(\d{2})\.(\d{2})\.(\d{4}), (\d{2}):(\d{2})$/);
    let date = new Date(Number.parseInt(match[3]), Number.parseInt(match[2]) - 1, Number.parseInt(match[1]), Number.parseInt(match[4]), Number.parseInt(match[5]));
    return date;
}
export function stringWrap(s, length) {
    return s.replace(new RegExp(`(?![^\\n]{1,${length}}$)([^\\n]{1,${length}})\\s`, 'g'), '$1\n');
}
export function formatAsJavadocComment(s, indent = "") {
    let indentString = "";
    if (typeof indent == "string") {
        indentString = indent;
    }
    else {
        for (let i = 0; i < indent; i++) {
            indentString += " ";
        }
    }
    s = stringWrap(s, 60);
    if (s.length > 0)
        s = "\n" + s;
    s = indentString + "/**" + s.replace(/\n/g, "\n" + indentString + " * ") + "\n" + indentString + " */";
    return s;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3RyaW5nVG9vbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY2xpZW50L3Rvb2xzL1N0cmluZ1Rvb2xzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sVUFBVSxJQUFJLENBQUMsQ0FBUztJQUMxQixJQUFJLElBQUksR0FBVyxDQUFDLENBQUM7SUFDckIsSUFBSSxHQUFXLENBQUM7SUFDaEIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDakMsR0FBRyxHQUFLLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDeEIsSUFBSSxHQUFJLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ25DLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQywyQkFBMkI7S0FDdkM7SUFDRCxPQUFPLElBQUksQ0FBQztBQUNoQixDQUFDO0FBRUQsTUFBTSxVQUFVLFVBQVUsQ0FBQyxNQUFjO0lBQ3ZDLE9BQU8sTUFBTTtTQUNSLE9BQU8sQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFDO1NBQ3BCLE9BQU8sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDO1NBQ3RCLE9BQU8sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDO1NBQ3JCLE9BQU8sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDO1NBQ3JCLE9BQU8sQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDO1NBQ3ZCLE9BQU8sQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFDaEMsQ0FBQztBQUVELE1BQU0sVUFBVSxZQUFZLENBQUMsSUFBVTtJQUNyQyxPQUFPLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEdBQUcsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRSxLQUFLLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLEVBQUUsQ0FBQztBQUNuSixDQUFDO0FBRUQsTUFBTSxVQUFVLHVCQUF1QixDQUFDLElBQVU7SUFDaEQsT0FBTyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDO0FBQzFGLENBQUM7QUFFRCxTQUFTLE1BQU0sQ0FBQyxDQUFTO0lBQ3ZCLElBQUcsQ0FBQyxHQUFHLEVBQUU7UUFBRSxPQUFPLEdBQUcsR0FBRyxDQUFDLENBQUM7SUFDMUIsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ2hCLENBQUM7QUFFRCxNQUFNLFVBQVUsWUFBWSxDQUFDLElBQVk7SUFFdkMsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyw4Q0FBOEMsQ0FBQyxDQUFDO0lBRXZFLElBQUksSUFBSSxHQUFTLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUUsQ0FBQztJQUV0SyxPQUFPLElBQUksQ0FBQztBQUNkLENBQUM7QUFFRCxNQUFNLFVBQVUsVUFBVSxDQUFDLENBQVMsRUFBRSxNQUFjO0lBQ2xELE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FDZCxJQUFJLE1BQU0sQ0FBQyxlQUFlLE1BQU0sZ0JBQWdCLE1BQU0sT0FBTyxFQUFFLEdBQUcsQ0FBQyxFQUFFLE1BQU0sQ0FDNUUsQ0FBQztBQUNKLENBQUM7QUFFRCxNQUFNLFVBQVUsc0JBQXNCLENBQUMsQ0FBUyxFQUFFLFNBQXdCLEVBQUU7SUFDMUUsSUFBSSxZQUFZLEdBQUcsRUFBRSxDQUFDO0lBRXRCLElBQUcsT0FBTyxNQUFNLElBQUksUUFBUSxFQUFDO1FBQzNCLFlBQVksR0FBRyxNQUFNLENBQUM7S0FDdkI7U0FBTTtRQUNMLEtBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUM7WUFDN0IsWUFBWSxJQUFJLEdBQUcsQ0FBQztTQUNyQjtLQUNGO0lBRUQsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDdEIsSUFBRyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUM7UUFBRSxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsQ0FBQztJQUM5QixDQUFDLEdBQUcsWUFBWSxHQUFHLEtBQUssR0FBRyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxJQUFJLEdBQUcsWUFBWSxHQUFHLEtBQUssQ0FBQyxHQUFHLElBQUksR0FBRyxZQUFZLEdBQUcsS0FBSyxDQUFDO0lBQ3ZHLE9BQU8sQ0FBQyxDQUFDO0FBQ1gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBoYXNoKHM6IHN0cmluZyl7XHJcbiAgICBsZXQgaGFzaDogbnVtYmVyID0gMDtcclxuICAgIGxldCBjaHI6IG51bWJlcjtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICBjaHIgICA9IHMuY2hhckNvZGVBdChpKTtcclxuICAgICAgaGFzaCAgPSAoKGhhc2ggPDwgNSkgLSBoYXNoKSArIGNocjtcclxuICAgICAgaGFzaCB8PSAwOyAvLyBDb252ZXJ0IHRvIDMyYml0IGludGVnZXJcclxuICAgIH1cclxuICAgIHJldHVybiBoYXNoO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZXNjYXBlSHRtbCh1bnNhZmU6IHN0cmluZyk6IHN0cmluZyB7XHJcbiAgcmV0dXJuIHVuc2FmZVxyXG4gICAgICAucmVwbGFjZSgvWydcIl0rL2csICcnKVxyXG4gICAgICAgLnJlcGxhY2UoLyYvZywgXCImYW1wO1wiKVxyXG4gICAgICAgLnJlcGxhY2UoLzwvZywgXCImbHQ7XCIpXHJcbiAgICAgICAucmVwbGFjZSgvPi9nLCBcIiZndDtcIilcclxuICAgICAgIC5yZXBsYWNlKC9cIi9nLCBcIiZxdW90O1wiKVxyXG4gICAgICAgLnJlcGxhY2UoLycvZywgXCImIzAzOTtcIik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkYXRlVG9TdHJpbmcoZGF0ZTogRGF0ZSk6IHN0cmluZ3tcclxuICByZXR1cm4gYCR7dHdvRGV6KGRhdGUuZ2V0RGF0ZSgpKX0uJHt0d29EZXooZGF0ZS5nZXRNb250aCgpICsgMSl9LiR7ZGF0ZS5nZXRGdWxsWWVhcigpfSwgJHt0d29EZXooZGF0ZS5nZXRIb3VycygpKX06JHt0d29EZXooZGF0ZS5nZXRNaW51dGVzKCkpfWA7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkYXRlVG9TdHJpbmdXaXRob3V0VGltZShkYXRlOiBEYXRlKTogc3RyaW5ne1xyXG4gIHJldHVybiBgJHt0d29EZXooZGF0ZS5nZXREYXRlKCkpfS4ke3R3b0RleihkYXRlLmdldE1vbnRoKCkgKyAxKX0uJHtkYXRlLmdldEZ1bGxZZWFyKCl9YDtcclxufVxyXG5cclxuZnVuY3Rpb24gdHdvRGV6KHo6IG51bWJlcik6c3RyaW5nIHtcclxuICBpZih6IDwgMTApIHJldHVybiBcIjBcIiArIHo7XHJcbiAgcmV0dXJuIFwiXCIgKyB6O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gc3RyaW5nVG9EYXRlKHRleHQ6IHN0cmluZyk6IERhdGUge1xyXG5cclxuICBsZXQgbWF0Y2ggPSB0ZXh0Lm1hdGNoKC9eKFxcZHsyfSlcXC4oXFxkezJ9KVxcLihcXGR7NH0pLCAoXFxkezJ9KTooXFxkezJ9KSQvKTtcclxuXHJcbiAgbGV0IGRhdGU6IERhdGUgPSBuZXcgRGF0ZShOdW1iZXIucGFyc2VJbnQobWF0Y2hbM10pLCBOdW1iZXIucGFyc2VJbnQobWF0Y2hbMl0pIC0gMSwgTnVtYmVyLnBhcnNlSW50KG1hdGNoWzFdKSwgTnVtYmVyLnBhcnNlSW50KG1hdGNoWzRdKSwgTnVtYmVyLnBhcnNlSW50KG1hdGNoWzVdKSApO1xyXG5cclxuICByZXR1cm4gZGF0ZTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ1dyYXAoczogc3RyaW5nLCBsZW5ndGg6IG51bWJlciApOiBzdHJpbmd7XHJcbiAgcmV0dXJuIHMucmVwbGFjZShcclxuICAgIG5ldyBSZWdFeHAoYCg/IVteXFxcXG5dezEsJHtsZW5ndGh9fSQpKFteXFxcXG5dezEsJHtsZW5ndGh9fSlcXFxcc2AsICdnJyksICckMVxcbidcclxuICApO1xyXG59IFxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdEFzSmF2YWRvY0NvbW1lbnQoczogc3RyaW5nLCBpbmRlbnQ6IG51bWJlcnxzdHJpbmcgPSBcIlwiKTogc3RyaW5nIHtcclxuICBsZXQgaW5kZW50U3RyaW5nID0gXCJcIjtcclxuXHJcbiAgaWYodHlwZW9mIGluZGVudCA9PSBcInN0cmluZ1wiKXtcclxuICAgIGluZGVudFN0cmluZyA9IGluZGVudDtcclxuICB9IGVsc2Uge1xyXG4gICAgZm9yKGxldCBpID0gMDsgaSA8IGluZGVudDsgaSsrKXtcclxuICAgICAgaW5kZW50U3RyaW5nICs9IFwiIFwiO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcyA9IHN0cmluZ1dyYXAocywgNjApO1xyXG4gIGlmKHMubGVuZ3RoID4gMCkgcyA9IFwiXFxuXCIgKyBzO1xyXG4gIHMgPSBpbmRlbnRTdHJpbmcgKyBcIi8qKlwiICsgcy5yZXBsYWNlKC9cXG4vZywgXCJcXG5cIiArIGluZGVudFN0cmluZyArIFwiICogXCIpICsgXCJcXG5cIiArIGluZGVudFN0cmluZyArIFwiICovXCI7XHJcbiAgcmV0dXJuIHM7XHJcbn0iXX0=