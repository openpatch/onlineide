export class SVGHelper {
    constructor(width = "0", height = "0") {
        this.inlineStyles = {};
        let ns = 'http://www.w3.org/2000/svg';
        this.svg = document.createElementNS(ns, 'svg');
        jQuery(this.svg).css('pointer-events', 'none');
        this.setTopLeft("0", "0");
        this.svg.setAttributeNS(null, 'width', width);
        this.svg.setAttributeNS(null, 'height', height);
    }
    find(selector) {
        return jQuery(this.svg).find(selector);
    }
    getSVG() {
        return this.svg;
    }
    /**
     * Inserts new SVG Element into given htmlElement
     */
    appendToHtmlElement(htmlElement) {
        // this.svg.setAttributeNS(null, 'id', 'svgtest');
        //xmlns="http://www.w3.org/2000/svg" version="1.1"
        //this.svg.setAttributeNS(null, "xmlns", "http://www.w3.org/2000/svg");
        //this.svg.setAttributeNS(null, "version", "1.1");
        htmlElement.appendChild(this.svg);
        return this;
    }
    setTopLeft(top, left) {
        let $svg = jQuery(this.svg);
        $svg.css({
            top: top,
            left: left,
            position: "absolute"
        });
    }
    setSize(width, height) {
        let $svg = jQuery(this.svg);
        $svg.css({
            width: width,
            height: height
        });
    }
    setAttributes(element = null, attributes) {
        if (element == null) {
            element = this.svg;
        }
        for (let key in attributes) {
            element.setAttributeNS(null, key, attributes[key]);
        }
        ;
    }
    insertElement(name, parent = null, attributes) {
        let ns = 'http://www.w3.org/2000/svg';
        let element = document.createElementNS(ns, name);
        if (parent == null) {
            parent = this.svg;
        }
        this.setAttributes(element, attributes);
        parent.appendChild(element);
        return element;
    }
    insertStyleElement(styles = null) {
        let ns = 'http://www.w3.org/2000/svg';
        if (this.style == null) {
            this.defs = document.createElementNS(ns, 'defs');
            this.style = document.createElementNS(ns, 'style');
            this.defs.appendChild(this.style);
            this.svg.appendChild(this.defs);
        }
        if (styles != null) {
            this.inlineStyles = styles;
            this.refreshInlineStyles();
        }
        return this;
    }
    refreshInlineStyles() {
        let s = "";
        for (let selector in this.inlineStyles) {
            let stylesForSelector = this.inlineStyles[selector];
            if (stylesForSelector != null) {
                s += selector + "{\n";
                for (let key in stylesForSelector) {
                    s += "   " + key + ":" + stylesForSelector[key] + ";\n";
                }
                s += "}\n";
            }
            else {
                s += selector + "\n";
            }
        }
        this.style.textContent = s;
    }
    setStyle(selector, key, value, refresh = true) {
        if (this.style == null) {
            this.insertStyleElement();
        }
        this.setStyleIntern(selector, key, value, refresh);
    }
    setStyleIntern(selector, key, value, refresh = true) {
        let styleForSelector = this.inlineStyles[selector];
        if (styleForSelector == null) {
            this.inlineStyles[selector] = {};
        }
        this.inlineStyles[selector][key] = value;
        if (refresh) {
            this.refreshInlineStyles();
        }
    }
    setStyles(styles = null) {
        if (this.style == null) {
            this.insertStyleElement();
        }
        for (let selector in styles) {
            let stylesForSelector = styles[selector];
            for (let key in stylesForSelector) {
                let value = stylesForSelector[key];
                this.setStyleIntern(selector, key, value, false);
            }
        }
        this.refreshInlineStyles();
        return this;
    }
}
//# sourceMappingURL=data:application/json;base64,