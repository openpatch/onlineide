export class GamepadTool {
    constructor() {
        this.gamepads = [];
        let that = this;
        window.addEventListener("gamepadconnected", function (e) {
            console.log("Gamepad connected at index %d: %s. %d buttons, %d axes.", e.gamepad.index, e.gamepad.id, e.gamepad.buttons.length, e.gamepad.axes.length);
            if (that.gamepads.indexOf(e.gamepad) < 0) {
                that.gamepads.push(e.gamepad);
            }
        });
        window.addEventListener("gamepaddisconnected", function (e) {
            console.log("Gamepad disconnected from index %d: %s", e.gamepad.index, e.gamepad.id);
            let i = that.gamepads.indexOf(e.gamepad);
            if (i >= 0) {
                that.gamepads.splice(i, 1);
            }
        });
    }
    isGamepadButtonPressed(gamepadIndex, buttonIndex) {
        let gp = navigator.getGamepads()[gamepadIndex];
        if (gp == null)
            return false;
        let button = gp.buttons[buttonIndex];
        if (button) {
            // return typeof(button) == "object" ? button.pressed : (button == 1.0);
            return button.pressed;
        }
        else {
            return false;
        }
    }
    getGamepadAxisValue(gamepadIndex, axisIndex) {
        let gp = navigator.getGamepads()[gamepadIndex];
        if (gp == null)
            return 0;
        return gp.axes[axisIndex];
    }
    isGamepadConnected(gamepadIndex) {
        return navigator.getGamepads()[gamepadIndex] != null;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR2FtZXBhZFRvb2wuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY2xpZW50L3Rvb2xzL0dhbWVwYWRUb29sLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE1BQU0sT0FBTyxXQUFXO0lBSXBCO1FBRkEsYUFBUSxHQUFjLEVBQUUsQ0FBQztRQUdyQixJQUFJLElBQUksR0FBRyxJQUFJLENBQUM7UUFDaEIsTUFBTSxDQUFDLGdCQUFnQixDQUFDLGtCQUFrQixFQUFFLFVBQVMsQ0FBZTtZQUNoRSxPQUFPLENBQUMsR0FBRyxDQUFDLHlEQUF5RCxFQUNuRSxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFDN0IsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ2pELElBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBQztnQkFDcEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQ2pDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7UUFFSCxNQUFNLENBQUMsZ0JBQWdCLENBQUMscUJBQXFCLEVBQUUsVUFBUyxDQUFlO1lBQ3JFLE9BQU8sQ0FBQyxHQUFHLENBQUMsd0NBQXdDLEVBQ2xELENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDL0IsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3pDLElBQUcsQ0FBQyxJQUFJLENBQUMsRUFBQztnQkFDUixJQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7YUFDOUI7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxzQkFBc0IsQ0FBQyxZQUFvQixFQUFFLFdBQW1CO1FBQzVELElBQUksRUFBRSxHQUFZLFNBQVMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUN4RCxJQUFHLEVBQUUsSUFBSSxJQUFJO1lBQUUsT0FBTyxLQUFLLENBQUM7UUFDNUIsSUFBSSxNQUFNLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNyQyxJQUFHLE1BQU0sRUFBQztZQUNOLHdFQUF3RTtZQUN4RSxPQUFPLE1BQU0sQ0FBQyxPQUFPLENBQUM7U0FDekI7YUFBTTtZQUFDLE9BQU8sS0FBSyxDQUFDO1NBQUM7SUFDMUIsQ0FBQztJQUVELG1CQUFtQixDQUFDLFlBQW9CLEVBQUUsU0FBaUI7UUFDdkQsSUFBSSxFQUFFLEdBQVksU0FBUyxDQUFDLFdBQVcsRUFBRSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3hELElBQUcsRUFBRSxJQUFJLElBQUk7WUFBRSxPQUFPLENBQUMsQ0FBQztRQUN4QixPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVELGtCQUFrQixDQUFDLFlBQW9CO1FBQ25DLE9BQU8sU0FBUyxDQUFDLFdBQVcsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLElBQUksQ0FBQztJQUN6RCxDQUFDO0NBRUoiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNYWluIH0gZnJvbSBcIi4uL21haW4vTWFpbi5qc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEdhbWVwYWRUb29sIHtcclxuXHJcbiAgICBnYW1lcGFkczogR2FtZXBhZFtdID0gW107XHJcblxyXG4gICAgY29uc3RydWN0b3IoKXtcclxuICAgICAgICBsZXQgdGhhdCA9IHRoaXM7XHJcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJnYW1lcGFkY29ubmVjdGVkXCIsIGZ1bmN0aW9uKGU6IEdhbWVwYWRFdmVudCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkdhbWVwYWQgY29ubmVjdGVkIGF0IGluZGV4ICVkOiAlcy4gJWQgYnV0dG9ucywgJWQgYXhlcy5cIixcclxuICAgICAgICAgICAgICBlLmdhbWVwYWQuaW5kZXgsIGUuZ2FtZXBhZC5pZCxcclxuICAgICAgICAgICAgICBlLmdhbWVwYWQuYnV0dG9ucy5sZW5ndGgsIGUuZ2FtZXBhZC5heGVzLmxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgaWYodGhhdC5nYW1lcGFkcy5pbmRleE9mKGUuZ2FtZXBhZCkgPCAwKXtcclxuICAgICAgICAgICAgICAgICAgdGhhdC5nYW1lcGFkcy5wdXNoKGUuZ2FtZXBhZCk7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJnYW1lcGFkZGlzY29ubmVjdGVkXCIsIGZ1bmN0aW9uKGU6IEdhbWVwYWRFdmVudCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkdhbWVwYWQgZGlzY29ubmVjdGVkIGZyb20gaW5kZXggJWQ6ICVzXCIsXHJcbiAgICAgICAgICAgICAgZS5nYW1lcGFkLmluZGV4LCBlLmdhbWVwYWQuaWQpO1xyXG4gICAgICAgICAgICAgIGxldCBpID0gdGhhdC5nYW1lcGFkcy5pbmRleE9mKGUuZ2FtZXBhZCk7XHJcbiAgICAgICAgICAgICAgaWYoaSA+PSAwKXtcclxuICAgICAgICAgICAgICAgIHRoYXQuZ2FtZXBhZHMuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgaXNHYW1lcGFkQnV0dG9uUHJlc3NlZChnYW1lcGFkSW5kZXg6IG51bWJlciwgYnV0dG9uSW5kZXg6IG51bWJlcik6IGJvb2xlYW57XHJcbiAgICAgICAgbGV0IGdwOiBHYW1lcGFkID0gbmF2aWdhdG9yLmdldEdhbWVwYWRzKClbZ2FtZXBhZEluZGV4XTtcclxuICAgICAgICBpZihncCA9PSBudWxsKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgbGV0IGJ1dHRvbiA9IGdwLmJ1dHRvbnNbYnV0dG9uSW5kZXhdO1xyXG4gICAgICAgIGlmKGJ1dHRvbil7XHJcbiAgICAgICAgICAgIC8vIHJldHVybiB0eXBlb2YoYnV0dG9uKSA9PSBcIm9iamVjdFwiID8gYnV0dG9uLnByZXNzZWQgOiAoYnV0dG9uID09IDEuMCk7XHJcbiAgICAgICAgICAgIHJldHVybiBidXR0b24ucHJlc3NlZDtcclxuICAgICAgICB9IGVsc2Uge3JldHVybiBmYWxzZTt9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0R2FtZXBhZEF4aXNWYWx1ZShnYW1lcGFkSW5kZXg6IG51bWJlciwgYXhpc0luZGV4OiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgICAgIGxldCBncDogR2FtZXBhZCA9IG5hdmlnYXRvci5nZXRHYW1lcGFkcygpW2dhbWVwYWRJbmRleF07XHJcbiAgICAgICAgaWYoZ3AgPT0gbnVsbCkgcmV0dXJuIDA7XHJcbiAgICAgICAgcmV0dXJuIGdwLmF4ZXNbYXhpc0luZGV4XTtcclxuICAgIH1cclxuXHJcbiAgICBpc0dhbWVwYWRDb25uZWN0ZWQoZ2FtZXBhZEluZGV4OiBudW1iZXIpe1xyXG4gICAgICAgIHJldHVybiBuYXZpZ2F0b3IuZ2V0R2FtZXBhZHMoKVtnYW1lcGFkSW5kZXhdICE9IG51bGw7XHJcbiAgICB9XHJcblxyXG59Il19