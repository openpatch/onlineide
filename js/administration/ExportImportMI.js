import { AdminMenuItem } from "./AdminMenuItem.js";
import { ajax } from "../communication/AjaxHelper.js";
export class ExportImportMI extends AdminMenuItem {
    constructor() {
        super(...arguments);
        this.schoolGridName = "schoolsGridForImport";
        this.schoolDataList = [];
    }
    checkPermission(user) {
        return user.is_admin;
    }
    getButtonIdentifier() {
        return "Schulen Exportieren/Importieren";
    }
    onMenuButtonPressed($mainHeading, $tableLeft, $tableRight, $mainFooter) {
        let that = this;
        if (this.schoolGrid != null) {
            this.schoolGrid.render();
        }
        else {
            $tableLeft.w2grid({
                name: this.schoolGridName,
                header: 'Schulen',
                // selectType: "cell",
                multiSelect: true,
                show: {
                    header: true,
                    toolbar: true,
                    toolbarAdd: true,
                    toolbarDelete: true,
                    footer: true,
                    selectColumn: true,
                    toolbarSearch: false
                },
                recid: "id",
                columns: [
                    { field: 'id', caption: 'ID', size: '20px', sortable: true, hidden: true },
                    { field: 'name', caption: 'Bezeichnung', size: '30%', sortable: true, resizable: true, editable: { type: 'text' } },
                    { field: 'kuerzel', caption: 'KÃ¼rzel', size: '10%', sortable: true, resizable: true, editable: { type: 'text', maxlength: "10" } },
                    { field: 'numberOfClasses', caption: 'Klassen', size: '30%', sortable: true, resizable: true },
                    { field: 'numberOfUsers', caption: 'User', size: '30%', sortable: true, resizable: true },
                ],
                searches: [
                    { field: 'name', label: 'Bezeichnung', type: 'text' }
                ],
                sortData: [{ field: 'name', direction: 'asc' }, { field: 'kuerzel', direction: 'asc' },
                    { field: 'numberOfClasses', direction: 'asc' }, { field: 'numberOfUsers', direction: 'asc' }],
                onSelect: (event) => { event.done(() => { that.onChangeSelection(event); }); },
                onUnSelect: (event) => { event.done(() => { that.onChangeSelection(event); }); },
                onAdd: (event) => { that.onAddSchool(); },
                onChange: (event) => { that.onUpdateSchool(event); },
                onDelete: (event) => { that.onDeleteSchools(event); },
            });
            this.schoolGrid = w2ui[this.schoolGridName];
        }
        this.loadTablesFromSchoolObject();
        $tableRight.empty();
        $tableRight.append(jQuery(`
        <div id="jo_exportschools">
        <div>
            <a href="exportSchools"><b>Markierte Schulen exportieren</b></a>
        </div>
        <div style="margin-top: 10px">
            <b>Schulen importieren:</b>
            <form action="servlet/importSchools" method="POST" enctype="multipart/form-data">
                <input type="file" name="files" multiple>
                <input id="jo_upload_school_button" type="button" value="Upload">
              </form>
        </div>
        <div class="jo_importSchoolsLoggingDiv"></div>
    </div>
        `));
        jQuery('#jo_upload_school_button').on('click', () => {
            let loggingDiv = jQuery('.jo_importSchoolsLoggingDiv');
            loggingDiv.empty();
            loggingDiv.append(jQuery('<div style="color: green; font-weight: bold; margin-bottom: 5px;">Die Daten werden hochgeladen. Bitte warten...</div>'));
            jQuery.ajax({
                url: 'servlet/importSchools',
                type: 'POST',
                data: new FormData(jQuery('#jo_exportschools form')[0]),
                processData: false,
                enctype: 'multipart/form-data',
                contentType: false,
                cache: false
            }).done(function (response) {
                console.log(response);
                let fetchLog = () => {
                    let request = { type: response.messageType };
                    ajax("getMessages", request, (response) => {
                        if (response.messages.length > 0) {
                            let done = false;
                            for (let message of response.messages) {
                                loggingDiv.append(jQuery('<div>' + message.text + "</div>"));
                                loggingDiv[0].scrollTop = loggingDiv[0].scrollHeight;
                                done = done || message.done;
                                if (message.text.indexOf("abgeschlossen!") >= 0) {
                                    that.loadTablesFromSchoolObject();
                                }
                            }
                            if (done) {
                                that.loadTablesFromSchoolObject();
                            }
                            else {
                                setTimeout(fetchLog, 1000);
                            }
                        }
                        else {
                            setTimeout(fetchLog, 1000);
                        }
                    });
                };
                fetchLog();
            }).fail(function () {
                console.log("An error occurred, the files couldn't be sent!");
            });
        });
    }
    onDeleteSchools(event) {
        if (!event.force || event.isStopped)
            return;
        let recIds = this.schoolGrid.getSelection();
        //@ts-ignore
        // recIds = <any>this.schoolGrid.getSelection().map((str) => str.recid).filter((value, index, array) => array.indexOf(value) === index);
        // let selectedSchools: SchoolData[] = <SchoolData[]>this.schoolGrid.records.filter(
        //     (cd: SchoolData) => recIds.indexOf(cd.id) >= 0);
        let that = this;
        let deleteOneSchool = () => {
            if (recIds.length > 0) {
                let id = recIds.pop();
                let request = {
                    type: "delete",
                    data: null,
                    id: id,
                };
                ajax("CRUDSchool", request, (response) => {
                    this.schoolGrid.remove("" + id);
                    this.schoolGrid.refresh();
                    deleteOneSchool();
                }, () => {
                    this.schoolGrid.refresh();
                });
            }
        };
        deleteOneSchool();
    }
    onUpdateSchool(event) {
        let data = this.schoolGrid.records[event.index];
        let field = this.schoolGrid.columns[event.column]["field"];
        data[field] = event.value_new;
        let request = {
            type: "update",
            data: data,
        };
        ajax("CRUDSchool", request, (response) => {
            // console.log(data);
            delete data["w2ui"]["changes"];
            this.schoolGrid.refreshCell(data["recid"], field);
        }, () => {
            data[field] = event.value_original;
            this.schoolGrid.refresh();
        });
    }
    onAddSchool() {
        let request = {
            type: "create",
            data: {
                id: -1,
                name: "Name der Schule",
                kuerzel: "kuerzel",
                classes: [],
                usersWithoutClass: []
            },
        };
        ajax("CRUDSchool", request, (response) => {
            let cd = request.data;
            cd.id = response.id;
            this.schoolGrid.add(cd);
            this.schoolGrid.editField(cd.id + "", 1, undefined, { keyCode: 13 });
            this.selectTextInCell();
        });
    }
    onChangeSelection(event) {
        let recIds = this.schoolGrid.getSelection();
        if (recIds.length == 0) {
            return;
        }
        jQuery('#jo_exportschools a').attr('href', 'servlet/exportSchools?ids=' + recIds.join(','));
    }
    loadTablesFromSchoolObject() {
        let userData = this.administration.userData;
        let school_id = userData.schule_id;
        if (userData.is_admin)
            school_id = null;
        let request = { school_id: school_id };
        ajax("getSchoolData", request, (data) => {
            this.schoolDataList = data.schoolData;
            this.schoolGrid.clear();
            for (let school of this.schoolDataList) {
                school["numberOfClasses"] = school.classes.length;
                let n = 0;
                school.classes.forEach(c => n += c.students.length);
                n += school.usersWithoutClass.length;
                school["numberOfUsers"] = n;
            }
            this.schoolGrid.add(this.schoolDataList);
            this.schoolGrid.refresh();
        }, (error) => {
            w2alert('Fehler beim Holen der Daten: ' + error);
            debugger;
        });
    }
}
//# sourceMappingURL=data:application/json;base64,