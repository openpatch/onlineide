import { Method, Parameterlist } from "../compiler/types/Types.js";
import { Klass, Interface } from "../compiler/types/Class.js";
import { stringPrimitiveType, intPrimitiveType, voidPrimitiveType } from "../compiler/types/PrimitiveTypes.js";
import { RuntimeObject } from "../interpreter/RuntimeObject.js";
export class SystemToolsClass extends Klass {
    constructor(module) {
        super("SystemTools", module, "Klasse mit statischen Methoden für Systemfunktionen, z.B. Löschen der Ausgabe, Registrieren eines Tastaturlisteners usw.");
        this.setBaseClass(module.typeStore.getType("Object"));
        this.staticClass.setupAttributeIndicesRecursive();
        this.staticClass.classObject = new RuntimeObject(this.staticClass);
        this.addMethod(new Method("clearScreen", new Parameterlist([]), null, (parameters) => {
            module.main.getInterpreter().printManager.clear();
        }, false, true, "Löscht den Bildschirm"));
        this.addMethod(new Method("setSpeed", new Parameterlist([
            { identifier: "speed", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }
        ]), null, (parameters) => {
            let speed = parameters[1].value;
            module.main.getInterpreter().controlButtons.speedControl.setSpeedInStepsPerSecond(speed >= 1 ? speed : "max");
        }, false, true, "Setzt die Ausführungsgeschwindigkeit. Der Parameter speed wir in Steps/Sekunde angegeben. Eine negative Zahl bedeutet: 'maximal'."));
        this.addMethod(new Method("getSpeed", new Parameterlist([]), intPrimitiveType, (parameters) => {
            return module.main.getInterpreter().controlButtons.speedControl.getSpeedInStepsPerSecond();
        }, false, true, "Gibt die Ausführungsgeschwindigkeit in Steps pro Sekunde zurück."));
        this.addMethod(new Method("pause", new Parameterlist([
            { identifier: "durationInMs", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }
        ]), null, (parameters) => {
        }, false, true, "Pausiert das Programm für die angegebene Zeit in ms."));
        this.addMethod(new Method("addKeyListener", new Parameterlist([
            { identifier: "keyListener", type: module.typeStore.getType("KeyListener"), declaration: null, usagePositions: null, isFinal: true }
        ]), null, (parameters) => {
            let r = parameters[1].value;
            let method = r.class.getMethodBySignature("onKeyTyped(String)");
            if (method != null) {
                module.main.getInterpreter().keyboardTool.keyPressedCallbacks.push((key) => {
                    let program = method === null || method === void 0 ? void 0 : method.program;
                    let invoke = method === null || method === void 0 ? void 0 : method.invoke;
                    let stackElements = [
                        {
                            type: r.class,
                            value: r
                        },
                        {
                            type: stringPrimitiveType,
                            value: key
                        }
                    ];
                    if (program != null) {
                        module.main.getInterpreter().runTimer(method, stackElements, null, false);
                    }
                    else if (invoke != null) {
                        invoke([]);
                    }
                });
            }
        }, false, true, "Fügt einen KeyListener hinzu, dessen Methode keyTyped immer dann aufgerufen wird, wenn eine Taste gedrückt und anschließend losgelassen wird."));
        // this.addMethod(new Method("playSound", new Parameterlist([
        //     { identifier: "sound", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true }
        // ]), null,
        // (parameters) => {
        //     let sound: string = parameters[1].value;
        //     SoundTools.play(sound);
        // }    
        // , false, true, "Spielt einen Sound ab. Die Möglichen Sounds sind als statische Variablen der Klasse Sound hinterlegt. Tippe als Parameter also Sound gefolgt von einem Punkt ein, um eine Auswahl zu sehen!"));
    }
}
export class KeyListener extends Interface {
    constructor(module) {
        super("KeyListener", module, "Interface mit Methode onKeyTyped. Eine Klasse, die dieses Interface implementiert, kann auf Tastatureingaben reagieren. Ein Objekt dieser Klasse muss zuvor aber mit System.addKeyListener() registriert werden.");
        this.addMethod(new Method("onKeyTyped", new Parameterlist([
            { identifier: "key", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true }
        ]), voidPrimitiveType, null, // no implementation!
        false, false, "Wird aufgerufen, nachdem eine Taste gedrückt wurde."));
    }
}
export class PrintStreamClass extends Klass {
    constructor(module) {
        super("PrintStream", module, "Interne Hilfsklasse, um System.out.println zu ermöglichen. Das Objekt System.out ist von der Klasse PrintStream.");
        this.setBaseClass(module.typeStore.getType("Object"));
        this.addMethod(new Method("print", new Parameterlist([
            { identifier: "text", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true }
        ]), null, (parameters) => {
            module.main.getInterpreter().printManager.print(parameters[1].value);
        }, false, true, "Gibt den Text aus."));
        this.addMethod(new Method("println", new Parameterlist([
            { identifier: "text", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true }
        ]), null, (parameters) => {
            module.main.getInterpreter().printManager.println(parameters[1].value);
        }, false, true, "Gibt den Text aus, gefolgt von einem Zeilensprung."));
    }
}
//# sourceMappingURL=data:application/json;base64,