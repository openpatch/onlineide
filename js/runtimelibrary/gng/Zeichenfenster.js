import { Klass } from "../../compiler/types/Class.js";
import { Method, Parameterlist } from "../../compiler/types/Types.js";
import { intPrimitiveType, voidPrimitiveType } from "../../compiler/types/PrimitiveTypes.js";
import { RuntimeObject } from "../../interpreter/RuntimeObject.js";
import { WorldHelper } from "../graphics/World.js";
export class GNGZeichenfensterClass extends Klass {
    constructor(module) {
        super("Zeichenfenster", module, "Grafische Zeichenfläche mit Koordinatensystem");
        this.module = module;
        this.setBaseClass(module.typeStore.getType("Object"));
        // let groupType = <GroupClass>module.typeStore.getType("Group");
        let aktionsempfaengerType = module.typeStore.getType("Aktionsempfaenger");
        let symbolArtType = module.typeStore.getType("SymbolArt");
        // this.addAttribute(new Attribute("PI", doublePrimitiveType, (object) => { return Math.PI }, true, Visibility.public, true, "Die Kreiszahl Pi (3.1415...)"));
        this.addMethod(new Method("MalflächenBreiteGeben", new Parameterlist([]), intPrimitiveType, (parameters) => {
            return Math.round(this.getWorldHelper().width);
        }, false, true, 'Gibt die Breite des Zeichenbereichs in Pixeln zurück.', false));
        this.addMethod(new Method("MalflächenHöheGeben", new Parameterlist([]), intPrimitiveType, (parameters) => {
            return Math.round(this.getWorldHelper().width);
        }, false, true, 'Gibt die Höhe des Zeichenbereichs in Pixeln zurück.', false));
        this.addMethod(new Method("AktionsEmpfängerEintragen", new Parameterlist([
            { identifier: "neu", type: aktionsempfaengerType, declaration: null, usagePositions: null, isFinal: true },
        ]), voidPrimitiveType, (parameters) => {
            let wh = this.getWorldHelper();
            let aktionsempfaenger = parameters[1].value;
            let klass = aktionsempfaenger.class;
            let methodList = ["Ausführen()", "Taste(char)", "SonderTaste(int)", "Geklickt(int, int, int)"];
            for (let ms of methodList) {
                let method = klass.getMethodBySignature(ms);
                if ((method === null || method === void 0 ? void 0 : method.program) != null || (method === null || method === void 0 ? void 0 : method.invoke) != null) {
                    wh.aktionsempfaengerList.push({
                        //@ts-ignore
                        methodIdentifier: ms,
                        method: method,
                        runtimeObject: aktionsempfaenger
                    });
                }
            }
        }, false, true, 'Trägt einen neuen Aktionsempfänger ein.', false));
        this.addMethod(new Method("AktionsEmpfängerEntfernen", new Parameterlist([
            { identifier: "alt", type: aktionsempfaengerType, declaration: null, usagePositions: null, isFinal: true },
        ]), voidPrimitiveType, (parameters) => {
            let wh = this.getWorldHelper();
            let aktionsempfaenger = parameters[1].value;
            wh.aktionsempfaengerList = wh.aktionsempfaengerList.filter(ae => ae.runtimeObject != aktionsempfaenger);
        }, false, true, 'Löscht einen Aktionsempfänger aus der Liste.', false));
        this.addMethod(new Method("TaktgeberStarten", new Parameterlist([]), voidPrimitiveType, (parameters) => {
            this.getWorldHelper().gngTaktgeberEnabled = true;
        }, false, true, 'Startet den Taktgeber', false));
        this.addMethod(new Method("TaktgeberStoppen", new Parameterlist([]), voidPrimitiveType, (parameters) => {
            this.getWorldHelper().gngTaktgeberEnabled = false;
        }, false, true, 'Stoppt den Taktgeber', false));
        this.addMethod(new Method("TaktdauerSetzen", new Parameterlist([
            { identifier: "dauer", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
        ]), voidPrimitiveType, (parameters) => {
            let wh = this.getWorldHelper();
            let dauer = parameters[1].value;
            wh.gngTaktdauer = dauer;
        }, false, true, 'Setzt die Taktdauer des Zeitgebers in Millisekunden', false));
    }
    getWorldHelper(breite = 800, höhe = 600) {
        var _a, _b, _c, _d;
        let wh = (_c = (_b = (_a = this.module) === null || _a === void 0 ? void 0 : _a.main) === null || _b === void 0 ? void 0 : _b.getInterpreter()) === null || _c === void 0 ? void 0 : _c.worldHelper;
        if (wh != null) {
            if (wh.width != breite || wh.height != höhe) {
                let ratio = Math.round(höhe / breite * 100);
                wh.$containerOuter.css('padding-bottom', ratio + "%");
                wh.stage.localTransform.scale(wh.width / breite, wh.height / höhe);
                wh.width = breite;
                wh.height = höhe;
                // this.stage.localTransform.rotate(45/180*Math.PI);
                // this.stage.localTransform.translate(400,300);
                wh.stage.transform.onChange();
                (_d = this.module.main.getRightDiv()) === null || _d === void 0 ? void 0 : _d.adjustWidthToWorld();
            }
            return wh;
        }
        else {
            let worldObject = new RuntimeObject(this.module.typeStore.getType("World"));
            let wh = new WorldHelper(breite, höhe, this.module, worldObject);
            worldObject.intrinsicData["World"] = wh;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,