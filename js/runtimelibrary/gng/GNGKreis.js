import { Klass, Visibility } from "../../compiler/types/Class.js";
import { intPrimitiveType } from "../../compiler/types/PrimitiveTypes.js";
import { Attribute, Method, Parameterlist } from "../../compiler/types/Types.js";
import { CircleHelper } from "../graphics/Circle.js";
export class GNGKreisClass extends Klass {
    constructor(module, moduleStore) {
        super("Kreis", module, "Kreis-Klasse der Graphics'n Games-Bibliothek (Cornelsen-Verlag)");
        this.setBaseClass(module.typeStore.getType("GNGBaseFigur"));
        this.addAttribute(new Attribute("radius", intPrimitiveType, (value) => {
            let sh = value.object.intrinsicData["Actor"];
            value.value = Math.round(sh.r * sh.displayObject.scale.x);
        }, false, Visibility.protected, false, "Radius des Kreises"));
        this.setupAttributeIndicesRecursive();
        this.addMethod(new Method("Kreis", new Parameterlist([]), null, (parameters) => {
            let o = parameters[0].value;
            o.intrinsicData["isGNG"] = true;
            let rh = new CircleHelper(60, 60, 50, module.main.getInterpreter(), o);
            o.intrinsicData["Actor"] = rh;
            o.intrinsicData["moveAnchor"] = { x: 60, y: 60 };
            o.intrinsicData["Farbe"] = "rot";
            rh.setFillColor(0xff0000);
        }, false, false, 'Instanziert ein neues Kreis-Objekt.', true));
        this.addMethod(new Method("RadiusSetzen", new Parameterlist([
            { identifier: "radius", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }
        ]), null, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            let radius = parameters[1].value;
            if (sh.testdestroyed("radiusSetzen"))
                return;
            sh.setRadius(radius);
        }, false, false, "Setzt den Radius des Kreis-Objekts.", false));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR05HS3JlaXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY2xpZW50L3J1bnRpbWVsaWJyYXJ5L2duZy9HTkdLcmVpcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQzFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLGFBQWEsRUFBUyxNQUFNLCtCQUErQixDQUFDO0FBRXhGLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUdyRCxNQUFNLE9BQU8sYUFBYyxTQUFRLEtBQUs7SUFFcEMsWUFBWSxNQUFjLEVBQUUsV0FBd0I7UUFFaEQsS0FBSyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsaUVBQWlFLENBQUMsQ0FBQztRQUUxRixJQUFJLENBQUMsWUFBWSxDQUFRLE1BQU0sQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7UUFFbkUsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLFNBQVMsQ0FBQyxRQUFRLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQyxLQUFZLEVBQUUsRUFBRTtZQUN6RSxJQUFJLEVBQUUsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUM3QyxLQUFLLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5RCxDQUFDLEVBQUUsS0FBSyxFQUFFLFVBQVUsQ0FBQyxTQUFTLEVBQUUsS0FBSyxFQUFFLG9CQUFvQixDQUFDLENBQUMsQ0FBQztRQUU5RCxJQUFJLENBQUMsOEJBQThCLEVBQUUsQ0FBQztRQUV0QyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksTUFBTSxDQUFDLE9BQU8sRUFBRSxJQUFJLGFBQWEsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQzFELENBQUMsVUFBVSxFQUFFLEVBQUU7WUFFWCxJQUFJLENBQUMsR0FBa0IsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztZQUMzQyxDQUFDLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQztZQUVoQyxJQUFJLEVBQUUsR0FBRyxJQUFJLFlBQVksQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQ3ZFLENBQUMsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxDQUFDO1lBRTlCLENBQUMsQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUMsQ0FBQztZQUUvQyxDQUFDLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEtBQUssQ0FBQztZQUNqQyxFQUFFLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRTlCLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLHFDQUFxQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7UUFFbkUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxjQUFjLEVBQUUsSUFBSSxhQUFhLENBQUM7WUFDeEQsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBRSxnQkFBZ0IsRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFLGNBQWMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRTtTQUMzRyxDQUFDLEVBQUUsSUFBSSxFQUNKLENBQUMsVUFBVSxFQUFFLEVBQUU7WUFFWCxJQUFJLENBQUMsR0FBa0IsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztZQUMzQyxJQUFJLEVBQUUsR0FBaUIsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNoRCxJQUFJLE1BQU0sR0FBVyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1lBRXpDLElBQUksRUFBRSxDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQUM7Z0JBQUUsT0FBTztZQUU3QyxFQUFFLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBRXpCLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLHFDQUFxQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFHeEUsQ0FBQztDQUVKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTW9kdWxlLCBNb2R1bGVTdG9yZSB9IGZyb20gXCIuLi8uLi9jb21waWxlci9wYXJzZXIvTW9kdWxlLmpzXCI7XG5pbXBvcnQgeyBLbGFzcywgVmlzaWJpbGl0eSB9IGZyb20gXCIuLi8uLi9jb21waWxlci90eXBlcy9DbGFzcy5qc1wiO1xuaW1wb3J0IHsgaW50UHJpbWl0aXZlVHlwZSB9IGZyb20gXCIuLi8uLi9jb21waWxlci90eXBlcy9QcmltaXRpdmVUeXBlcy5qc1wiO1xuaW1wb3J0IHsgQXR0cmlidXRlLCBNZXRob2QsIFBhcmFtZXRlcmxpc3QsIFZhbHVlIH0gZnJvbSBcIi4uLy4uL2NvbXBpbGVyL3R5cGVzL1R5cGVzLmpzXCI7XG5pbXBvcnQgeyBSdW50aW1lT2JqZWN0IH0gZnJvbSBcIi4uLy4uL2ludGVycHJldGVyL1J1bnRpbWVPYmplY3QuanNcIjtcbmltcG9ydCB7IENpcmNsZUhlbHBlciB9IGZyb20gXCIuLi9ncmFwaGljcy9DaXJjbGUuanNcIjtcbmltcG9ydCB7IFJlY3RhbmdsZUhlbHBlciB9IGZyb20gXCIuLi9ncmFwaGljcy9SZWN0YW5nbGUuanNcIjtcblxuZXhwb3J0IGNsYXNzIEdOR0tyZWlzQ2xhc3MgZXh0ZW5kcyBLbGFzcyB7XG5cbiAgICBjb25zdHJ1Y3Rvcihtb2R1bGU6IE1vZHVsZSwgbW9kdWxlU3RvcmU6IE1vZHVsZVN0b3JlKSB7XG5cbiAgICAgICAgc3VwZXIoXCJLcmVpc1wiLCBtb2R1bGUsIFwiS3JlaXMtS2xhc3NlIGRlciBHcmFwaGljcyduIEdhbWVzLUJpYmxpb3RoZWsgKENvcm5lbHNlbi1WZXJsYWcpXCIpO1xuXG4gICAgICAgIHRoaXMuc2V0QmFzZUNsYXNzKDxLbGFzcz5tb2R1bGUudHlwZVN0b3JlLmdldFR5cGUoXCJHTkdCYXNlRmlndXJcIikpO1xuXG4gICAgICAgIHRoaXMuYWRkQXR0cmlidXRlKG5ldyBBdHRyaWJ1dGUoXCJyYWRpdXNcIiwgaW50UHJpbWl0aXZlVHlwZSwgKHZhbHVlOiBWYWx1ZSkgPT4geyBcbiAgICAgICAgICAgIGxldCBzaCA9IHZhbHVlLm9iamVjdC5pbnRyaW5zaWNEYXRhW1wiQWN0b3JcIl07XG4gICAgICAgICAgICB2YWx1ZS52YWx1ZSA9IE1hdGgucm91bmQoc2guciAqIHNoLmRpc3BsYXlPYmplY3Quc2NhbGUueCk7IFxuICAgICAgICB9LCBmYWxzZSwgVmlzaWJpbGl0eS5wcm90ZWN0ZWQsIGZhbHNlLCBcIlJhZGl1cyBkZXMgS3JlaXNlc1wiKSk7XG5cbiAgICAgICAgdGhpcy5zZXR1cEF0dHJpYnV0ZUluZGljZXNSZWN1cnNpdmUoKTtcblxuICAgICAgICB0aGlzLmFkZE1ldGhvZChuZXcgTWV0aG9kKFwiS3JlaXNcIiwgbmV3IFBhcmFtZXRlcmxpc3QoW10pLCBudWxsLFxuICAgICAgICAgICAgKHBhcmFtZXRlcnMpID0+IHtcblxuICAgICAgICAgICAgICAgIGxldCBvOiBSdW50aW1lT2JqZWN0ID0gcGFyYW1ldGVyc1swXS52YWx1ZTtcbiAgICAgICAgICAgICAgICBvLmludHJpbnNpY0RhdGFbXCJpc0dOR1wiXSA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICBsZXQgcmggPSBuZXcgQ2lyY2xlSGVscGVyKDYwLCA2MCwgNTAsIG1vZHVsZS5tYWluLmdldEludGVycHJldGVyKCksIG8pO1xuICAgICAgICAgICAgICAgIG8uaW50cmluc2ljRGF0YVtcIkFjdG9yXCJdID0gcmg7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgby5pbnRyaW5zaWNEYXRhW1wibW92ZUFuY2hvclwiXSA9IHt4OiA2MCwgeTogNjB9O1xuXG4gICAgICAgICAgICAgICAgby5pbnRyaW5zaWNEYXRhW1wiRmFyYmVcIl0gPSBcInJvdFwiO1xuICAgICAgICAgICAgICAgIHJoLnNldEZpbGxDb2xvcigweGZmMDAwMCk7XG5cbiAgICAgICAgICAgIH0sIGZhbHNlLCBmYWxzZSwgJ0luc3RhbnppZXJ0IGVpbiBuZXVlcyBLcmVpcy1PYmpla3QuJywgdHJ1ZSkpO1xuXG4gICAgICAgIHRoaXMuYWRkTWV0aG9kKG5ldyBNZXRob2QoXCJSYWRpdXNTZXR6ZW5cIiwgbmV3IFBhcmFtZXRlcmxpc3QoW1xuICAgICAgICAgICAgeyBpZGVudGlmaWVyOiBcInJhZGl1c1wiLCB0eXBlOiBpbnRQcmltaXRpdmVUeXBlLCBkZWNsYXJhdGlvbjogbnVsbCwgdXNhZ2VQb3NpdGlvbnM6IG51bGwsIGlzRmluYWw6IHRydWUgfVxuICAgICAgICBdKSwgbnVsbCxcbiAgICAgICAgICAgIChwYXJhbWV0ZXJzKSA9PiB7XG5cbiAgICAgICAgICAgICAgICBsZXQgbzogUnVudGltZU9iamVjdCA9IHBhcmFtZXRlcnNbMF0udmFsdWU7XG4gICAgICAgICAgICAgICAgbGV0IHNoOiBDaXJjbGVIZWxwZXIgPSBvLmludHJpbnNpY0RhdGFbXCJBY3RvclwiXTtcbiAgICAgICAgICAgICAgICBsZXQgcmFkaXVzOiBudW1iZXIgPSBwYXJhbWV0ZXJzWzFdLnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgaWYgKHNoLnRlc3RkZXN0cm95ZWQoXCJyYWRpdXNTZXR6ZW5cIikpIHJldHVybjtcblxuICAgICAgICAgICAgICAgIHNoLnNldFJhZGl1cyhyYWRpdXMpO1xuXG4gICAgICAgICAgICB9LCBmYWxzZSwgZmFsc2UsIFwiU2V0enQgZGVuIFJhZGl1cyBkZXMgS3JlaXMtT2JqZWt0cy5cIiwgZmFsc2UpKTtcblxuXG4gICAgfVxuXG59XG5cbiJdfQ==