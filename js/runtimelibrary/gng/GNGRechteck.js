import { Klass, Visibility } from "../../compiler/types/Class.js";
import { intPrimitiveType } from "../../compiler/types/PrimitiveTypes.js";
import { Attribute, Method, Parameterlist } from "../../compiler/types/Types.js";
import { RectangleHelper } from "../graphics/Rectangle.js";
export class GNGRechteckClass extends Klass {
    constructor(module, moduleStore) {
        super("Rechteck", module, "Rechteck-Klasse der Graphics'n Games-Bibliothek (Cornelsen-Verlag)");
        this.setBaseClass(module.typeStore.getType("GNGBaseFigur"));
        this.addAttribute(new Attribute("breite", intPrimitiveType, (value) => {
            let sh = value.object.intrinsicData["Actor"];
            value.value = Math.round(Math.abs(sh.width * sh.displayObject.scale.x));
        }, false, Visibility.protected, false, "Breite des Rechtecks"));
        this.addAttribute(new Attribute("höhe", intPrimitiveType, (value) => {
            let sh = value.object.intrinsicData["Actor"];
            value.value = Math.round(Math.abs(sh.height * sh.displayObject.scale.x));
        }, false, Visibility.protected, false, "Höhe des Rechtecks"));
        this.setupAttributeIndicesRecursive();
        this.addMethod(new Method("Rechteck", new Parameterlist([]), null, (parameters) => {
            let o = parameters[0].value;
            o.intrinsicData["isGNG"] = true;
            let rh = new RectangleHelper(10, 10, 100, 100, module.main.getInterpreter(), o);
            o.intrinsicData["Actor"] = rh;
            o.intrinsicData["moveAnchor"] = { x: 10, y: 10 };
            o.intrinsicData["Farbe"] = "rot";
            rh.setFillColor(0xff0000);
        }, false, false, 'Instanziert ein neues, achsenparalleles Rechteck-Objekt.', true));
        this.addMethod(new Method("GrößeSetzen", new Parameterlist([
            { identifier: "breite", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
            { identifier: "höhe", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }
        ]), null, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            let breite = parameters[1].value;
            let höhe = parameters[2].value;
            if (sh.testdestroyed("GrößeSetzen"))
                return;
            sh.height = höhe / sh.displayObject.scale.y;
            sh.width = breite / sh.displayObject.scale.x;
            sh.centerXInitial = sh.left + sh.width / 2;
            sh.centerYInitial = sh.top + sh.height / 2;
            sh.render();
        }, false, false, "Setzt die Breite und Höhe des Rechtecks.", false));
    }
}
//# sourceMappingURL=data:application/json;base64,