import { Klass, Visibility } from "../../compiler/types/Class.js";
import { booleanPrimitiveType, charPrimitiveType, doublePrimitiveType, intPrimitiveType, stringPrimitiveType, voidPrimitiveType } from "../../compiler/types/PrimitiveTypes.js";
import { Attribute, Method, Parameterlist } from "../../compiler/types/Types.js";
import { TurtleHelper } from "../graphics/Turtle.js";
import { ShapeHelper } from "../graphics/Shape.js";
import { GNGFarben } from "./GNGFarben.js";
import { GNGEreignisbehandlung } from "./GNGEreignisbehandlung.js";
export class GNGTurtleClass extends Klass {
    constructor(module, moduleStore) {
        let objectType = moduleStore.getType("Object").type;
        super("GTurtle", module, "Turtle-Klasse der Graphics'n Games-Bibliothek (Cornelsen-Verlag)");
        this.addAttribute(new Attribute("x", intPrimitiveType, (value) => {
            let sh = value.object.intrinsicData["Actor"];
            value.value = Math.round(sh.lineElements[sh.lineElements.length - 1].x);
        }, false, Visibility.protected, false, "x-Position der Figur"));
        this.addAttribute(new Attribute("y", intPrimitiveType, (value) => {
            let sh = value.object.intrinsicData["Actor"];
            value.value = Math.round(sh.lineElements[sh.lineElements.length - 1].y);
        }, false, Visibility.protected, false, "x-Position der Figur"));
        this.addAttribute(new Attribute("winkel", intPrimitiveType, (value) => {
            value.value = value.object.intrinsicData["Actor"].turtleAngleDeg;
        }, false, Visibility.protected, false, "Blickrichtung der Figur in Grad"));
        this.addAttribute(new Attribute("größe", intPrimitiveType, (value) => {
            value.value = Math.round(value.object.intrinsicData["Actor"].scaleFactor * 100);
        }, false, Visibility.protected, false, "Größe der Figur (100 entspricht 'normalgroß')"));
        this.addAttribute(new Attribute("sichtbar", booleanPrimitiveType, (value) => {
            var _a;
            value.value = (_a = value.object.intrinsicData["Actor"].displayObject) === null || _a === void 0 ? void 0 : _a.visible;
        }, false, Visibility.protected, false, "true, wenn die Figur sichtbar ist"));
        this.addAttribute(new Attribute("stiftUnten", booleanPrimitiveType, (value) => {
            value.value = value.object.intrinsicData["Actor"].penIsDown;
        }, false, Visibility.protected, false, "true, wenn die Turtle beim Gehen zeichnet"));
        this.setupAttributeIndicesRecursive();
        this.addMethod(new Method("GTurtle", new Parameterlist([]), null, (parameters) => {
            let o = parameters[0].value;
            o.intrinsicData["isGNG"] = true;
            let rh = new TurtleHelper(100, 200, true, module.main.getInterpreter(), o);
            rh.borderWidth = 1;
            rh.setShowTurtle(true);
            rh.setBorderColor(0);
            o.intrinsicData["Actor"] = rh;
            o.intrinsicData["moveAnchor"] = { x: 10, y: 10 };
            let helper = GNGEreignisbehandlung.getHelper(module);
            helper.registerEvents(o);
        }, false, false, 'Instanziert ein neues Turtle-Objekt.', true));
        this.addMethod(new Method("GrößeSetzen", new Parameterlist([
            { identifier: "größe", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }
        ]), null, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            let größe = parameters[1].value;
            if (sh.testdestroyed("größeSetzen"))
                return;
            sh.turtleSize = größe;
            sh.turn(0);
        }, false, false, "Setzt die Größe des Turtle-Dreiecks.", false));
        this.addMethod(new Method("FarbeSetzen", new Parameterlist([
            { identifier: "farbe", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
        ]), null, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            let farbe = parameters[1].value;
            let color = GNGFarben[farbe.toLocaleLowerCase()];
            if (color == null)
                color = 0x000000; // default: schwarz
            if (sh.testdestroyed("FarbeSetzen"))
                return;
            sh.setBorderColor(color);
            sh.render();
        }, false, false, "Setzt die Zeichenfarbe der Turtle.", false));
        this.addMethod(new Method("Drehen", new Parameterlist([
            { identifier: "grad", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
        ]), null, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            let grad = parameters[1].value;
            if (sh.testdestroyed("Drehen"))
                return;
            sh.turn(grad);
        }, false, false, "Dreht die Turtle um den angegebenen Winkel. Positiver Winkel bedeutet Drehung gegen den Uhrzeigersinn.", false));
        this.addMethod(new Method("Gehen", new Parameterlist([
            { identifier: "länge", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },
        ]), null, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            let länge = parameters[1].value;
            if (sh.testdestroyed("Gehen"))
                return;
            sh.forward(länge);
        }, false, false, "Bewirkt, dass die Turtle um die angegebene Länge nach vorwärts geht.", false));
        this.addMethod(new Method("StiftHeben", new Parameterlist([]), null, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            if (sh.testdestroyed("StiftHeben"))
                return;
            sh.penIsDown = false;
        }, false, false, "Bewirkt, dass die Turtle beim Gehen ab jetzt nicht mehr zeichnet.", false));
        this.addMethod(new Method("StiftSenken", new Parameterlist([]), null, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            if (sh.testdestroyed("StiftSenken"))
                return;
            sh.penIsDown = true;
        }, false, false, "Bewirkt, dass die Turtle beim Gehen ab jetzt wieder zeichnet.", false));
        this.addMethod(new Method("Löschen", new Parameterlist([]), null, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            if (sh.testdestroyed("Löschen"))
                return;
            sh.clear(100, 200, 0);
        }, false, false, "Löscht alles von der Turtle gezeichnete und versetzt die Turtle in den Ausgangszustand.", false));
        this.addMethod(new Method("PositionSetzen", new Parameterlist([
            { identifier: "x", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
            { identifier: "y", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }
        ]), null, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            let x = parameters[1].value;
            let y = parameters[2].value;
            if (sh.testdestroyed("PositionSetzen"))
                return;
            sh.moveTo(x, y);
        }, false, false, "Verschiebt die Turtle an die Position (x, y) ohne eine neue Linie zu zeichnen.", false));
        this.addMethod(new Method("ZumStartpunktGehen", new Parameterlist([]), null, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            if (sh.testdestroyed("ZumStartpunktGehen"))
                return;
            sh.moveTo(100, 200);
        }, false, false, "Verschiebt die Turtle an die Position (100, 200) ohne eine neue Linie zu zeichnen.", false));
        this.addMethod(new Method("WinkelSetzen", new Parameterlist([
            { identifier: "winkel", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
        ]), null, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            let winkel = parameters[1].value;
            if (sh.testdestroyed("WinkelSetzen"))
                return;
            sh.turn(winkel + sh.turtleAngleDeg);
        }, false, false, "Setzt den Blickwinkel der Turtle. 0° => nach rechts, 90°: => nach oben, usw..", false));
        this.addMethod(new Method("WinkelGeben", new Parameterlist([]), intPrimitiveType, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            if (sh.testdestroyed("WinkelGeben"))
                return;
            return Math.round(-sh.turtleAngleDeg);
        }, false, false, "Gibt den Blickwinkel der Turtle zurück.", false));
        this.addMethod(new Method("XPositionGeben", new Parameterlist([]), intPrimitiveType, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            if (sh.testdestroyed("XPositionGeben"))
                return;
            return Math.round(sh.lineElements[sh.lineElements.length - 1].x);
        }, false, false, "Gibt x-Position der Turtle zurück.", false));
        this.addMethod(new Method("YPositionGeben", new Parameterlist([]), intPrimitiveType, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            if (sh.testdestroyed("YPositionGeben"))
                return;
            return Math.round(sh.lineElements[sh.lineElements.length - 1].y);
        }, false, false, "Gibt y-Position der Turtle zurück.", false));
        this.addMethod(new Method("SichtbarkeitSetzen", new Parameterlist([
            { identifier: "sichtbarkeit", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
        ]), null, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            let sichtbarkeit = parameters[1].value;
            if (sh.testdestroyed("SichtbarkeitSetzen"))
                return;
            sh.setVisible(sichtbarkeit);
        }, false, false, "Schaltet die Sichtbarkeit der Figur ein oder aus.", false));
        this.addMethod(new Method("Entfernen", new Parameterlist([]), null, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            if (sh.testdestroyed("Entfernen"))
                return;
            sh.destroy();
        }, false, false, "Schaltet die Sichtbarkeit der Figur ein oder aus.", false));
        this.addMethod(new Method("GanzNachVornBringen", new Parameterlist([]), null, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            if (sh.testdestroyed("GanzNachVornBringen"))
                return;
            return sh.bringToFront();
        }, false, false, 'Setzt das Grafikobjekt vor alle anderen.', false));
        this.addMethod(new Method("GanzNachHintenBringen", new Parameterlist([]), null, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            if (sh.testdestroyed("GanzNachHintenBringen"))
                return;
            return sh.sendToBack();
        }, false, false, 'Setzt das Grafikobjekt hinter alle anderen.', false));
        this.addMethod(new Method("NachVornBringen", new Parameterlist([]), null, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            if (sh.testdestroyed("NachVornBringen"))
                return;
            return sh.bringOnePlaneFurtherToFront();
        }, false, false, 'Setzt das Grafikobjekt eine Ebene nach vorne.', false));
        this.addMethod(new Method("NachHintenBringen", new Parameterlist([]), null, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            if (sh.testdestroyed("NachHintenBringen"))
                return;
            return sh.bringOnePlaneFurtherToBack();
        }, false, false, 'Setzt das Grafikobjekt eine Ebene nach hinten.', false));
        this.addMethod(new Method("Berührt", new Parameterlist([]), booleanPrimitiveType, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            if (sh.testdestroyed("Berührt"))
                return;
            return sh.touchesAtLeastOneFigure();
        }, false, false, 'Gibt genau dann true zurück, wenn sich an der aktuellen Position der Turtle mindestens eine andere Figur befindet.', false));
        this.addMethod(new Method("Berührt", new Parameterlist([
            { identifier: "farbe", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true }
        ]), booleanPrimitiveType, (parameters) => {
            let o = parameters[0].value;
            let farbeString = parameters[1].value;
            let sh = o.intrinsicData["Actor"];
            if (sh.testdestroyed("Berührt"))
                return;
            let farbe = GNGFarben[farbeString];
            if (farbe == null)
                farbe = 0;
            return sh.touchesColor(farbe);
        }, false, false, 'Gibt genau dann true zurück, wenn sich an der aktuellen Position der Turtle mindestens eine andere Figur mit der angegebenen Farbe befindet.', false));
        this.addMethod(new Method("Berührt", new Parameterlist([
            { identifier: "objekt", type: objectType, declaration: null, usagePositions: null, isFinal: true }
        ]), booleanPrimitiveType, (parameters) => {
            let o = parameters[0].value;
            let object = parameters[1].value;
            let sh = o.intrinsicData["Actor"];
            let objectShapeHelper = object.intrinsicData["Actor"];
            if (objectShapeHelper == null || !(objectShapeHelper instanceof ShapeHelper))
                return false;
            if (sh.testdestroyed("Berührt"))
                return;
            return sh.touchesShape(objectShapeHelper);
        }, false, false, 'Gibt genau dann true zurück, wenn die übergebene Figur die aktuelle Turtleposition enthält.', false));
        this.addMethod(new Method("AktionAusführen", new Parameterlist([]), voidPrimitiveType, null, // no implementation!
        false, false, "Diese Methode wird vom Taktgeber aufgerufen."));
        this.addMethod(new Method("TasteGedrückt", new Parameterlist([
            { identifier: "taste", type: charPrimitiveType, declaration: null, usagePositions: null, isFinal: true }
        ]), voidPrimitiveType, null, // no implementation!
        false, false, "Wird aufgerufen, wenn eine Taste gedrückt wird."));
        this.addMethod(new Method("SonderTasteGedrückt", new Parameterlist([
            { identifier: "taste", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }
        ]), voidPrimitiveType, null, // no implementation!
        false, false, "Wird aufgerufen, wenn eine Sondertaste gedrückt wird."));
        this.addMethod(new Method("MausGeklickt", new Parameterlist([
            { identifier: "x", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
            { identifier: "y", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
            { identifier: "anzahl", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
        ]), voidPrimitiveType, null, // no implementation!
        false, false, "Wird aufgerufen, wenn eine die linke Maustaste gedrückt wird."));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiR05HVHVydGxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NsaWVudC9ydW50aW1lbGlicmFyeS9nbmcvR05HVHVydGxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDbEUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLGlCQUFpQixFQUFFLG1CQUFtQixFQUFFLGdCQUFnQixFQUFFLG1CQUFtQixFQUFFLGlCQUFpQixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDaEwsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsYUFBYSxFQUFTLE1BQU0sK0JBQStCLENBQUM7QUFJeEYsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRXJELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUNuRCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDM0MsT0FBTyxFQUFFLHFCQUFxQixFQUErQixNQUFNLDRCQUE0QixDQUFDO0FBRWhHLE1BQU0sT0FBTyxjQUFlLFNBQVEsS0FBSztJQUVyQyxZQUFZLE1BQWMsRUFBRSxXQUF3QjtRQUVoRCxJQUFJLFVBQVUsR0FBRyxXQUFXLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQztRQUVwRCxLQUFLLENBQUMsU0FBUyxFQUFFLE1BQU0sRUFBRSxrRUFBa0UsQ0FBQyxDQUFDO1FBRTdGLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxTQUFTLENBQUMsR0FBRyxFQUFFLGdCQUFnQixFQUFFLENBQUMsS0FBWSxFQUFFLEVBQUU7WUFDcEUsSUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDN0MsS0FBSyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMs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QUM7SUFJeEYsQ0FBQztDQU1KIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTW9kdWxlLCBNb2R1bGVTdG9yZSB9IGZyb20gXCIuLi8uLi9jb21waWxlci9wYXJzZXIvTW9kdWxlLmpzXCI7XG5pbXBvcnQgeyBLbGFzcywgVmlzaWJpbGl0eSB9IGZyb20gXCIuLi8uLi9jb21waWxlci90eXBlcy9DbGFzcy5qc1wiO1xuaW1wb3J0IHsgYm9vbGVhblByaW1pdGl2ZVR5cGUsIGNoYXJQcmltaXRpdmVUeXBlLCBkb3VibGVQcmltaXRpdmVUeXBlLCBpbnRQcmltaXRpdmVUeXBlLCBzdHJpbmdQcmltaXRpdmVUeXBlLCB2b2lkUHJpbWl0aXZlVHlwZSB9IGZyb20gXCIuLi8uLi9jb21waWxlci90eXBlcy9QcmltaXRpdmVUeXBlcy5qc1wiO1xuaW1wb3J0IHsgQXR0cmlidXRlLCBNZXRob2QsIFBhcmFtZXRlcmxpc3QsIFZhbHVlIH0gZnJvbSBcIi4uLy4uL2NvbXBpbGVyL3R5cGVzL1R5cGVzLmpzXCI7XG5pbXBvcnQgeyBSdW50aW1lT2JqZWN0IH0gZnJvbSBcIi4uLy4uL2ludGVycHJldGVyL1J1bnRpbWVPYmplY3QuanNcIjtcbmltcG9ydCB7IEludGVycHJldGVyIH0gZnJvbSBcIi4uLy4uL2ludGVycHJldGVyL0ludGVycHJldGVyLmpzXCI7XG5pbXBvcnQgeyBSZWN0YW5nbGVIZWxwZXIgfSBmcm9tIFwiLi4vZ3JhcGhpY3MvUmVjdGFuZ2xlLmpzXCI7XG5pbXBvcnQgeyBUdXJ0bGVIZWxwZXIgfSBmcm9tIFwiLi4vZ3JhcGhpY3MvVHVydGxlLmpzXCI7XG5pbXBvcnQgeyBGaWxsZWRTaGFwZUhlbHBlciB9IGZyb20gXCIuLi9ncmFwaGljcy9GaWxsZWRTaGFwZS5qc1wiO1xuaW1wb3J0IHsgU2hhcGVIZWxwZXIgfSBmcm9tIFwiLi4vZ3JhcGhpY3MvU2hhcGUuanNcIjtcbmltcG9ydCB7IEdOR0ZhcmJlbiB9IGZyb20gXCIuL0dOR0ZhcmJlbi5qc1wiO1xuaW1wb3J0IHsgR05HRXJlaWduaXNiZWhhbmRsdW5nLCBHTkdFcmVpZ25pc2JlaGFuZGx1bmdIZWxwZXIgfSBmcm9tIFwiLi9HTkdFcmVpZ25pc2JlaGFuZGx1bmcuanNcIjtcblxuZXhwb3J0IGNsYXNzIEdOR1R1cnRsZUNsYXNzIGV4dGVuZHMgS2xhc3Mge1xuXG4gICAgY29uc3RydWN0b3IobW9kdWxlOiBNb2R1bGUsIG1vZHVsZVN0b3JlOiBNb2R1bGVTdG9yZSkge1xuXG4gICAgICAgIGxldCBvYmplY3RUeXBlID0gbW9kdWxlU3RvcmUuZ2V0VHlwZShcIk9iamVjdFwiKS50eXBlO1xuXG4gICAgICAgIHN1cGVyKFwiR1R1cnRsZVwiLCBtb2R1bGUsIFwiVHVydGxlLUtsYXNzZSBkZXIgR3JhcGhpY3MnbiBHYW1lcy1CaWJsaW90aGVrIChDb3JuZWxzZW4tVmVybGFnKVwiKTtcblxuICAgICAgICB0aGlzLmFkZEF0dHJpYnV0ZShuZXcgQXR0cmlidXRlKFwieFwiLCBpbnRQcmltaXRpdmVUeXBlLCAodmFsdWU6IFZhbHVlKSA9PiB7IFxuICAgICAgICAgICAgbGV0IHNoID0gdmFsdWUub2JqZWN0LmludHJpbnNpY0RhdGFbXCJBY3RvclwiXTtcbiAgICAgICAgICAgIHZhbHVlLnZhbHVlID0gTWF0aC5yb3VuZChzaC5saW5lRWxlbWVudHNbc2gubGluZUVsZW1lbnRzLmxlbmd0aCAtIDFdLngpOyBcbiAgICAgICAgfSwgZmFsc2UsIFZpc2liaWxpdHkucHJvdGVjdGVkLCBmYWxzZSwgXCJ4LVBvc2l0aW9uIGRlciBGaWd1clwiKSk7XG4gICAgICAgIHRoaXMuYWRkQXR0cmlidXRlKG5ldyBBdHRyaWJ1dGUoXCJ5XCIsIGludFByaW1pdGl2ZVR5cGUsICh2YWx1ZTogVmFsdWUpID0+IHsgXG4gICAgICAgICAgICBsZXQgc2ggPSB2YWx1ZS5vYmplY3QuaW50cmluc2ljRGF0YVtcIkFjdG9yXCJdO1xuICAgICAgICAgICAgdmFsdWUudmFsdWUgPSBNYXRoLnJvdW5kKHNoLmxpbmVFbGVtZW50c1tzaC5saW5lRWxlbWVudHMubGVuZ3RoIC0gMV0ueSk7IFxuICAgICAgICB9LCBmYWxzZSwgVmlzaWJpbGl0eS5wcm90ZWN0ZWQsIGZhbHNlLCBcIngtUG9zaXRpb24gZGVyIEZpZ3VyXCIpKTtcblxuICAgICAgICB0aGlzLmFkZEF0dHJpYnV0ZShuZXcgQXR0cmlidXRlKFwid2lua2VsXCIsIGludFByaW1pdGl2ZVR5cGUsICh2YWx1ZTogVmFsdWUpID0+IHsgXG4gICAgICAgICAgICB2YWx1ZS52YWx1ZSA9IHZhbHVlLm9iamVjdC5pbnRyaW5zaWNEYXRhW1wiQWN0b3JcIl0udHVydGxlQW5nbGVEZWcgXG4gICAgICAgIH0sIGZhbHNlLCBWaXNpYmlsaXR5LnByb3RlY3RlZCwgZmFsc2UsIFwiQmxpY2tyaWNodHVuZyBkZXIgRmlndXIgaW4gR3JhZFwiKSk7XG5cbiAgICAgICAgdGhpcy5hZGRBdHRyaWJ1dGUobmV3IEF0dHJpYnV0ZShcImdyw7bDn2VcIiwgaW50UHJpbWl0aXZlVHlwZSwgKHZhbHVlOiBWYWx1ZSkgPT4geyBcbiAgICAgICAgICAgIHZhbHVlLnZhbHVlID0gTWF0aC5yb3VuZCh2YWx1ZS5vYmplY3QuaW50cmluc2ljRGF0YVtcIkFjdG9yXCJdLnNjYWxlRmFjdG9yKjEwMCkgXG4gICAgICAgIH0sIGZhbHNlLCBWaXNpYmlsaXR5LnByb3RlY3RlZCwgZmFsc2UsIFwiR3LDtsOfZSBkZXIgRmlndXIgKDEwMCBlbnRzcHJpY2h0ICdub3JtYWxncm/DnycpXCIpKTtcblxuICAgICAgICB0aGlzLmFkZEF0dHJpYnV0ZShuZXcgQXR0cmlidXRlKFwic2ljaHRiYXJcIiwgYm9vbGVhblByaW1pdGl2ZVR5cGUsICh2YWx1ZTogVmFsdWUpID0+IHsgXG4gICAgICAgICAgICB2YWx1ZS52YWx1ZSA9IHZhbHVlLm9iamVjdC5pbnRyaW5zaWNEYXRhW1wiQWN0b3JcIl0uZGlzcGxheU9iamVjdD8udmlzaWJsZSBcbiAgICAgICAgfSwgZmFsc2UsIFZpc2liaWxpdHkucHJvdGVjdGVkLCBmYWxzZSwgXCJ0cnVlLCB3ZW5uIGRpZSBGaWd1ciBzaWNodGJhciBpc3RcIikpO1xuXG4gICAgICAgIHRoaXMuYWRkQXR0cmlidXRlKG5ldyBBdHRyaWJ1dGUoXCJzdGlmdFVudGVuXCIsIGJvb2xlYW5QcmltaXRpdmVUeXBlLCAodmFsdWU6IFZhbHVlKSA9PiB7IFxuICAgICAgICAgICAgdmFsdWUudmFsdWUgPSB2YWx1ZS5vYmplY3QuaW50cmluc2ljRGF0YVtcIkFjdG9yXCJdLnBlbklzRG93bjsgXG4gICAgICAgIH0sIGZhbHNlLCBWaXNpYmlsaXR5LnByb3RlY3RlZCwgZmFsc2UsIFwidHJ1ZSwgd2VubiBkaWUgVHVydGxlIGJlaW0gR2VoZW4gemVpY2huZXRcIikpO1xuXG4gICAgICAgIHRoaXMuc2V0dXBBdHRyaWJ1dGVJbmRpY2VzUmVjdXJzaXZlKCk7XG5cbiAgICAgICAgdGhpcy5hZGRNZXRob2QobmV3IE1ldGhvZChcIkdUdXJ0bGVcIiwgbmV3IFBhcmFtZXRlcmxpc3QoW10pLCBudWxsLFxuICAgICAgICAgICAgKHBhcmFtZXRlcnMpID0+IHtcblxuICAgICAgICAgICAgICAgIGxldCBvOiBSdW50aW1lT2JqZWN0ID0gcGFyYW1ldGVyc1swXS52YWx1ZTtcbiAgICAgICAgICAgICAgICBvLmludHJpbnNpY0RhdGFbXCJpc0dOR1wiXSA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICBsZXQgcmggPSBuZXcgVHVydGxlSGVscGVyKDEwMCwgMjAwLCB0cnVlLCBtb2R1bGUubWFpbi5nZXRJbnRlcnByZXRlcigpLCBvKTtcbiAgICAgICAgICAgICAgICByaC5ib3JkZXJXaWR0aCA9IDE7XG4gICAgICAgICAgICAgICAgcmguc2V0U2hvd1R1cnRsZSh0cnVlKTtcbiAgICAgICAgICAgICAgICByaC5zZXRCb3JkZXJDb2xvcigwKTtcbiAgICAgICAgICAgICAgICBvLmludHJpbnNpY0RhdGFbXCJBY3RvclwiXSA9IHJoO1xuXG4gICAgICAgICAgICAgICAgby5pbnRyaW5zaWNEYXRhW1wibW92ZUFuY2hvclwiXSA9IHt4OiAxMCwgeTogMTB9O1xuXG4gICAgICAgICAgICAgICAgbGV0IGhlbHBlcjogR05HRXJlaWduaXNiZWhhbmRsdW5nSGVscGVyID0gR05HRXJlaWduaXNiZWhhbmRsdW5nLmdldEhlbHBlcihtb2R1bGUpO1xuICAgICAgICAgICAgICAgIGhlbHBlci5yZWdpc3RlckV2ZW50cyhvKTtcblxuICAgICAgICAgICAgfSwgZmFsc2UsIGZhbHNlLCAnSW5zdGFuemllcnQgZWluIG5ldWVzIFR1cnRsZS1PYmpla3QuJywgdHJ1ZSkpO1xuXG4gICAgICAgIHRoaXMuYWRkTWV0aG9kKG5ldyBNZXRob2QoXCJHcsO2w59lU2V0emVuXCIsIG5ldyBQYXJhbWV0ZXJsaXN0KFtcbiAgICAgICAgICAgIHsgaWRlbnRpZmllcjogXCJncsO2w59lXCIsIHR5cGU6IGludFByaW1pdGl2ZVR5cGUsIGRlY2xhcmF0aW9uOiBudWxsLCB1c2FnZVBvc2l0aW9uczogbnVsbCwgaXNGaW5hbDogdHJ1ZSB9XG4gICAgICAgIF0pLCBudWxsLFxuICAgICAgICAgICAgKHBhcmFtZXRlcnMpID0+IHtcblxuICAgICAgICAgICAgICAgIGxldCBvOiBSdW50aW1lT2JqZWN0ID0gcGFyYW1ldGVyc1swXS52YWx1ZTtcbiAgICAgICAgICAgICAgICBsZXQgc2g6IFR1cnRsZUhlbHBlciA9IG8uaW50cmluc2ljRGF0YVtcIkFjdG9yXCJdO1xuICAgICAgICAgICAgICAgIGxldCBncsO2w59lOiBudW1iZXIgPSBwYXJhbWV0ZXJzWzFdLnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgaWYgKHNoLnRlc3RkZXN0cm95ZWQoXCJncsO2w59lU2V0emVuXCIpKSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICBzaC50dXJ0bGVTaXplID0gZ3LDtsOfZTtcbiAgICAgICAgICAgICAgICBzaC50dXJuKDApO1xuXG4gICAgICAgICAgICB9LCBmYWxzZSwgZmFsc2UsIFwiU2V0enQgZGllIEdyw7bDn2UgZGVzIFR1cnRsZS1EcmVpZWNrcy5cIiwgZmFsc2UpKTtcblxuICAgICAgICB0aGlzLmFkZE1ldGhvZChuZXcgTWV0aG9kKFwiRmFyYmVTZXR6ZW5cIiwgbmV3IFBhcmFtZXRlcmxpc3QoW1xuICAgICAgICAgICAgeyBpZGVudGlmaWVyOiBcImZhcmJlXCIsIHR5cGU6IHN0cmluZ1ByaW1pdGl2ZVR5cGUsIGRlY2xhcmF0aW9uOiBudWxsLCB1c2FnZVBvc2l0aW9uczogbnVsbCwgaXNGaW5hbDogdHJ1ZSB9LFxuICAgICAgICBdKSwgbnVsbCxcbiAgICAgICAgICAgIChwYXJhbWV0ZXJzKSA9PiB7XG5cbiAgICAgICAgICAgICAgICBsZXQgbzogUnVudGltZU9iamVjdCA9IHBhcmFtZXRlcnNbMF0udmFsdWU7XG4gICAgICAgICAgICAgICAgbGV0IHNoOiBUdXJ0bGVIZWxwZXIgPSBvLmludHJpbnNpY0RhdGFbXCJBY3RvclwiXTtcbiAgICAgICAgICAgICAgICBsZXQgZmFyYmU6IHN0cmluZyA9IHBhcmFtZXRlcnNbMV0udmFsdWU7XG5cbiAgICAgICAgICAgICAgICBsZXQgY29sb3I6IG51bWJlciA9IEdOR0ZhcmJlbltmYXJiZS50b0xvY2FsZUxvd2VyQ2FzZSgpXTtcbiAgICAgICAgICAgICAgICBpZiAoY29sb3IgPT0gbnVsbCkgY29sb3IgPSAweDAwMDAwMDsgLy8gZGVmYXVsdDogc2Nod2FyelxuXG4gICAgICAgICAgICAgICAgaWYgKHNoLnRlc3RkZXN0cm95ZWQoXCJGYXJiZVNldHplblwiKSkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgc2guc2V0Qm9yZGVyQ29sb3IoY29sb3IpO1xuICAgICAgICAgICAgICAgIHNoLnJlbmRlcigpO1xuXG4gICAgICAgICAgICB9LCBmYWxzZSwgZmFsc2UsIFwiU2V0enQgZGllIFplaWNoZW5mYXJiZSBkZXIgVHVydGxlLlwiLCBmYWxzZSkpO1xuXG5cbiAgICAgICAgdGhpcy5hZGRNZXRob2QobmV3IE1ldGhvZChcIkRyZWhlblwiLCBuZXcgUGFyYW1ldGVybGlzdChbXG4gICAgICAgICAgICB7IGlkZW50aWZpZXI6IFwiZ3JhZFwiLCB0eXBlOiBpbnRQcmltaXRpdmVUeXBlLCBkZWNsYXJhdGlvbjogbnVsbCwgdXNhZ2VQb3NpdGlvbnM6IG51bGwsIGlzRmluYWw6IHRydWUgfSxcbiAgICAgICAgXSksIG51bGwsXG4gICAgICAgICAgICAocGFyYW1ldGVycykgPT4ge1xuXG4gICAgICAgICAgICAgICAgbGV0IG86IFJ1bnRpbWVPYmplY3QgPSBwYXJhbWV0ZXJzWzBdLnZhbHVlO1xuICAgICAgICAgICAgICAgIGxldCBzaDogVHVydGxlSGVscGVyID0gby5pbnRyaW5zaWNEYXRhW1wiQWN0b3JcIl07XG4gICAgICAgICAgICAgICAgbGV0IGdyYWQ6IG51bWJlciA9IHBhcmFtZXRlcnNbMV0udmFsdWU7XG5cbiAgICAgICAgICAgICAgICBpZiAoc2gudGVzdGRlc3Ryb3llZChcIkRyZWhlblwiKSkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgc2gudHVybihncmFkKTtcblxuICAgICAgICAgICAgfSwgZmFsc2UsIGZhbHNlLCBcIkRyZWh0IGRpZSBUdXJ0bGUgdW0gZGVuIGFuZ2VnZWJlbmVuIFdpbmtlbC4gUG9zaXRpdmVyIFdpbmtlbCBiZWRldXRldCBEcmVodW5nIGdlZ2VuIGRlbiBVaHJ6ZWlnZXJzaW5uLlwiLCBmYWxzZSkpO1xuXG4gICAgICAgIHRoaXMuYWRkTWV0aG9kKG5ldyBNZXRob2QoXCJHZWhlblwiLCBuZXcgUGFyYW1ldGVybGlzdChbXG4gICAgICAgICAgICB7IGlkZW50aWZpZXI6IFwibMOkbmdlXCIsIHR5cGU6IGRvdWJsZVByaW1pdGl2ZVR5cGUsIGRlY2xhcmF0aW9uOiBudWxsLCB1c2FnZVBvc2l0aW9uczogbnVsbCwgaXNGaW5hbDogdHJ1ZSB9LFxuICAgICAgICBdKSwgbnVsbCxcbiAgICAgICAgICAgIChwYXJhbWV0ZXJzKSA9PiB7XG5cbiAgICAgICAgICAgICAgICBsZXQgbzogUnVudGltZU9iamVjdCA9IHBhcmFtZXRlcnNbMF0udmFsdWU7XG4gICAgICAgICAgICAgICAgbGV0IHNoOiBUdXJ0bGVIZWxwZXIgPSBvLmludHJpbnNpY0RhdGFbXCJBY3RvclwiXTtcbiAgICAgICAgICAgICAgICBsZXQgbMOkbmdlOiBudW1iZXIgPSBwYXJhbWV0ZXJzWzFdLnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgaWYgKHNoLnRlc3RkZXN0cm95ZWQoXCJHZWhlblwiKSkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgc2guZm9yd2FyZChsw6RuZ2UpO1xuXG4gICAgICAgICAgICB9LCBmYWxzZSwgZmFsc2UsIFwiQmV3aXJrdCwgZGFzcyBkaWUgVHVydGxlIHVtIGRpZSBhbmdlZ2ViZW5lIEzDpG5nZSBuYWNoIHZvcnfDpHJ0cyBnZWh0LlwiLCBmYWxzZSkpO1xuXG4gICAgICAgIHRoaXMuYWRkTWV0aG9kKG5ldyBNZXRob2QoXCJTdGlmdEhlYmVuXCIsIG5ldyBQYXJhbWV0ZXJsaXN0KFtcbiAgICAgICAgXSksIG51bGwsXG4gICAgICAgICAgICAocGFyYW1ldGVycykgPT4ge1xuXG4gICAgICAgICAgICAgICAgbGV0IG86IFJ1bnRpbWVPYmplY3QgPSBwYXJhbWV0ZXJzWzBdLnZhbHVlO1xuICAgICAgICAgICAgICAgIGxldCBzaDogVHVydGxlSGVscGVyID0gby5pbnRyaW5zaWNEYXRhW1wiQWN0b3JcIl07XG5cbiAgICAgICAgICAgICAgICBpZiAoc2gudGVzdGRlc3Ryb3llZChcIlN0aWZ0SGViZW5cIikpIHJldHVybjtcblxuICAgICAgICAgICAgICAgIHNoLnBlbklzRG93biA9IGZhbHNlO1xuXG4gICAgICAgICAgICB9LCBmYWxzZSwgZmFsc2UsIFwiQmV3aXJrdCwgZGFzcyBkaWUgVHVydGxlIGJlaW0gR2VoZW4gYWIgamV0enQgbmljaHQgbWVociB6ZWljaG5ldC5cIiwgZmFsc2UpKTtcblxuICAgICAgICB0aGlzLmFkZE1ldGhvZChuZXcgTWV0aG9kKFwiU3RpZnRTZW5rZW5cIiwgbmV3IFBhcmFtZXRlcmxpc3QoW1xuICAgICAgICBdKSwgbnVsbCxcbiAgICAgICAgICAgIChwYXJhbWV0ZXJzKSA9PiB7XG5cbiAgICAgICAgICAgICAgICBsZXQgbzogUnVudGltZU9iamVjdCA9IHBhcmFtZXRlcnNbMF0udmFsdWU7XG4gICAgICAgICAgICAgICAgbGV0IHNoOiBUdXJ0bGVIZWxwZXIgPSBvLmludHJpbnNpY0RhdGFbXCJBY3RvclwiXTtcblxuICAgICAgICAgICAgICAgIGlmIChzaC50ZXN0ZGVzdHJveWVkKFwiU3RpZnRTZW5rZW5cIikpIHJldHVybjtcblxuICAgICAgICAgICAgICAgIHNoLnBlbklzRG93biA9IHRydWU7XG5cbiAgICAgICAgICAgIH0sIGZhbHNlLCBmYWxzZSwgXCJCZXdpcmt0LCBkYXNzIGRpZSBUdXJ0bGUgYmVpbSBHZWhlbiBhYiBqZXR6dCB3aWVkZXIgemVpY2huZXQuXCIsIGZhbHNlKSk7XG5cbiAgICAgICAgdGhpcy5hZGRNZXRob2QobmV3IE1ldGhvZChcIkzDtnNjaGVuXCIsIG5ldyBQYXJhbWV0ZXJsaXN0KFtcbiAgICAgICAgXSksIG51bGwsXG4gICAgICAgICAgICAocGFyYW1ldGVycykgPT4ge1xuXG4gICAgICAgICAgICAgICAgbGV0IG86IFJ1bnRpbWVPYmplY3QgPSBwYXJhbWV0ZXJzWzBdLnZhbHVlO1xuICAgICAgICAgICAgICAgIGxldCBzaDogVHVydGxlSGVscGVyID0gby5pbnRyaW5zaWNEYXRhW1wiQWN0b3JcIl07XG5cbiAgICAgICAgICAgICAgICBpZiAoc2gudGVzdGRlc3Ryb3llZChcIkzDtnNjaGVuXCIpKSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICBzaC5jbGVhcigxMDAsIDIwMCwgMCk7XG5cbiAgICAgICAgICAgIH0sIGZhbHNlLCBmYWxzZSwgXCJMw7ZzY2h0IGFsbGVzIHZvbiBkZXIgVHVydGxlIGdlemVpY2huZXRlIHVuZCB2ZXJzZXR6dCBkaWUgVHVydGxlIGluIGRlbiBBdXNnYW5nc3p1c3RhbmQuXCIsIGZhbHNlKSk7XG5cbiAgICAgICAgdGhpcy5hZGRNZXRob2QobmV3IE1ldGhvZChcIlBvc2l0aW9uU2V0emVuXCIsIG5ldyBQYXJhbWV0ZXJsaXN0KFtcbiAgICAgICAgICAgIHsgaWRlbnRpZmllcjogXCJ4XCIsIHR5cGU6IGludFByaW1pdGl2ZVR5cGUsIGRlY2xhcmF0aW9uOiBudWxsLCB1c2FnZVBvc2l0aW9uczogbnVsbCwgaXNGaW5hbDogdHJ1ZSB9LFxuICAgICAgICAgICAgeyBpZGVudGlmaWVyOiBcInlcIiwgdHlwZTogaW50UHJpbWl0aXZlVHlwZSwgZGVjbGFyYXRpb246IG51bGwsIHVzYWdlUG9zaXRpb25zOiBudWxsLCBpc0ZpbmFsOiB0cnVlIH1cbiAgICAgICAgXSksIG51bGwsXG4gICAgICAgICAgICAocGFyYW1ldGVycykgPT4ge1xuXG4gICAgICAgICAgICAgICAgbGV0IG86IFJ1bnRpbWVPYmplY3QgPSBwYXJhbWV0ZXJzWzBdLnZhbHVlO1xuICAgICAgICAgICAgICAgIGxldCBzaDogVHVydGxlSGVscGVyID0gby5pbnRyaW5zaWNEYXRhW1wiQWN0b3JcIl07XG4gICAgICAgICAgICAgICAgbGV0IHg6IG51bWJlciA9IHBhcmFtZXRlcnNbMV0udmFsdWU7XG4gICAgICAgICAgICAgICAgbGV0IHk6IG51bWJlciA9IHBhcmFtZXRlcnNbMl0udmFsdWU7XG5cbiAgICAgICAgICAgICAgICBpZiAoc2gudGVzdGRlc3Ryb3llZChcIlBvc2l0aW9uU2V0emVuXCIpKSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICBzaC5tb3ZlVG8oeCwgeSk7XG5cbiAgICAgICAgICAgIH0sIGZhbHNlLCBmYWxzZSwgXCJWZXJzY2hpZWJ0IGRpZSBUdXJ0bGUgYW4gZGllIFBvc2l0aW9uICh4LCB5KSBvaG5lIGVpbmUgbmV1ZSBMaW5pZSB6dSB6ZWljaG5lbi5cIiwgZmFsc2UpKTtcblxuICAgICAgICB0aGlzLmFkZE1ldGhvZChuZXcgTWV0aG9kKFwiWnVtU3RhcnRwdW5rdEdlaGVuXCIsIG5ldyBQYXJhbWV0ZXJsaXN0KFtcbiAgICAgICAgXSksIG51bGwsXG4gICAgICAgICAgICAocGFyYW1ldGVycykgPT4ge1xuXG4gICAgICAgICAgICAgICAgbGV0IG86IFJ1bnRpbWVPYmplY3QgPSBwYXJhbWV0ZXJzWzBdLnZhbHVlO1xuICAgICAgICAgICAgICAgIGxldCBzaDogVHVydGxlSGVscGVyID0gby5pbnRyaW5zaWNEYXRhW1wiQWN0b3JcIl07XG5cbiAgICAgICAgICAgICAgICBpZiAoc2gudGVzdGRlc3Ryb3llZChcIlp1bVN0YXJ0cHVua3RHZWhlblwiKSkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgc2gubW92ZVRvKDEwMCwgMjAwKTtcblxuICAgICAgICAgICAgfSwgZmFsc2UsIGZhbHNlLCBcIlZlcnNjaGllYnQgZGllIFR1cnRsZSBhbiBkaWUgUG9zaXRpb24gKDEwMCwgMjAwKSBvaG5lIGVpbmUgbmV1ZSBMaW5pZSB6dSB6ZWljaG5lbi5cIiwgZmFsc2UpKTtcblxuICAgICAgICB0aGlzLmFkZE1ldGhvZChuZXcgTWV0aG9kKFwiV2lua2VsU2V0emVuXCIsIG5ldyBQYXJhbWV0ZXJsaXN0KFtcbiAgICAgICAgICAgIHsgaWRlbnRpZmllcjogXCJ3aW5rZWxcIiwgdHlwZTogaW50UHJpbWl0aXZlVHlwZSwgZGVjbGFyYXRpb246IG51bGwsIHVzYWdlUG9zaXRpb25zOiBudWxsLCBpc0ZpbmFsOiB0cnVlIH0sXG4gICAgICAgIF0pLCBudWxsLFxuICAgICAgICAgICAgKHBhcmFtZXRlcnMpID0+IHtcblxuICAgICAgICAgICAgICAgIGxldCBvOiBSdW50aW1lT2JqZWN0ID0gcGFyYW1ldGVyc1swXS52YWx1ZTtcbiAgICAgICAgICAgICAgICBsZXQgc2g6IFR1cnRsZUhlbHBlciA9IG8uaW50cmluc2ljRGF0YVtcIkFjdG9yXCJdO1xuICAgICAgICAgICAgICAgIGxldCB3aW5rZWw6IG51bWJlciA9IHBhcmFtZXRlcnNbMV0udmFsdWU7XG5cbiAgICAgICAgICAgICAgICBpZiAoc2gudGVzdGRlc3Ryb3llZChcIldpbmtlbFNldHplblwiKSkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgc2gudHVybih3aW5rZWwgKyBzaC50dXJ0bGVBbmdsZURlZyk7XG5cbiAgICAgICAgICAgIH0sIGZhbHNlLCBmYWxzZSwgXCJTZXR6dCBkZW4gQmxpY2t3aW5rZWwgZGVyIFR1cnRsZS4gMMKwID0+IG5hY2ggcmVjaHRzLCA5MMKwOiA9PiBuYWNoIG9iZW4sIHVzdy4uXCIsIGZhbHNlKSk7XG5cbiAgICAgICAgdGhpcy5hZGRNZXRob2QobmV3IE1ldGhvZChcIldpbmtlbEdlYmVuXCIsIG5ldyBQYXJhbWV0ZXJsaXN0KFtcbiAgICAgICAgXSksIGludFByaW1pdGl2ZVR5cGUsXG4gICAgICAgICAgICAocGFyYW1ldGVycykgPT4ge1xuXG4gICAgICAgICAgICAgICAgbGV0IG86IFJ1bnRpbWVPYmplY3QgPSBwYXJhbWV0ZXJzWzBdLnZhbHVlO1xuICAgICAgICAgICAgICAgIGxldCBzaDogVHVydGxlSGVscGVyID0gby5pbnRyaW5zaWNEYXRhW1wiQWN0b3JcIl07XG5cbiAgICAgICAgICAgICAgICBpZiAoc2gudGVzdGRlc3Ryb3llZChcIldpbmtlbEdlYmVuXCIpKSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZCgtc2gudHVydGxlQW5nbGVEZWcpO1xuXG4gICAgICAgICAgICB9LCBmYWxzZSwgZmFsc2UsIFwiR2lidCBkZW4gQmxpY2t3aW5rZWwgZGVyIFR1cnRsZSB6dXLDvGNrLlwiLCBmYWxzZSkpO1xuXG4gICAgICAgIHRoaXMuYWRkTWV0aG9kKG5ldyBNZXRob2QoXCJYUG9zaXRpb25HZWJlblwiLCBuZXcgUGFyYW1ldGVybGlzdChbXG4gICAgICAgIF0pLCBpbnRQcmltaXRpdmVUeXBlLFxuICAgICAgICAgICAgKHBhcmFtZXRlcnMpID0+IHtcblxuICAgICAgICAgICAgICAgIGxldCBvOiBSdW50aW1lT2JqZWN0ID0gcGFyYW1ldGVyc1swXS52YWx1ZTtcbiAgICAgICAgICAgICAgICBsZXQgc2g6IFR1cnRsZUhlbHBlciA9IG8uaW50cmluc2ljRGF0YVtcIkFjdG9yXCJdO1xuXG4gICAgICAgICAgICAgICAgaWYgKHNoLnRlc3RkZXN0cm95ZWQoXCJYUG9zaXRpb25HZWJlblwiKSkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoc2gubGluZUVsZW1lbnRzW3NoLmxpbmVFbGVtZW50cy5sZW5ndGggLSAxXS54KTtcblxuICAgICAgICAgICAgfSwgZmFsc2UsIGZhbHNlLCBcIkdpYnQgeC1Qb3NpdGlvbiBkZXIgVHVydGxlIHp1csO8Y2suXCIsIGZhbHNlKSk7XG5cbiAgICAgICAgdGhpcy5hZGRNZXRob2QobmV3IE1ldGhvZChcIllQb3NpdGlvbkdlYmVuXCIsIG5ldyBQYXJhbWV0ZXJsaXN0KFtcbiAgICAgICAgXSksIGludFByaW1pdGl2ZVR5cGUsXG4gICAgICAgICAgICAocGFyYW1ldGVycykgPT4ge1xuXG4gICAgICAgICAgICAgICAgbGV0IG86IFJ1bnRpbWVPYmplY3QgPSBwYXJhbWV0ZXJzWzBdLnZhbHVlO1xuICAgICAgICAgICAgICAgIGxldCBzaDogVHVydGxlSGVscGVyID0gby5pbnRyaW5zaWNEYXRhW1wiQWN0b3JcIl07XG5cbiAgICAgICAgICAgICAgICBpZiAoc2gudGVzdGRlc3Ryb3llZChcIllQb3NpdGlvbkdlYmVuXCIpKSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZChzaC5saW5lRWxlbWVudHNbc2gubGluZUVsZW1lbnRzLmxlbmd0aCAtIDFdLnkpO1xuXG4gICAgICAgICAgICB9LCBmYWxzZSwgZmFsc2UsIFwiR2lidCB5LVBvc2l0aW9uIGRlciBUdXJ0bGUgenVyw7xjay5cIiwgZmFsc2UpKTtcblxuICAgICAgICB0aGlzLmFkZE1ldGhvZChuZXcgTWV0aG9kKFwiU2ljaHRiYXJrZWl0U2V0emVuXCIsIG5ldyBQYXJhbWV0ZXJsaXN0KFtcbiAgICAgICAgICAgIHsgaWRlbnRpZmllcjogXCJzaWNodGJhcmtlaXRcIiwgdHlwZTogaW50UHJpbWl0aXZlVHlwZSwgZGVjbGFyYXRpb246IG51bGwsIHVzYWdlUG9zaXRpb25zOiBudWxsLCBpc0ZpbmFsOiB0cnVlIH0sXG4gICAgICAgIF0pLCBudWxsLFxuICAgICAgICAgICAgKHBhcmFtZXRlcnMpID0+IHtcblxuICAgICAgICAgICAgICAgIGxldCBvOiBSdW50aW1lT2JqZWN0ID0gcGFyYW1ldGVyc1swXS52YWx1ZTtcbiAgICAgICAgICAgICAgICBsZXQgc2g6IEZpbGxlZFNoYXBlSGVscGVyID0gby5pbnRyaW5zaWNEYXRhW1wiQWN0b3JcIl07XG4gICAgICAgICAgICAgICAgbGV0IHNpY2h0YmFya2VpdDogYm9vbGVhbiA9IHBhcmFtZXRlcnNbMV0udmFsdWU7XG5cbiAgICAgICAgICAgICAgICBpZiAoc2gudGVzdGRlc3Ryb3llZChcIlNpY2h0YmFya2VpdFNldHplblwiKSkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgc2guc2V0VmlzaWJsZShzaWNodGJhcmtlaXQpO1xuXG4gICAgICAgICAgICB9LCBmYWxzZSwgZmFsc2UsIFwiU2NoYWx0ZXQgZGllIFNpY2h0YmFya2VpdCBkZXIgRmlndXIgZWluIG9kZXIgYXVzLlwiLCBmYWxzZSkpO1xuXG4gICAgICAgIHRoaXMuYWRkTWV0aG9kKG5ldyBNZXRob2QoXCJFbnRmZXJuZW5cIiwgbmV3IFBhcmFtZXRlcmxpc3QoW10pLCBudWxsLFxuICAgICAgICAgICAgKHBhcmFtZXRlcnMpID0+IHtcblxuICAgICAgICAgICAgICAgIGxldCBvOiBSdW50aW1lT2JqZWN0ID0gcGFyYW1ldGVyc1swXS52YWx1ZTtcbiAgICAgICAgICAgICAgICBsZXQgc2g6IEZpbGxlZFNoYXBlSGVscGVyID0gby5pbnRyaW5zaWNEYXRhW1wiQWN0b3JcIl07XG5cbiAgICAgICAgICAgICAgICBpZiAoc2gudGVzdGRlc3Ryb3llZChcIkVudGZlcm5lblwiKSkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgc2guZGVzdHJveSgpO1xuXG4gICAgICAgICAgICB9LCBmYWxzZSwgZmFsc2UsIFwiU2NoYWx0ZXQgZGllIFNpY2h0YmFya2VpdCBkZXIgRmlndXIgZWluIG9kZXIgYXVzLlwiLCBmYWxzZSkpO1xuXG4gICAgICAgIHRoaXMuYWRkTWV0aG9kKG5ldyBNZXRob2QoXCJHYW56TmFjaFZvcm5CcmluZ2VuXCIsIG5ldyBQYXJhbWV0ZXJsaXN0KFtcbiAgICAgICAgXSksIG51bGwsXG4gICAgICAgICAgICAocGFyYW1ldGVycykgPT4ge1xuXG4gICAgICAgICAgICAgICAgbGV0IG86IFJ1bnRpbWVPYmplY3QgPSBwYXJhbWV0ZXJzWzBdLnZhbHVlO1xuICAgICAgICAgICAgICAgIGxldCBzaDogRmlsbGVkU2hhcGVIZWxwZXIgPSBvLmludHJpbnNpY0RhdGFbXCJBY3RvclwiXTtcblxuICAgICAgICAgICAgICAgIGlmIChzaC50ZXN0ZGVzdHJveWVkKFwiR2Fuek5hY2hWb3JuQnJpbmdlblwiKSkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNoLmJyaW5nVG9Gcm9udCgpO1xuXG4gICAgICAgICAgICB9LCBmYWxzZSwgZmFsc2UsICdTZXR6dCBkYXMgR3JhZmlrb2JqZWt0IHZvciBhbGxlIGFuZGVyZW4uJywgZmFsc2UpKTtcblxuICAgICAgICB0aGlzLmFkZE1ldGhvZChuZXcgTWV0aG9kKFwiR2Fuek5hY2hIaW50ZW5CcmluZ2VuXCIsIG5ldyBQYXJhbWV0ZXJsaXN0KFtcbiAgICAgICAgXSksIG51bGwsXG4gICAgICAgICAgICAocGFyYW1ldGVycykgPT4ge1xuXG4gICAgICAgICAgICAgICAgbGV0IG86IFJ1bnRpbWVPYmplY3QgPSBwYXJhbWV0ZXJzWzBdLnZhbHVlO1xuICAgICAgICAgICAgICAgIGxldCBzaDogRmlsbGVkU2hhcGVIZWxwZXIgPSBvLmludHJpbnNpY0RhdGFbXCJBY3RvclwiXTtcblxuICAgICAgICAgICAgICAgIGlmIChzaC50ZXN0ZGVzdHJveWVkKFwiR2Fuek5hY2hIaW50ZW5CcmluZ2VuXCIpKSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gc2guc2VuZFRvQmFjaygpO1xuXG4gICAgICAgICAgICB9LCBmYWxzZSwgZmFsc2UsICdTZXR6dCBkYXMgR3JhZmlrb2JqZWt0IGhpbnRlciBhbGxlIGFuZGVyZW4uJywgZmFsc2UpKTtcblxuICAgICAgICB0aGlzLmFkZE1ldGhvZChuZXcgTWV0aG9kKFwiTmFjaFZvcm5CcmluZ2VuXCIsIG5ldyBQYXJhbWV0ZXJsaXN0KFtcbiAgICAgICAgXSksIG51bGwsXG4gICAgICAgICAgICAocGFyYW1ldGVycykgPT4ge1xuXG4gICAgICAgICAgICAgICAgbGV0IG86IFJ1bnRpbWVPYmplY3QgPSBwYXJhbWV0ZXJzWzBdLnZhbHVlO1xuICAgICAgICAgICAgICAgIGxldCBzaDogRmlsbGVkU2hhcGVIZWxwZXIgPSBvLmludHJpbnNpY0RhdGFbXCJBY3RvclwiXTtcblxuICAgICAgICAgICAgICAgIGlmIChzaC50ZXN0ZGVzdHJveWVkKFwiTmFjaFZvcm5CcmluZ2VuXCIpKSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gc2guYnJpbmdPbmVQbGFuZUZ1cnRoZXJUb0Zyb250KCk7XG5cbiAgICAgICAgICAgIH0sIGZhbHNlLCBmYWxzZSwgJ1NldHp0IGRhcyBHcmFmaWtvYmpla3QgZWluZSBFYmVuZSBuYWNoIHZvcm5lLicsIGZhbHNlKSk7XG5cbiAgICAgICAgdGhpcy5hZGRNZXRob2QobmV3IE1ldGhvZChcIk5hY2hIaW50ZW5CcmluZ2VuXCIsIG5ldyBQYXJhbWV0ZXJsaXN0KFtcbiAgICAgICAgXSksIG51bGwsXG4gICAgICAgICAgICAocGFyYW1ldGVycykgPT4ge1xuXG4gICAgICAgICAgICAgICAgbGV0IG86IFJ1bnRpbWVPYmplY3QgPSBwYXJhbWV0ZXJzWzBdLnZhbHVlO1xuICAgICAgICAgICAgICAgIGxldCBzaDogRmlsbGVkU2hhcGVIZWxwZXIgPSBvLmludHJpbnNpY0RhdGFbXCJBY3RvclwiXTtcblxuICAgICAgICAgICAgICAgIGlmIChzaC50ZXN0ZGVzdHJveWVkKFwiTmFjaEhpbnRlbkJyaW5nZW5cIikpIHJldHVybjtcblxuICAgICAgICAgICAgICAgIHJldHVybiBzaC5icmluZ09uZVBsYW5lRnVydGhlclRvQmFjaygpO1xuXG4gICAgICAgICAgICB9LCBmYWxzZSwgZmFsc2UsICdTZXR6dCBkYXMgR3JhZmlrb2JqZWt0IGVpbmUgRWJlbmUgbmFjaCBoaW50ZW4uJywgZmFsc2UpKTtcblxuICAgICAgICB0aGlzLmFkZE1ldGhvZChuZXcgTWV0aG9kKFwiQmVyw7xocnRcIiwgbmV3IFBhcmFtZXRlcmxpc3QoW1xuICAgICAgICBdKSwgYm9vbGVhblByaW1pdGl2ZVR5cGUsXG4gICAgICAgICAgICAocGFyYW1ldGVycykgPT4ge1xuXG4gICAgICAgICAgICAgICAgbGV0IG86IFJ1bnRpbWVPYmplY3QgPSBwYXJhbWV0ZXJzWzBdLnZhbHVlO1xuICAgICAgICAgICAgICAgIGxldCBzaDogVHVydGxlSGVscGVyID0gby5pbnRyaW5zaWNEYXRhW1wiQWN0b3JcIl07XG5cbiAgICAgICAgICAgICAgICBpZiAoc2gudGVzdGRlc3Ryb3llZChcIkJlcsO8aHJ0XCIpKSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gc2gudG91Y2hlc0F0TGVhc3RPbmVGaWd1cmUoKTtcblxuICAgICAgICAgICAgfSwgZmFsc2UsIGZhbHNlLCAnR2lidCBnZW5hdSBkYW5uIHRydWUgenVyw7xjaywgd2VubiBzaWNoIGFuIGRlciBha3R1ZWxsZW4gUG9zaXRpb24gZGVyIFR1cnRsZSBtaW5kZXN0ZW5zIGVpbmUgYW5kZXJlIEZpZ3VyIGJlZmluZGV0LicsIGZhbHNlKSk7XG5cbiAgICAgICAgdGhpcy5hZGRNZXRob2QobmV3IE1ldGhvZChcIkJlcsO8aHJ0XCIsIG5ldyBQYXJhbWV0ZXJsaXN0KFtcbiAgICAgICAgICAgIHsgaWRlbnRpZmllcjogXCJmYXJiZVwiLCB0eXBlOiBzdHJpbmdQcmltaXRpdmVUeXBlLCBkZWNsYXJhdGlvbjogbnVsbCwgdXNhZ2VQb3NpdGlvbnM6IG51bGwsIGlzRmluYWw6IHRydWUgfVxuICAgICAgICBdKSwgYm9vbGVhblByaW1pdGl2ZVR5cGUsXG4gICAgICAgICAgICAocGFyYW1ldGVycykgPT4ge1xuXG4gICAgICAgICAgICAgICAgbGV0IG86IFJ1bnRpbWVPYmplY3QgPSBwYXJhbWV0ZXJzWzBdLnZhbHVlO1xuICAgICAgICAgICAgICAgIGxldCBmYXJiZVN0cmluZzogc3RyaW5nID0gcGFyYW1ldGVyc1sxXS52YWx1ZTtcbiAgICAgICAgICAgICAgICBsZXQgc2g6IFR1cnRsZUhlbHBlciA9IG8uaW50cmluc2ljRGF0YVtcIkFjdG9yXCJdO1xuXG4gICAgICAgICAgICAgICAgaWYgKHNoLnRlc3RkZXN0cm95ZWQoXCJCZXLDvGhydFwiKSkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgbGV0IGZhcmJlID0gR05HRmFyYmVuW2ZhcmJlU3RyaW5nXTtcbiAgICAgICAgICAgICAgICBpZiAoZmFyYmUgPT0gbnVsbCkgZmFyYmUgPSAwO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNoLnRvdWNoZXNDb2xvcihmYXJiZSk7XG5cbiAgICAgICAgICAgIH0sIGZhbHNlLCBmYWxzZSwgJ0dpYnQgZ2VuYXUgZGFubiB0cnVlIHp1csO8Y2ssIHdlbm4gc2ljaCBhbiBkZXIgYWt0dWVsbGVuIFBvc2l0aW9uIGRlciBUdXJ0bGUgbWluZGVzdGVucyBlaW5lIGFuZGVyZSBGaWd1ciBtaXQgZGVyIGFuZ2VnZWJlbmVuIEZhcmJlIGJlZmluZGV0LicsIGZhbHNlKSk7XG5cbiAgICAgICAgdGhpcy5hZGRNZXRob2QobmV3IE1ldGhvZChcIkJlcsO8aHJ0XCIsIG5ldyBQYXJhbWV0ZXJsaXN0KFtcbiAgICAgICAgICAgIHsgaWRlbnRpZmllcjogXCJvYmpla3RcIiwgdHlwZTogb2JqZWN0VHlwZSwgZGVjbGFyYXRpb246IG51bGwsIHVzYWdlUG9zaXRpb25zOiBudWxsLCBpc0ZpbmFsOiB0cnVlIH1cbiAgICAgICAgXSksIGJvb2xlYW5QcmltaXRpdmVUeXBlLFxuICAgICAgICAgICAgKHBhcmFtZXRlcnMpID0+IHtcblxuICAgICAgICAgICAgICAgIGxldCBvOiBSdW50aW1lT2JqZWN0ID0gcGFyYW1ldGVyc1swXS52YWx1ZTtcbiAgICAgICAgICAgICAgICBsZXQgb2JqZWN0OiBSdW50aW1lT2JqZWN0ID0gcGFyYW1ldGVyc1sxXS52YWx1ZTtcbiAgICAgICAgICAgICAgICBsZXQgc2g6IFR1cnRsZUhlbHBlciA9IG8uaW50cmluc2ljRGF0YVtcIkFjdG9yXCJdO1xuICAgICAgICAgICAgICAgIGxldCBvYmplY3RTaGFwZUhlbHBlciA9IG9iamVjdC5pbnRyaW5zaWNEYXRhW1wiQWN0b3JcIl07XG5cbiAgICAgICAgICAgICAgICBpZiAob2JqZWN0U2hhcGVIZWxwZXIgPT0gbnVsbCB8fCAhKG9iamVjdFNoYXBlSGVscGVyIGluc3RhbmNlb2YgU2hhcGVIZWxwZXIpKSByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICBpZiAoc2gudGVzdGRlc3Ryb3llZChcIkJlcsO8aHJ0XCIpKSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gc2gudG91Y2hlc1NoYXBlKG9iamVjdFNoYXBlSGVscGVyKTtcblxuICAgICAgICAgICAgfSwgZmFsc2UsIGZhbHNlLCAnR2lidCBnZW5hdSBkYW5uIHRydWUgenVyw7xjaywgd2VubiBkaWUgw7xiZXJnZWJlbmUgRmlndXIgZGllIGFrdHVlbGxlIFR1cnRsZXBvc2l0aW9uIGVudGjDpGx0LicsIGZhbHNlKSk7XG5cblxuXG4gICAgICAgIHRoaXMuYWRkTWV0aG9kKG5ldyBNZXRob2QoXCJBa3Rpb25BdXNmw7xocmVuXCIsIG5ldyBQYXJhbWV0ZXJsaXN0KFtdKSwgdm9pZFByaW1pdGl2ZVR5cGUsXG4gICAgICAgICAgICBudWxsLCAgLy8gbm8gaW1wbGVtZW50YXRpb24hXG4gICAgICAgICAgICBmYWxzZSwgZmFsc2UsIFwiRGllc2UgTWV0aG9kZSB3aXJkIHZvbSBUYWt0Z2ViZXIgYXVmZ2VydWZlbi5cIikpO1xuXG4gICAgICAgIHRoaXMuYWRkTWV0aG9kKG5ldyBNZXRob2QoXCJUYXN0ZUdlZHLDvGNrdFwiLCBuZXcgUGFyYW1ldGVybGlzdChbXG4gICAgICAgICAgICB7IGlkZW50aWZpZXI6IFwidGFzdGVcIiwgdHlwZTogY2hhclByaW1pdGl2ZVR5cGUsIGRlY2xhcmF0aW9uOiBudWxsLCB1c2FnZVBvc2l0aW9uczogbnVsbCwgaXNGaW5hbDogdHJ1ZSB9XG4gICAgICAgIF0pLCB2b2lkUHJpbWl0aXZlVHlwZSxcbiAgICAgICAgICAgIG51bGwsICAvLyBubyBpbXBsZW1lbnRhdGlvbiFcbiAgICAgICAgICAgIGZhbHNlLCBmYWxzZSwgXCJXaXJkIGF1ZmdlcnVmZW4sIHdlbm4gZWluZSBUYXN0ZSBnZWRyw7xja3Qgd2lyZC5cIikpO1xuXG4gICAgICAgIHRoaXMuYWRkTWV0aG9kKG5ldyBNZXRob2QoXCJTb25kZXJUYXN0ZUdlZHLDvGNrdFwiLCBuZXcgUGFyYW1ldGVybGlzdChbXG4gICAgICAgICAgICB7IGlkZW50aWZpZXI6IFwidGFzdGVcIiwgdHlwZTogaW50UHJpbWl0aXZlVHlwZSwgZGVjbGFyYXRpb246IG51bGwsIHVzYWdlUG9zaXRpb25zOiBudWxsLCBpc0ZpbmFsOiB0cnVlIH1cbiAgICAgICAgXSksIHZvaWRQcmltaXRpdmVUeXBlLFxuICAgICAgICAgICAgbnVsbCwgIC8vIG5vIGltcGxlbWVudGF0aW9uIVxuICAgICAgICAgICAgZmFsc2UsIGZhbHNlLCBcIldpcmQgYXVmZ2VydWZlbiwgd2VubiBlaW5lIFNvbmRlcnRhc3RlIGdlZHLDvGNrdCB3aXJkLlwiKSk7XG5cbiAgICAgICAgdGhpcy5hZGRNZXRob2QobmV3IE1ldGhvZChcIk1hdXNHZWtsaWNrdFwiLCBuZXcgUGFyYW1ldGVybGlzdChbXG4gICAgICAgICAgICB7IGlkZW50aWZpZXI6IFwieFwiLCB0eXBlOiBpbnRQcmltaXRpdmVUeXBlLCBkZWNsYXJhdGlvbjogbnVsbCwgdXNhZ2VQb3NpdGlvbnM6IG51bGwsIGlzRmluYWw6IHRydWUgfSxcbiAgICAgICAgICAgIHsgaWRlbnRpZmllcjogXCJ5XCIsIHR5cGU6IGludFByaW1pdGl2ZVR5cGUsIGRlY2xhcmF0aW9uOiBudWxsLCB1c2FnZVBvc2l0aW9uczogbnVsbCwgaXNGaW5hbDogdHJ1ZSB9LFxuICAgICAgICAgICAgeyBpZGVudGlmaWVyOiBcImFuemFobFwiLCB0eXBlOiBpbnRQcmltaXRpdmVUeXBlLCBkZWNsYXJhdGlvbjogbnVsbCwgdXNhZ2VQb3NpdGlvbnM6IG51bGwsIGlzRmluYWw6IHRydWUgfSxcbiAgICAgICAgXSksIHZvaWRQcmltaXRpdmVUeXBlLFxuICAgICAgICAgICAgbnVsbCwgIC8vIG5vIGltcGxlbWVudGF0aW9uIVxuICAgICAgICAgICAgZmFsc2UsIGZhbHNlLCBcIldpcmQgYXVmZ2VydWZlbiwgd2VubiBlaW5lIGRpZSBsaW5rZSBNYXVzdGFzdGUgZ2VkcsO8Y2t0IHdpcmQuXCIpKTtcblxuXG5cbiAgICB9XG5cblxuXG5cblxufVxuXG4iXX0=