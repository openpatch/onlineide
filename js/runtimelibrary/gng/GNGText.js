import { Klass, Visibility } from "../../compiler/types/Class.js";
import { intPrimitiveType, stringPrimitiveType } from "../../compiler/types/PrimitiveTypes.js";
import { Attribute, Method, Parameterlist } from "../../compiler/types/Types.js";
import { TextHelper } from "../graphics/Text.js";
export class GNGTextClass extends Klass {
    constructor(module, moduleStore) {
        super("GText", module, "Text-Klasse der Graphics'n Games-Bibliothek (Cornelsen-Verlag)");
        this.setBaseClass(module.typeStore.getType("GNGBaseFigur"));
        this.addAttribute(new Attribute("text", stringPrimitiveType, (value) => {
            let text = value.object.intrinsicData["Actor"].text;
            value.value = text;
        }, false, Visibility.private, false, "Angezeigter Text"));
        this.addAttribute(new Attribute("textgröße", intPrimitiveType, (value) => {
            let fontsize = value.object.intrinsicData["Actor"].fontsize;
            value.value = Math.round(fontsize);
        }, false, Visibility.private, false, "Textgröße"));
        this.setupAttributeIndicesRecursive();
        this.addMethod(new Method("Text", new Parameterlist([]), null, (parameters) => {
            let o = parameters[0].value;
            o.intrinsicData["isGNG"] = true;
            let rh = new TextHelper(2, -8, 12, "Text", module.main.getInterpreter(), o);
            o.intrinsicData["moveAnchor"] = { x: 6, y: 16 };
            rh.setFillColor(0);
            o.intrinsicData["Actor"] = rh;
        }, false, false, 'Instanziert ein neues Text-Objekt.', true));
        this.addMethod(new Method("TextSetzen", new Parameterlist([
            { identifier: "text", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true }
        ]), null, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            let text = parameters[1].value;
            if (sh.testdestroyed("TextSetzen"))
                return;
            sh.setText(text);
        }, false, false, "Ändert den Text des Text-Objekts.", false));
        this.addMethod(new Method("TextGrößeSetzen", new Parameterlist([
            { identifier: "textGröße", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }
        ]), null, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            let größe = parameters[1].value;
            if (sh.testdestroyed("TextGrößeSetzen"))
                return;
            sh.setFontsize(größe);
        }, false, false, "Setzt die Schriftgröße des Text-Objekts.", false));
        this.addMethod(new Method("TextVergrößern", new Parameterlist([]), null, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            if (sh.testdestroyed("TextVergrößern"))
                return;
            let size = sh.fontsize;
            if (size <= 10) {
                size += 1;
            }
            else if (size <= 40) {
                size += 2;
            }
            else {
                size += 4;
            }
            sh.setFontsize(size);
        }, false, false, "Vergrößert die Schriftgröße des Text-Objekts.", false));
        this.addMethod(new Method("TextVerkleinern", new Parameterlist([]), null, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            if (sh.testdestroyed("TextVerkleinern"))
                return;
            let size = sh.fontsize;
            if (size <= 10) {
                size -= 1;
            }
            else if (size <= 40) {
                size -= 2;
            }
            else {
                size -= 4;
            }
            if (size < 1) {
                size = 1;
            }
            sh.setFontsize(size);
        }, false, false, "Verkleinert die Schriftgröße des Text-Objekts.", false));
    }
}
//# sourceMappingURL=data:application/json;base64,