import { Klass, Visibility } from "../../compiler/types/Class.js";
import { intPrimitiveType } from "../../compiler/types/PrimitiveTypes.js";
import { Attribute, Method, Parameterlist } from "../../compiler/types/Types.js";
import { PolygonHelper } from "../graphics/Polygon.js";
export class GNGDreieckClass extends Klass {
    constructor(module, moduleStore) {
        super("Dreieck", module, "Dreieck-Klasse der Graphics'n Games-Bibliothek (Cornelsen-Verlag)");
        this.setBaseClass(module.typeStore.getType("GNGBaseFigur"));
        this.addAttribute(new Attribute("breite", intPrimitiveType, (value) => {
            let breite = value.object.intrinsicData["Breite"];
            value.value = Math.round(breite);
        }, false, Visibility.protected, false, "Breite des Dreiecks"));
        this.addAttribute(new Attribute("höhe", intPrimitiveType, (value) => {
            let höhe = value.object.intrinsicData["Höhe"];
            value.value = Math.round(höhe);
        }, false, Visibility.protected, false, "Höhe des Dreiecks"));
        this.setupAttributeIndicesRecursive();
        this.addMethod(new Method("Dreieck", new Parameterlist([]), null, (parameters) => {
            let o = parameters[0].value;
            o.intrinsicData["isGNG"] = true;
            let rh = new PolygonHelper([60, 10, 110, 110, 10, 110], true, module.main.getInterpreter(), o);
            o.intrinsicData["Actor"] = rh;
            o.intrinsicData["moveAnchor"] = { x: 60, y: 10 };
            rh.centerXInitial = 60;
            rh.centerYInitial = 60;
            o.intrinsicData["Breite"] = 100;
            o.intrinsicData["Höhe"] = 100;
            o.intrinsicData["Farbe"] = "rot";
            rh.setFillColor(0xff0000);
        }, false, false, 'Instanziert ein neues Dreieck-Objekt.', true));
        this.addMethod(new Method("GrößeSetzen", new Parameterlist([
            { identifier: "breite", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
            { identifier: "höhe", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }
        ]), null, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            let breite = parameters[1].value;
            let höhe = parameters[2].value;
            o.intrinsicData["Breite"] = breite;
            o.intrinsicData["Höhe"] = höhe;
            breite /= sh.scaleFactor;
            höhe /= sh.scaleFactor;
            if (sh.testdestroyed("GrößeSetzen"))
                return;
            sh.setAllPointsUntransformed([60, 10, 60 - breite / 2, 10 + höhe, 60 + breite / 2, 10 + höhe]);
            sh.centerXInitial = 60;
            sh.centerYInitial = 10 + höhe / 2;
            // sh.setAllPointsUntransformed([60, 60 - höhe/2, 60 - breite/2, 60 + höhe/2, 60 + breite/2, 60 + höhe/2 ]);
        }, false, false, "Setzt die Breite und Höhe des Dreiecks.", false));
    }
}
//# sourceMappingURL=data:application/json;base64,