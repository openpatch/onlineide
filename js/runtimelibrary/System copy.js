import { Method, Parameterlist, Attribute } from "../compiler/types/Types.js";
import { Klass, Visibility, Interface } from "../compiler/types/Class.js";
import { stringPrimitiveType, intPrimitiveType, voidPrimitiveType } from "../compiler/types/PrimitiveTypes.js";
import { RuntimeObject } from "../interpreter/RuntimeObject.js";
export class SystemClass extends Klass {
    constructor(module) {
        super("System", module, "Klasse mit statischen Methoden für Systemfunktionen, z.B. Sound, Löschen der Ausgabe usw.");
        this.deltaTimeMillis = 0; // when using WebSocket then the Server sends time synchronization
        this.printStream = new RuntimeObject(module.typeStore.getType("PrintStream"));
        this.setBaseClass(module.typeStore.getType("Object"));
        this.addAttribute(new Attribute("out", module.typeStore.getType("PrintStream"), (value) => { value.value = this.printStream; }, true, Visibility.public, true, "PrintStream-Objekt, mit dem Text ausgegeben werden kann."));
        this.staticClass.classObject = new RuntimeObject(this.staticClass);
        this.staticClass.classObject.initializeAttributeValues();
        this.addMethod(new Method("clearScreen", new Parameterlist([]), null, (parameters) => {
            module.main.getInterpreter().printManager.clear();
        }, false, true, "Löscht den Bildschirm"));
        this.addMethod(new Method("addKeyListener", new Parameterlist([
            { identifier: "keyListener", type: module.typeStore.getType("KeyListener"), declaration: null, usagePositions: null, isFinal: true }
        ]), null, (parameters) => {
            let r = parameters[1].value;
            let method = r.class.getMethodBySignature("onKeyTyped(String)");
            if (method != null) {
                module.main.getInterpreter().keyboardTool.keyPressedCallbacks.push((key) => {
                    let program = method === null || method === void 0 ? void 0 : method.program;
                    let invoke = method === null || method === void 0 ? void 0 : method.invoke;
                    let stackElements = [
                        {
                            type: r.class,
                            value: r
                        },
                        {
                            type: stringPrimitiveType,
                            value: key
                        }
                    ];
                    if (program != null) {
                        module.main.getInterpreter().runTimer(method, stackElements, null, false);
                    }
                    else if (invoke != null) {
                        invoke([]);
                    }
                });
            }
        }, false, true, "Fügt einen KeyListener hinzu, dessen Methode keyTyped immer dann aufgerufen wird, wenn eine Taste gedrückt und anschließend losgelassen wird."));
        // this.addMethod(new Method("playSound", new Parameterlist([
        //     { identifier: "sound", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true }
        // ]), null,
        // (parameters) => {
        //     let sound: string = parameters[1].value;
        //     SoundTools.play(sound);
        // }    
        // , false, true, "Spielt einen Sound ab. Die Möglichen Sounds sind als statische Variablen der Klasse Sound hinterlegt. Tippe als Parameter also Sound gefolgt von einem Punkt ein, um eine Auswahl zu sehen!"));
        this.addMethod(new Method("currentTimeMillis", new Parameterlist([]), intPrimitiveType, (parameters) => {
            return Date.now() + this.deltaTimeMillis;
        }, false, true, "Gibt die Anzahl der Millisekunden, die seit dem 01.01.1970 00:00:00 UTC vergangen sind, zurück."));
    }
}
export class KeyListener extends Interface {
    constructor(module) {
        super("KeyListener", module, "Interface mit Methode onKeyTyped. Eine Klasse, die dieses Interface implementiert, kann auf Tastatureingaben reagieren. Ein Objekt dieser Klasse muss zuvor aber mit System.addKeyListener() registriert werden.");
        this.addMethod(new Method("onKeyTyped", new Parameterlist([
            { identifier: "key", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true }
        ]), voidPrimitiveType, null, // no implementation!
        false, false, "Wird aufgerufen, nachdem eine Taste gedrückt wurde."));
    }
}
export class PrintStreamClass extends Klass {
    constructor(module) {
        super("PrintStream", module, "Interne Hilfsklasse, um System.out.println zu ermöglichen. Das Objekt System.out ist von der Klasse PrintStream.");
        this.setBaseClass(module.typeStore.getType("Object"));
        this.addMethod(new Method("print", new Parameterlist([
            { identifier: "text", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true }
        ]), null, (parameters) => {
            module.main.getInterpreter().printManager.print(parameters[1].value);
        }, false, true, "Gibt den Text aus."));
        this.addMethod(new Method("println", new Parameterlist([
            { identifier: "text", type: stringPrimitiveType, declaration: null, usagePositions: null, isFinal: true }
        ]), null, (parameters) => {
            module.main.getInterpreter().printManager.println(parameters[1].value);
        }, false, true, "Gibt den Text aus, gefolgt von einem Zeilensprung."));
    }
}
//# sourceMappingURL=data:application/json;base64,