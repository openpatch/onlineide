import { Klass } from "../../compiler/types/Class.js";
import { doublePrimitiveType } from "../../compiler/types/PrimitiveTypes.js";
import { Method, Parameterlist } from "../../compiler/types/Types.js";
import { RuntimeObject } from "../../interpreter/RuntimeObject.js";
import { FilledShapeHelper } from "./FilledShape.js";
export class EllipseClass extends Klass {
    constructor(module) {
        super("Ellipse", module, "Ellipse");
        this.setBaseClass(module.typeStore.getType("FilledShape"));
        // this.addAttribute(new Attribute("PI", doublePrimitiveType, (object) => { return Math.PI }, true, Visibility.public, true, "Die Kreiszahl Pi (3.1415...)"));
        this.addMethod(new Method("Ellipse", new Parameterlist([
            { identifier: "mx", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },
            { identifier: "my", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },
            { identifier: "rx", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },
            { identifier: "ry", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },
        ]), null, (parameters) => {
            let o = parameters[0].value;
            let mx = parameters[1].value;
            let my = parameters[2].value;
            let rx = parameters[3].value;
            let ry = parameters[4].value;
            let rh = new EllipseHelper(mx, my, rx, ry, module.main.getInterpreter(), o);
            o.intrinsicData["Actor"] = rh;
        }, false, false, 'Instanziert eine neue Ellipse. (mx, my) ist der Mittelpunt, rx und ry sind ihre Radien.', true));
        this.addMethod(new Method("setRadiusX", new Parameterlist([
            { identifier: "rx", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },
        ]), null, (parameters) => {
            let o = parameters[0].value;
            let r = parameters[1].value;
            let sh = o.intrinsicData["Actor"];
            sh.setRadiusX(r);
        }, false, false, 'Setzt den x-Radius der Ellipse"', false));
        this.addMethod(new Method("setRadiusY", new Parameterlist([
            { identifier: "ry", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },
        ]), null, (parameters) => {
            let o = parameters[0].value;
            let r = parameters[1].value;
            let sh = o.intrinsicData["Actor"];
            sh.setRadiusY(r);
        }, false, false, 'Setzt den y-Radius der Ellipse"', false));
        this.addMethod(new Method("copy", new Parameterlist([]), this, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            if (sh.testdestroyed("copy"))
                return;
            return sh.getCopy(o.class);
        }, false, false, 'Erstellt eine Kopie des Ellipse-Objekts und git sie zur√ºck.', false));
    }
}
export class EllipseHelper extends FilledShapeHelper {
    constructor(mx, my, rx, ry, interpreter, runtimeObject) {
        super(interpreter, runtimeObject);
        this.mx = mx;
        this.my = my;
        this.rx = rx;
        this.ry = ry;
        this.centerXInitial = mx;
        this.centerYInitial = my;
        this.render();
        this.addToDefaultGroupAndSetDefaultVisibility();
    }
    getCopy(klass) {
        let ro = new RuntimeObject(klass);
        let rh = new EllipseHelper(this.mx, this.my, this.rx, this.ry, this.worldHelper.interpreter, ro);
        ro.intrinsicData["Actor"] = rh;
        rh.copyFrom(this);
        rh.render();
        return ro;
    }
    render() {
        this.hitPolygonInitial = [];
        let deltaAlpha = Math.PI / 8;
        for (let i = 0; i < 16; i++) {
            let alpha = deltaAlpha * i;
            this.hitPolygonInitial.push({
                x: this.mx + this.rx * Math.cos(alpha),
                y: this.my + this.ry * Math.sin(alpha)
            });
        }
        let g = this.displayObject;
        if (this.displayObject == null) {
            g = new PIXI.Graphics();
            this.displayObject = g;
            this.worldHelper.stage.addChild(g);
        }
        else {
            g.clear();
        }
        if (this.fillColor != null) {
            g.beginFill(this.fillColor, this.fillAlpha);
        }
        if (this.borderColor != null) {
            g.lineStyle(this.borderWidth, this.borderColor, this.borderAlpha, 0.5);
        }
        g.drawEllipse(this.mx, this.my, this.rx, this.ry);
        g.closePath();
        if (this.fillColor != null) {
            g.endFill();
        }
    }
    ;
    setRadiusX(r) {
        this.rx = r;
        this.render();
    }
    setRadiusY(r) {
        this.rx = r;
        this.render();
    }
    isOutsideView() {
        return super.isOutsideView();
    }
    containsPoint(x, y) {
        if (!this.displayObject.getBounds().contains(x, y))
            return false;
        let p = new PIXI.Point(x, y);
        let m = this.displayObject.transform.worldTransform;
        m.applyInverse(p, p);
        let dx = p.x - this.mx;
        let dy = p.y - this.my;
        return dx * dx / (this.rx * this.rx) + dy * dy / (this.ry * this.ry) <= 1;
    }
}
//# sourceMappingURL=data:application/json;base64,