import { Klass, Visibility } from "../../compiler/types/Class.js";
import { intPrimitiveType } from "../../compiler/types/PrimitiveTypes.js";
import { Attribute } from "../../compiler/types/Types.js";
import { RuntimeObject } from "../../interpreter/RuntimeObject.js";
export class KeyEvent extends Klass {
    constructor(module, moduleStore) {
        super("KeyEvent", module, "Nachbildung von java.awt.event.KeyEvent");
        this.setBaseClass(moduleStore.getType("Object").type);
        /**
         *  "Enter": 13,
        "ArrowLeft": 37,
        "ArrowRight": 39,
        "ArrowUp": 38,
        "ArrowDown": 40,
        "F1": 112,
        "F2": 113,
        "F3": 114,
        "F4": 115,
        "F5": 116,
        "F6": 117,
        "F7": 118,
        "F8": 119,
        "F9": 120,
        "F10": 121,
        "F11": 122,
        "F12": 123,
        "PageUp": 33,
        "PageDown": 34,
        "Insert": 155
         */
        let keys = [{ name: "VK_ENTER", code: 13 }, { name: "VK_LEFT", code: 37 }, { name: "VK_UP", code: 38 },
            { name: "VK_RIGHT", code: 39 }, { name: "VK_DOWN", code: 40 }, { name: "VK_PAGE_UP", code: 33 }, { name: "VK_PAGE_DOWN", code: 34 },
            { name: "VK_INSERT", code: 155 }];
        for (let i = 1; i <= 12; i++) {
            keys.push({ name: "VK" + i, code: 111 + i });
        }
        for (let key of keys) {
            this.addAttribute(new Attribute(key.name, intPrimitiveType, (value) => { value.value = key.code; }, true, Visibility.public, true, "KeyCode f√ºr die Taste " + key.name));
        }
        this.setupAttributeIndicesRecursive();
        this.staticClass.setupAttributeIndicesRecursive();
        this.staticClass.classObject = new RuntimeObject(this.staticClass);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiS2V5RXZlbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY2xpZW50L3J1bnRpbWVsaWJyYXJ5L2dyYXBoaWNzL0tleUV2ZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDbEUsT0FBTyxFQUE2QyxnQkFBZ0IsRUFBdUIsTUFBTSx3Q0FBd0MsQ0FBQztBQUMxSSxPQUFPLEVBQUUsU0FBUyxFQUF5QixNQUFNLCtCQUErQixDQUFDO0FBQ2pGLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUtuRSxNQUFNLE9BQU8sUUFBUyxTQUFRLEtBQUs7SUFFL0IsWUFBWSxNQUFjLEVBQUUsV0FBd0I7UUFFaEQsS0FBSyxDQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUUseUNBQXlDLENBQUMsQ0FBQztRQUVyRSxJQUFJLENBQUMsWUFBWSxDQUFRLFdBQVcsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFN0Q7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztXQXFCRztRQUVILElBQUksSUFBSSxHQUFVLENBQUMsRUFBQyxJQUFJLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUMsRUFBRSxFQUFDLElBQUksRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBQyxFQUFFLEVBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFDO1lBQ3ZHLEVBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFDLEVBQUUsRUFBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUMsRUFBRSxFQUFDLElBQUksRUFBRSxZQUFZLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBQyxFQUFFLEVBQUMsSUFBSSxFQUFFLGNBQWMsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFDO1lBQzNILEVBQUMsSUFBSSxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFDLENBQUMsQ0FBQztRQUVoQyxLQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFDO1lBQ3hCLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBQyxJQUFJLEVBQUUsSUFBSSxHQUFHLENBQUMsRUFBRSxJQUFJLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBQyxDQUFDLENBQUM7U0FDOUM7UUFFRCxLQUFJLElBQUksR0FBRyxJQUFJLElBQUksRUFBQztZQUNoQixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxHQUFFLEtBQUssQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQSxDQUFBLENBQUMsRUFDL0YsSUFBSSxFQUFFLFVBQVUsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLHdCQUF3QixHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1NBQ3hFO1FBR0QsSUFBSSxDQUFDLDhCQUE4QixFQUFFLENBQUM7UUFDdEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyw4QkFBOEIsRUFBRSxDQUFDO1FBRWxELElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxHQUFHLElBQUksYUFBYSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUN2RSxDQUFDO0NBRUoiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNb2R1bGUsIE1vZHVsZVN0b3JlIH0gZnJvbSBcIi4uLy4uL2NvbXBpbGVyL3BhcnNlci9Nb2R1bGUuanNcIjtcclxuaW1wb3J0IHsgS2xhc3MsIFZpc2liaWxpdHkgfSBmcm9tIFwiLi4vLi4vY29tcGlsZXIvdHlwZXMvQ2xhc3MuanNcIjtcclxuaW1wb3J0IHsgYm9vbGVhblByaW1pdGl2ZVR5cGUsIGRvdWJsZVByaW1pdGl2ZVR5cGUsIGludFByaW1pdGl2ZVR5cGUsIHN0cmluZ1ByaW1pdGl2ZVR5cGUgfSBmcm9tIFwiLi4vLi4vY29tcGlsZXIvdHlwZXMvUHJpbWl0aXZlVHlwZXMuanNcIjtcclxuaW1wb3J0IHsgQXR0cmlidXRlLCBNZXRob2QsIFBhcmFtZXRlcmxpc3QgfSBmcm9tIFwiLi4vLi4vY29tcGlsZXIvdHlwZXMvVHlwZXMuanNcIjtcclxuaW1wb3J0IHsgUnVudGltZU9iamVjdCB9IGZyb20gXCIuLi8uLi9pbnRlcnByZXRlci9SdW50aW1lT2JqZWN0LmpzXCI7XHJcbmltcG9ydCB7IENvbG9ySGVscGVyIH0gZnJvbSBcIi4vQ29sb3JIZWxwZXIuanNcIjtcclxuXHJcbnR5cGUgS2V5ID0ge25hbWU6IHN0cmluZywgY29kZTogbnVtYmVyfTtcclxuXHJcbmV4cG9ydCBjbGFzcyBLZXlFdmVudCBleHRlbmRzIEtsYXNzIHtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihtb2R1bGU6IE1vZHVsZSwgbW9kdWxlU3RvcmU6IE1vZHVsZVN0b3JlKSB7XHJcblxyXG4gICAgICAgIHN1cGVyKFwiS2V5RXZlbnRcIiwgbW9kdWxlLCBcIk5hY2hiaWxkdW5nIHZvbiBqYXZhLmF3dC5ldmVudC5LZXlFdmVudFwiKTtcclxuXHJcbiAgICAgICAgdGhpcy5zZXRCYXNlQ2xhc3MoPEtsYXNzPm1vZHVsZVN0b3JlLmdldFR5cGUoXCJPYmplY3RcIikudHlwZSk7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqICBcIkVudGVyXCI6IDEzLFxyXG4gICAgICAgIFwiQXJyb3dMZWZ0XCI6IDM3LFxyXG4gICAgICAgIFwiQXJyb3dSaWdodFwiOiAzOSxcclxuICAgICAgICBcIkFycm93VXBcIjogMzgsXHJcbiAgICAgICAgXCJBcnJvd0Rvd25cIjogNDAsXHJcbiAgICAgICAgXCJGMVwiOiAxMTIsXHJcbiAgICAgICAgXCJGMlwiOiAxMTMsXHJcbiAgICAgICAgXCJGM1wiOiAxMTQsXHJcbiAgICAgICAgXCJGNFwiOiAxMTUsXHJcbiAgICAgICAgXCJGNVwiOiAxMTYsXHJcbiAgICAgICAgXCJGNlwiOiAxMTcsXHJcbiAgICAgICAgXCJGN1wiOiAxMTgsXHJcbiAgICAgICAgXCJGOFwiOiAxMTksXHJcbiAgICAgICAgXCJGOVwiOiAxMjAsXHJcbiAgICAgICAgXCJGMTBcIjogMTIxLFxyXG4gICAgICAgIFwiRjExXCI6IDEyMixcclxuICAgICAgICBcIkYxMlwiOiAxMjMsXHJcbiAgICAgICAgXCJQYWdlVXBcIjogMzMsXHJcbiAgICAgICAgXCJQYWdlRG93blwiOiAzNCxcclxuICAgICAgICBcIkluc2VydFwiOiAxNTVcclxuICAgICAgICAgKi9cclxuXHJcbiAgICAgICAgbGV0IGtleXM6IEtleVtdID0gW3tuYW1lOiBcIlZLX0VOVEVSXCIsIGNvZGU6IDEzfSwge25hbWU6IFwiVktfTEVGVFwiLCBjb2RlOiAzN30sIHtuYW1lOiBcIlZLX1VQXCIsIGNvZGU6IDM4fSwgXHJcbiAgICAgICAge25hbWU6IFwiVktfUklHSFRcIiwgY29kZTogMzl9LCB7bmFtZTogXCJWS19ET1dOXCIsIGNvZGU6IDQwfSwge25hbWU6IFwiVktfUEFHRV9VUFwiLCBjb2RlOiAzM30sIHtuYW1lOiBcIlZLX1BBR0VfRE9XTlwiLCBjb2RlOiAzNH0sXHJcbiAgICAgICAge25hbWU6IFwiVktfSU5TRVJUXCIsIGNvZGU6IDE1NX1dO1xyXG5cclxuICAgICAgICBmb3IobGV0IGkgPSAxOyBpIDw9IDEyOyBpKyspe1xyXG4gICAgICAgICAgICBrZXlzLnB1c2goe25hbWU6IFwiVktcIiArIGksIGNvZGU6IDExMSArIGl9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgZm9yKGxldCBrZXkgb2Yga2V5cyl7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkQXR0cmlidXRlKG5ldyBBdHRyaWJ1dGUoa2V5Lm5hbWUsIGludFByaW1pdGl2ZVR5cGUsICh2YWx1ZSkgPT4ge3ZhbHVlLnZhbHVlID0ga2V5LmNvZGV9LCBcclxuICAgICAgICAgICAgdHJ1ZSwgVmlzaWJpbGl0eS5wdWJsaWMsIHRydWUsIFwiS2V5Q29kZSBmw7xyIGRpZSBUYXN0ZSBcIiArIGtleS5uYW1lKSk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgdGhpcy5zZXR1cEF0dHJpYnV0ZUluZGljZXNSZWN1cnNpdmUoKTtcclxuICAgICAgICB0aGlzLnN0YXRpY0NsYXNzLnNldHVwQXR0cmlidXRlSW5kaWNlc1JlY3Vyc2l2ZSgpO1xyXG5cclxuICAgICAgICB0aGlzLnN0YXRpY0NsYXNzLmNsYXNzT2JqZWN0ID0gbmV3IFJ1bnRpbWVPYmplY3QodGhpcy5zdGF0aWNDbGFzcyk7XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG4iXX0=