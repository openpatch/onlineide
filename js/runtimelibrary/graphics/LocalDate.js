import { Klass } from "../../compiler/types/Class.js";
import { Method, Parameterlist } from "../../compiler/types/Types.js";
import { intPrimitiveType } from "../../compiler/types/PrimitiveTypes.js";
import { RuntimeObject } from "../../interpreter/RuntimeObject.js";
export class LocalDateTimeClass extends Klass {
    constructor(module) {
        super("LocalDateTime", module, "Ein LocalDate-Objekt speichert einen Zeitpunkt (Datum und Uhrzeit).");
        this.setBaseClass(module.typeStore.getType("Object"));
        // this.staticClass.classObject = new RuntimeObject(this.staticClass);
        // this.staticClass.classObject.initializeAttributeValues();
        this.addMethod(new Method("now", new Parameterlist([]), this, (parameters) => {
            let o = new RuntimeObject(this);
            var today = new Date();
            let intrinsicData = {
                year: today.getFullYear(),
                month: today.getMonth() + 1,
                day: today.getDate(),
                hour: today.getHours(),
                minute: today.getMinutes(),
                second: today.getSeconds()
            };
            o.intrinsicData = intrinsicData;
            return o;
        }, false, true, 'Holt den aktuellen Zeitpunkt von der Systemuhr des Rechners und gibt ihn als LocalDateTime-Objekt zurück.', false));
        this.addMethod(new Method("getYear", new Parameterlist([]), intPrimitiveType, (parameters) => {
            let o = parameters[0].value;
            return (o.intrinsicData).year;
        }, false, false, 'Gibt das Jahr zurück.', false));
        this.addMethod(new Method("getMonthValue", new Parameterlist([]), intPrimitiveType, (parameters) => {
            let o = parameters[0].value;
            return (o.intrinsicData).month;
        }, false, false, 'Gibt den Monat als Zahl zurück (Januar == 1, Februar == 2, ..., Dezember == 12).', false));
        this.addMethod(new Method("getDayOfMonth", new Parameterlist([]), intPrimitiveType, (parameters) => {
            let o = parameters[0].value;
            return (o.intrinsicData).day;
        }, false, false, 'Gibt den Tag innerhalb des Monats zurück (Zahl von 1 bis 31).', false));
        this.addMethod(new Method("getHour", new Parameterlist([]), intPrimitiveType, (parameters) => {
            let o = parameters[0].value;
            return (o.intrinsicData).hour;
        }, false, false, 'Gibt die Stunde innerhalb des Tages zurück.', false));
        this.addMethod(new Method("getMinute", new Parameterlist([]), intPrimitiveType, (parameters) => {
            let o = parameters[0].value;
            return (o.intrinsicData).minute;
        }, false, false, 'Gibt die Minute zurück.', false));
        this.addMethod(new Method("getSecond", new Parameterlist([]), intPrimitiveType, (parameters) => {
            let o = parameters[0].value;
            return (o.intrinsicData).second;
        }, false, false, 'Gibt die Sekunde zurück.', false));
    }
}
//# sourceMappingURL=data:application/json;base64,