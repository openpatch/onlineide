import { Klass } from "../../compiler/types/Class.js";
import { doublePrimitiveType, intPrimitiveType, booleanPrimitiveType } from "../../compiler/types/PrimitiveTypes.js";
import { Method, Parameterlist } from "../../compiler/types/Types.js";
import { RuntimeObject } from "../../interpreter/RuntimeObject.js";
import { FilledShapeHelper } from "./FilledShape.js";
import { ArrayType } from "../../compiler/types/Array.js";
import { convexhull } from "../../tools/ConvexHull.js";
import { GroupHelper } from "./Group.js";
export class PolygonClass extends Klass {
    constructor(module) {
        super("Polygon", module, "Wahlweise geschlossenes Polygon (mit Füllung und Rand) oder offener Streckenzug");
        this.setBaseClass(module.typeStore.getType("FilledShape"));
        let shapeClass = module.typeStore.getType("Shape");
        // this.addAttribute(new Attribute("PI", doublePrimitiveType, (object) => { return Math.PI }, true, Visibility.public, true, "Die Kreiszahl Pi (3.1415...)"));
        this.addMethod(new Method("Polygon", new Parameterlist([
            { identifier: "closeAndFill", type: booleanPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
            { identifier: "points", type: new ArrayType(doublePrimitiveType), declaration: null, usagePositions: null, isFinal: true },
        ]), null, (parameters) => {
            let o = parameters[0].value;
            let closeAndFill = parameters[1].value;
            let points = parameters[2].value;
            let pointsNumber = [];
            points.forEach(v => pointsNumber.push(v.value));
            let ph = new PolygonHelper(pointsNumber, closeAndFill, module.main.getInterpreter(), o);
            o.intrinsicData["Actor"] = ph;
        }, false, false, 'Instanziert ein neues Polygon. Die Punkte werden als Array von double-Werten der Form {x1, y1, x2, y2, ...} übergeben.', true));
        this.addMethod(new Method("Polygon", new Parameterlist([
            { identifier: "closeAndFill", type: booleanPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
            { identifier: "points", type: new ArrayType(doublePrimitiveType), declaration: null, usagePositions: null, isFinal: true, isEllipsis: true },
        ]), null, (parameters) => {
            let o = parameters[0].value;
            let closeAndFill = parameters[1].value;
            let points = parameters[2].value;
            let pointsNumber = [];
            points.forEach(v => pointsNumber.push(v.value));
            let ph = new PolygonHelper(pointsNumber, closeAndFill, module.main.getInterpreter(), o);
            o.intrinsicData["Actor"] = ph;
        }, false, false, 'Instanziert ein neues Polygon. Die Punkte werden als double-Werte der Form x1, y1, x2, y2, ... übergeben.', true));
        this.addMethod(new Method("Polygon", new Parameterlist([
            { identifier: "closeAndFill", type: booleanPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
        ]), null, (parameters) => {
            let o = parameters[0].value;
            let closeAndFill = parameters[1].value;
            let pointsNumber = [];
            let ph = new PolygonHelper(pointsNumber, closeAndFill, module.main.getInterpreter(), o);
            o.intrinsicData["Actor"] = ph;
        }, false, false, 'Instanziert ein neues Polygon ohne Punkte.', true));
        this.addMethod(new Method("Polygon", new Parameterlist([
            { identifier: "shape", type: shapeClass, declaration: null, usagePositions: null, isFinal: true },
        ]), null, (parameters) => {
            let o = parameters[0].value;
            let shape = parameters[1].value;
            if (shape == null) {
                module.main.getInterpreter().throwException("Die übergebene Figur ist null.");
                return;
            }
            let shapeHelper = shape.intrinsicData["Actor"];
            shapeHelper.displayObject.getBounds(); // seems to work magic in updating transforms of children...
            let points = [];
            points = this.extractPoints(shapeHelper, points);
            points = convexhull.makeHull(points);
            let pointsNumber = [];
            for (let p of points) {
                pointsNumber.push(p.x);
                pointsNumber.push(p.y);
            }
            if (pointsNumber.length > 0) {
                pointsNumber = pointsNumber.concat(pointsNumber.slice(0, 2));
            }
            let ph = new PolygonHelper(pointsNumber, false, module.main.getInterpreter(), o, true);
            o.intrinsicData["Actor"] = ph;
        }, false, false, 'Instanziert ein neues Polygon. Seine Punkte sind die Punkte des Hitpolygons der übergebenen Figur.', true));
        this.addMethod(new Method("addPoint", new Parameterlist([
            { identifier: "x", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },
            { identifier: "y", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },
        ]), null, (parameters) => {
            let o = parameters[0].value;
            let x = parameters[1].value;
            let y = parameters[2].value;
            let sh = o.intrinsicData["Actor"];
            if (sh.testdestroyed("addPoint"))
                return;
            sh.addPoint(x, y);
        }, false, false, 'Fügt dem Polygon einen Punkt hinzu."', false));
        this.addMethod(new Method("setPoints", new Parameterlist([
            { identifier: "points", type: new ArrayType(doublePrimitiveType), declaration: null, usagePositions: null, isFinal: true },
        ]), null, (parameters) => {
            let o = parameters[0].value;
            let points = parameters[1].value;
            let sh = o.intrinsicData["Actor"];
            if (sh.testdestroyed("addPoints"))
                return;
            let p;
            sh.setPoints(points.map(value => value.value));
        }, false, false, 'Löscht alle Punkte des Polygons und setzt komplett neue. Diese werden in einem double[] übergeben, das abwechselnd die x- und y-Koordinaten enthält."', false));
        this.addMethod(new Method("addPoints", new Parameterlist([
            { identifier: "points", type: new ArrayType(doublePrimitiveType), declaration: null, usagePositions: null, isFinal: true },
        ]), null, (parameters) => {
            let o = parameters[0].value;
            let points = parameters[1].value;
            let sh = o.intrinsicData["Actor"];
            if (sh.testdestroyed("addPoints"))
                return;
            let p;
            for (let i = 0; i < points.length - 1; i += 2) {
                sh.addPoint(points[i].value, points[i + 1].value, i >= points.length - 2);
            }
        }, false, false, 'Fügt dem Polygon mehrere Punkte hinzu. Diese werden in einem double[] übergeben, das abwechselnd die x- und y-Koordinaten enthält."', false));
        this.addMethod(new Method("insertPoint", new Parameterlist([
            { identifier: "x", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },
            { identifier: "y", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },
            { identifier: "index", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
        ]), null, (parameters) => {
            let o = parameters[0].value;
            let x = parameters[1].value;
            let y = parameters[2].value;
            let index = parameters[3].value;
            let sh = o.intrinsicData["Actor"];
            if (sh.testdestroyed("insertPoint"))
                return;
            sh.insertPoint(x, y, index);
        }, false, false, 'Fügt dem Polygon einen Punkt als "index-ter" Punkt hinzu. index == 0 => ganz am Anfang; index == Anzahl der bisherigen Punkte => ganz am Ende;"', false));
        this.addMethod(new Method("movePointTo", new Parameterlist([
            { identifier: "x", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },
            { identifier: "y", type: doublePrimitiveType, declaration: null, usagePositions: null, isFinal: true },
            { identifier: "index", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true },
        ]), null, (parameters) => {
            let o = parameters[0].value;
            let x = parameters[1].value;
            let y = parameters[2].value;
            let index = parameters[3].value;
            let sh = o.intrinsicData["Actor"];
            if (sh.testdestroyed("insertPoint"))
                return;
            sh.movePointTo(x, y, index);
        }, false, false, 'schiebt den index-ten Punkt nach (x, y). index == 0 => erster Punkt, index == 1 => zweiter Punkt usw.', false));
        this.addMethod(new Method("close", new Parameterlist([]), null, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            if (sh.testdestroyed("close"))
                return;
            sh.isClosed = true;
            sh.render();
        }, false, false, 'Schließt das Polygon. Diese Methode hat bei gefüllten Polygonen keinen Effekt.', false));
        this.addMethod(new Method("open", new Parameterlist([]), null, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            if (sh.testdestroyed("open"))
                return;
            sh.isClosed = false;
            sh.render();
        }, false, false, 'Öffnet das Polygon. Diese Methode hat bei gefüllten Polygonen keinen Effekt.', false));
        this.addMethod(new Method("copy", new Parameterlist([]), this, (parameters) => {
            let o = parameters[0].value;
            let sh = o.intrinsicData["Actor"];
            if (sh.testdestroyed("copy"))
                return;
            return sh.getCopy(o.class);
        }, false, false, 'Erstellt eine Kopie des Polygon-Objekts und git sie zurück.', false));
    }
    extractPoints(shapeHelper, points) {
        if (shapeHelper instanceof GroupHelper) {
            let points1 = [];
            for (let sh of shapeHelper.shapes) {
                points1 = this.extractPoints(sh.intrinsicData["Actor"], points1);
            }
            return points.concat(points1);
        }
        else {
            if (shapeHelper.hitPolygonDirty)
                shapeHelper.transformHitPolygon();
            return points.concat(shapeHelper.hitPolygonTransformed.map(function (punkt) { return { x: punkt.x, y: punkt.y }; }));
        }
    }
}
export class PolygonHelper extends FilledShapeHelper {
    constructor(points, closeAndFill, interpreter, runtimeObject, isClosed = false) {
        super(interpreter, runtimeObject);
        this.closeAndFill = closeAndFill;
        this.isClosed = false;
        this.isClosed = isClosed;
        let xSum = 0;
        let ySum = 0;
        this.hitPolygonInitial = [];
        for (let i = 0; i < points.length;) {
            let x = points[i++];
            let y = points[i++];
            xSum += x;
            ySum += y;
            this.hitPolygonInitial.push({ x: x, y: y });
        }
        if (points.length > 1) {
            this.centerXInitial = xSum / this.hitPolygonInitial.length;
            this.centerYInitial = ySum / this.hitPolygonInitial.length;
        }
        if (!closeAndFill) {
            this.borderColor = 0x0000ff;
        }
        this.render();
        this.addToDefaultGroupAndSetDefaultVisibility();
    }
    getCopy(klass) {
        let ro = new RuntimeObject(klass);
        let rh = new PolygonHelper([], this.closeAndFill, this.worldHelper.interpreter, ro);
        ro.intrinsicData["Actor"] = rh;
        rh.copyFrom(this);
        rh.render();
        return ro;
    }
    render() {
        let g = this.displayObject;
        if (this.displayObject == null) {
            g = new PIXI.Graphics();
            this.displayObject = g;
            this.worldHelper.stage.addChild(g);
        }
        else {
            g.clear();
        }
        if (this.fillColor != null && this.closeAndFill) {
            g.beginFill(this.fillColor, this.fillAlpha);
        }
        if (this.borderColor != null) {
            g.lineStyle(this.borderWidth, this.borderColor, this.borderAlpha, 0.5);
        }
        if (this.hitPolygonInitial.length > 0) {
            g.moveTo(this.hitPolygonInitial[0].x, this.hitPolygonInitial[0].y);
            for (let i = 1; i < this.hitPolygonInitial.length; i++) {
                g.lineTo(this.hitPolygonInitial[i].x, this.hitPolygonInitial[i].y);
            }
        }
        if (this.closeAndFill || this.isClosed) {
            g.closePath();
        }
        if (this.fillColor != null && this.closeAndFill) {
            g.endFill();
        }
    }
    ;
    addPoint(x, y, render = true) {
        let p = new PIXI.Point(x, y);
        this.displayObject.transform.worldTransform.applyInverse(p, p);
        this.hitPolygonInitial.push({ x: p.x, y: p.y });
        this.hitPolygonDirty = true;
        if (render)
            this.render();
    }
    insertPoint(x, y, index) {
        if (index < 0)
            index = 0;
        if (index > this.hitPolygonInitial.length)
            index = this.hitPolygonInitial.length;
        let p = new PIXI.Point(x, y);
        this.displayObject.transform.worldTransform.applyInverse(p, p);
        this.hitPolygonInitial.splice(index, 0, { x: p.x, y: p.y });
        this.hitPolygonDirty = true;
        this.render();
    }
    movePointTo(x, y, index) {
        if (index < 0)
            index = 0;
        if (index > this.hitPolygonInitial.length)
            index = this.hitPolygonInitial.length;
        if (this.hitPolygonInitial.length == 0)
            return;
        let p = new PIXI.Point(x, y);
        this.displayObject.transform.worldTransform.applyInverse(p, p);
        this.hitPolygonInitial[index].x = p.x;
        this.hitPolygonInitial[index].y = p.y;
        this.hitPolygonDirty = true;
        this.render();
    }
    setPoint(x, y, index) {
        if (index == 0 || index == 1) {
            this.hitPolygonInitial[index] = { x: x, y: y };
            this.hitPolygonDirty = true;
            this.render();
        }
    }
    setPoints(coordinates) {
        this.hitPolygonInitial = [];
        for (let i = 0; i < coordinates.length - 1; i += 2) {
            this.hitPolygonInitial.push({ x: coordinates[i], y: coordinates[i + 1] });
        }
        this.hitPolygonDirty = true;
        this.render();
    }
    setAllPointsUntransformed(points) {
        this.hitPolygonInitial = [];
        for (let i = 0; i < points.length; i += 2) {
            this.hitPolygonInitial.push({ x: points[i], y: points[i + 1] });
        }
        this.hitPolygonDirty = true;
        this.render();
    }
}
//# sourceMappingURL=data:application/json;base64,