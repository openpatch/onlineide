import { ColorHelper } from "./ColorHelper.js";
export class FilledShapeDefaults {
    static initDefaultValues() {
        FilledShapeDefaults.defaultFillColor = 0x8080ff;
        FilledShapeDefaults.defaultFillAlpha = 1.0;
        FilledShapeDefaults.defaultBorderColor = null;
        FilledShapeDefaults.defaultBorderAlpha = 1.0;
        FilledShapeDefaults.defaultBorderWidth = 10;
        FilledShapeDefaults.defaultVisibility = true;
    }
    static setDefaultVisibility(visibility) {
        FilledShapeDefaults.defaultVisibility = visibility;
    }
    static setDefaultBorder(width, color, alpha) {
        FilledShapeDefaults.defaultBorderWidth = width;
        if (typeof color == "string") {
            let c = ColorHelper.parseColorToOpenGL(color);
            FilledShapeDefaults.defaultBorderColor = c.color;
            FilledShapeDefaults.defaultBorderAlpha = alpha == null ? c.alpha : alpha;
        }
        else {
            FilledShapeDefaults.defaultBorderColor = color;
            if (alpha != null)
                FilledShapeDefaults.defaultBorderAlpha = alpha;
        }
    }
    static setDefaultFillColor(color, alpha) {
        if (typeof color == "string") {
            let c = ColorHelper.parseColorToOpenGL(color);
            FilledShapeDefaults.defaultFillColor = c.color;
            FilledShapeDefaults.defaultFillAlpha = alpha == null ? c.alpha : alpha;
        }
        else {
            FilledShapeDefaults.defaultFillColor = color;
            if (alpha != null)
                FilledShapeDefaults.defaultFillAlpha = alpha;
        }
    }
}
FilledShapeDefaults.defaultFillColor = 0x8080ff;
FilledShapeDefaults.defaultFillAlpha = 1.0;
FilledShapeDefaults.defaultBorderColor = null;
FilledShapeDefaults.defaultBorderAlpha = 1.0;
FilledShapeDefaults.defaultBorderWidth = 10;
FilledShapeDefaults.defaultVisibility = true;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRmlsbGVkU2hhcGVEZWZhdWx0cy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jbGllbnQvcnVudGltZWxpYnJhcnkvZ3JhcGhpY3MvRmlsbGVkU2hhcGVEZWZhdWx0cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFL0MsTUFBTSxPQUFPLG1CQUFtQjtJQVU1QixNQUFNLENBQUMsaUJBQWlCO1FBQ3BCLG1CQUFtQixDQUFDLGdCQUFnQixHQUFHLFFBQVEsQ0FBQztRQUNoRCxtQkFBbUIsQ0FBQyxnQkFBZ0IsR0FBRyxHQUFHLENBQUM7UUFFM0MsbUJBQW1CLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDO1FBQzlDLG1CQUFtQixDQUFDLGtCQUFrQixHQUFHLEdBQUcsQ0FBQztRQUM3QyxtQkFBbUIsQ0FBQyxrQkFBa0IsR0FBRyxFQUFFLENBQUM7UUFFNUMsbUJBQW1CLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDO0lBQ2pELENBQUM7SUFFRCxNQUFNLENBQUMsb0JBQW9CLENBQUMsVUFBbUI7UUFDM0MsbUJBQW1CLENBQUMsaUJBQWlCLEdBQUcsVUFBVSxDQUFDO0lBQ3ZELENBQUM7SUFFRCxNQUFNLENBQUMsZ0JBQWdCLENBQUMsS0FBYSxFQUFFLEtBQXNCLEVBQUUsS0FBYztRQUV6RSxtQkFBbUIsQ0FBQyxrQkFBa0IsR0FBRyxLQUFLLENBQUM7UUFFL0MsSUFBSSxPQUFPLEtBQUssSUFBSSxRQUFRLEVBQUU7WUFDMUIsSUFBSSxDQUFDLEdBQUcsV0FBVyxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzlDLG1CQUFtQixDQUFDLGtCQUFrQixHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUM7WUFDakQsbUJBQW1CLENBQUMsa0JBQWtCLEdBQUcsS0FBSyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1NBQzVFO2FBQU07WUFDSCxtQkFBbUIsQ0FBQyxrQkFBa0IsR0FBRyxLQUFLLENBQUM7WUFDL0MsSUFBSSxLQUFLLElBQUksSUFBSTtnQkFBRSxtQkFBbUIsQ0FBQyxrQkFBa0IsR0FBRyxLQUFLLENBQUM7U0FDckU7SUFFTCxDQUFDO0lBRUQsTUFBTSxDQUFDLG1CQUFtQixDQUFDLEtBQXNCLEVBQUUsS0FBYztRQUU3RCxJQUFJLE9BQU8sS0FBSyxJQUFJLFFBQVEsRUFBRTtZQUMxQixJQUFJLENBQUMsR0FBRyxXQUFXLENBQUMsa0JBQWtCLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDOUMsbUJBQW1CLENBQUMsZ0JBQWdCLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQztZQUMvQyxtQkFBbUIsQ0FBQyxnQkFBZ0IsR0FBRyxLQUFLLElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7U0FDMUU7YUFBTTtZQUNILG1CQUFtQixDQUFDLGdCQUFnQixHQUFHLEtBQUssQ0FBQztZQUM3QyxJQUFJLEtBQUssSUFBSSxJQUFJO2dCQUFFLG1CQUFtQixDQUFDLGdCQUFnQixHQUFHLEtBQUssQ0FBQztTQUNuRTtJQUVMLENBQUM7O0FBbERNLG9DQUFnQixHQUFXLFFBQVEsQ0FBQztBQUNwQyxvQ0FBZ0IsR0FBVyxHQUFHLENBQUM7QUFFL0Isc0NBQWtCLEdBQVcsSUFBSSxDQUFDO0FBQ2xDLHNDQUFrQixHQUFXLEdBQUcsQ0FBQztBQUNqQyxzQ0FBa0IsR0FBVyxFQUFFLENBQUM7QUFFaEMscUNBQWlCLEdBQVksSUFBSSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29sb3JIZWxwZXIgfSBmcm9tIFwiLi9Db2xvckhlbHBlci5qc1wiO1xuXG5leHBvcnQgY2xhc3MgRmlsbGVkU2hhcGVEZWZhdWx0cyB7XG4gICAgc3RhdGljIGRlZmF1bHRGaWxsQ29sb3I6IG51bWJlciA9IDB4ODA4MGZmO1xuICAgIHN0YXRpYyBkZWZhdWx0RmlsbEFscGhhOiBudW1iZXIgPSAxLjA7XG5cbiAgICBzdGF0aWMgZGVmYXVsdEJvcmRlckNvbG9yOiBudW1iZXIgPSBudWxsO1xuICAgIHN0YXRpYyBkZWZhdWx0Qm9yZGVyQWxwaGE6IG51bWJlciA9IDEuMDtcbiAgICBzdGF0aWMgZGVmYXVsdEJvcmRlcldpZHRoOiBudW1iZXIgPSAxMDtcblxuICAgIHN0YXRpYyBkZWZhdWx0VmlzaWJpbGl0eTogYm9vbGVhbiA9IHRydWU7XG5cbiAgICBzdGF0aWMgaW5pdERlZmF1bHRWYWx1ZXMoKXtcbiAgICAgICAgRmlsbGVkU2hhcGVEZWZhdWx0cy5kZWZhdWx0RmlsbENvbG9yID0gMHg4MDgwZmY7XG4gICAgICAgIEZpbGxlZFNoYXBlRGVmYXVsdHMuZGVmYXVsdEZpbGxBbHBoYSA9IDEuMDtcbiAgICBcbiAgICAgICAgRmlsbGVkU2hhcGVEZWZhdWx0cy5kZWZhdWx0Qm9yZGVyQ29sb3IgPSBudWxsO1xuICAgICAgICBGaWxsZWRTaGFwZURlZmF1bHRzLmRlZmF1bHRCb3JkZXJBbHBoYSA9IDEuMDtcbiAgICAgICAgRmlsbGVkU2hhcGVEZWZhdWx0cy5kZWZhdWx0Qm9yZGVyV2lkdGggPSAxMDtcblxuICAgICAgICBGaWxsZWRTaGFwZURlZmF1bHRzLmRlZmF1bHRWaXNpYmlsaXR5ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBzdGF0aWMgc2V0RGVmYXVsdFZpc2liaWxpdHkodmlzaWJpbGl0eTogYm9vbGVhbikge1xuICAgICAgICBGaWxsZWRTaGFwZURlZmF1bHRzLmRlZmF1bHRWaXNpYmlsaXR5ID0gdmlzaWJpbGl0eTtcbiAgICB9XG5cbiAgICBzdGF0aWMgc2V0RGVmYXVsdEJvcmRlcih3aWR0aDogbnVtYmVyLCBjb2xvcjogc3RyaW5nIHwgbnVtYmVyLCBhbHBoYT86IG51bWJlcikge1xuXG4gICAgICAgIEZpbGxlZFNoYXBlRGVmYXVsdHMuZGVmYXVsdEJvcmRlcldpZHRoID0gd2lkdGg7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb2xvciA9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBsZXQgYyA9IENvbG9ySGVscGVyLnBhcnNlQ29sb3JUb09wZW5HTChjb2xvcik7XG4gICAgICAgICAgICBGaWxsZWRTaGFwZURlZmF1bHRzLmRlZmF1bHRCb3JkZXJDb2xvciA9IGMuY29sb3I7XG4gICAgICAgICAgICBGaWxsZWRTaGFwZURlZmF1bHRzLmRlZmF1bHRCb3JkZXJBbHBoYSA9IGFscGhhID09IG51bGwgPyBjLmFscGhhIDogYWxwaGE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBGaWxsZWRTaGFwZURlZmF1bHRzLmRlZmF1bHRCb3JkZXJDb2xvciA9IGNvbG9yO1xuICAgICAgICAgICAgaWYgKGFscGhhICE9IG51bGwpIEZpbGxlZFNoYXBlRGVmYXVsdHMuZGVmYXVsdEJvcmRlckFscGhhID0gYWxwaGE7XG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHN0YXRpYyBzZXREZWZhdWx0RmlsbENvbG9yKGNvbG9yOiBzdHJpbmcgfCBudW1iZXIsIGFscGhhPzogbnVtYmVyKSB7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjb2xvciA9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBsZXQgYyA9IENvbG9ySGVscGVyLnBhcnNlQ29sb3JUb09wZW5HTChjb2xvcik7XG4gICAgICAgICAgICBGaWxsZWRTaGFwZURlZmF1bHRzLmRlZmF1bHRGaWxsQ29sb3IgPSBjLmNvbG9yO1xuICAgICAgICAgICAgRmlsbGVkU2hhcGVEZWZhdWx0cy5kZWZhdWx0RmlsbEFscGhhID0gYWxwaGEgPT0gbnVsbCA/IGMuYWxwaGEgOiBhbHBoYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIEZpbGxlZFNoYXBlRGVmYXVsdHMuZGVmYXVsdEZpbGxDb2xvciA9IGNvbG9yO1xuICAgICAgICAgICAgaWYgKGFscGhhICE9IG51bGwpIEZpbGxlZFNoYXBlRGVmYXVsdHMuZGVmYXVsdEZpbGxBbHBoYSA9IGFscGhhO1xuICAgICAgICB9XG5cbiAgICB9XG5cbn0iXX0=