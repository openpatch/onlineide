import { Klass } from "../../compiler/types/Class.js";
import { booleanPrimitiveType } from "../../compiler/types/PrimitiveTypes.js";
import { Method, Parameterlist } from "../../compiler/types/Types.js";
import { RuntimeObject } from "../../interpreter/RuntimeObject.js";
export class SetIteratorImplClass extends Klass {
    static getIterator(MapHelper, interpreter, module, kind) {
        let klass = module.typeStore.getType("SetIteratorImpl");
        let rt = new RuntimeObject(klass);
        rt.intrinsicData["SetIteratorHelper"] = new SetIteratorHelper(MapHelper, interpreter, kind);
        return {
            value: rt,
            type: klass
        };
    }
    constructor(module) {
        super("SetIteratorImpl", module);
        let objectType = module.typeStore.getType("Object");
        this.setBaseClass(objectType);
        let typeE = objectType.clone();
        typeE.identifier = "E";
        typeE.isTypeVariable = true;
        let tvE = {
            identifier: "E",
            scopeFrom: { line: 1, column: 1, length: 1 },
            scopeTo: { line: 1, column: 1, length: 1 },
            type: typeE
        };
        this.typeVariables.push(tvE);
        let iteratorInterface = module.typeStore.getType("Iterator").clone();
        iteratorInterface.typeVariables = [tvE];
        this.implements.push(iteratorInterface);
        this.addMethod(new Method("hasNext", new Parameterlist([]), booleanPrimitiveType, (parameters) => {
            let o = parameters[0].value;
            let ah = o.intrinsicData["SetIteratorHelper"];
            return ah.hasNext();
        }, false, false, "Gibt genau dann true zurück, wenn sich noch mindestens ein weiteres Element in der Collection befindet."));
        this.addMethod(new Method("next", new Parameterlist([]), typeE, (parameters) => {
            let o = parameters[0].value;
            let ah = o.intrinsicData["SetIteratorHelper"];
            return ah.next();
        }, false, false, "Gibt das nächste Element der Collection zurück."));
        this.addMethod(new Method("remove", new Parameterlist([]), null, (parameters) => {
            let o = parameters[0].value;
            let ah = o.intrinsicData["SetIteratorHelper"];
            return ah.remove();
        }, false, false, "Löscht das letzte durch next zurückgegebene Objekt. Diese Methode beeinflusst nicht, welches Element als nächstes durch next zurückgegeben wird."));
    }
}
class SetIteratorHelper {
    constructor(MapHelper, interpreter, kind) {
        this.MapHelper = MapHelper;
        this.interpreter = interpreter;
        this.kind = kind;
        switch (kind) {
            case "ascending":
                this.nextPos = 0;
                break;
            case "descending":
                this.nextPos = MapHelper.valueArray.length - 1;
                break;
        }
    }
    remove() {
        switch (this.kind) {
            case "ascending":
                if (this.nextPos == 0) {
                    this.interpreter.throwException("Die Methode remove() des Iterators wurde aufgerufen, obwohl noch nie next() aufgerufen wurde.");
                }
                else if (this.nextPos > this.MapHelper.valueArray.length - 1) {
                    this.interpreter.throwException("Die Methode remove() des Iterators wurde aufgerufen, obwohl das letzte Element schon beim vorherigen Aufruf zurückgegeben worden war.");
                }
                else {
                    this.MapHelper.removeObject(this.MapHelper.valueArray[this.nextPos - 1].value);
                    this.nextPos -= 1;
                }
                break;
            case "descending":
                if (this.nextPos == this.MapHelper.valueArray.length - 1) {
                    this.interpreter.throwException("Die Methode remove() des Iterators wurde aufgerufen, obwohl noch nie next() aufgerufen wurde.");
                }
                else if (this.nextPos < 0) {
                    this.interpreter.throwException("Die Methode remove() des Iterators wurde aufgerufen, obwohl das letzte Element schon beim vorherigen Aufruf zurückgegeben worden war.");
                }
                else {
                    this.MapHelper.removeObject(this.MapHelper.valueArray[this.nextPos + 1].value);
                    this.nextPos += 1;
                }
                break;
        }
    }
    next() {
        switch (this.kind) {
            case "ascending":
                if (this.nextPos > this.MapHelper.valueArray.length - 1) {
                    this.interpreter.throwException("Die Methode next() des Iterators wurde aufgerufen, obwohl das letzte Element schon beim vorherigen Aufruf zurückgegeben worden war.");
                    return null;
                }
                return this.MapHelper.valueArray[this.nextPos++].value;
            case "descending":
                if (this.nextPos < 0) {
                    this.interpreter.throwException("Die Methode next() des Iterators wurde aufgerufen, obwohl das letzte Element schon beim vorherigen Aufruf zurückgegeben worden war.");
                    return null;
                }
                return this.MapHelper.valueArray[this.nextPos--].value;
        }
    }
    hasNext() {
        switch (this.kind) {
            case "ascending":
                return this.nextPos < this.MapHelper.valueArray.length;
            case "descending":
                return this.nextPos >= 0;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2V0SXRlcmF0b3JJbXBsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2NsaWVudC9ydW50aW1lbGlicmFyeS9jb2xsZWN0aW9ucy9TZXRJdGVyYXRvckltcGwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFhLEtBQUssRUFBZ0IsTUFBTSwrQkFBK0IsQ0FBQztBQUMvRSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUM5RSxPQUFPLEVBQUUsTUFBTSxFQUFFLGFBQWEsRUFBUyxNQUFNLCtCQUErQixDQUFDO0FBRTdFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUtuRSxNQUFNLE9BQU8sb0JBQXFCLFNBQVEsS0FBSztJQUVwQyxNQUFNLENBQUMsV0FBVyxDQUFDLFNBQW9CLEVBQUUsV0FBd0IsRUFBRSxNQUFjLEVBQUUsSUFBa0I7UUFFeEcsSUFBSSxLQUFLLEdBQVUsTUFBTSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUMvRCxJQUFJLEVBQUUsR0FBa0IsSUFBSSxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDakQsRUFBRSxDQUFDLGFBQWEsQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLElBQUksaUJBQWlCLENBQUMsU0FBUyxFQUFFLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUU1RixPQUFPO1lBQ0gsS0FBSyxFQUFFLEVBQUU7WUFDVCxJQUFJLEVBQUUsS0FBSztTQUNkLENBQUE7SUFDTCxDQUFDO0lBRUQsWUFBWSxNQUFjO1FBRXRCLEtBQUssQ0FBQyxpQkFBaUIsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUVqQyxJQUFJLFVBQVUsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUVwRCxJQUFJLENBQUMsWUFBWSxDQUFRLFVBQVUsQ0FBQyxDQUFDO1FBRXJD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XCIuLi8uLi9jb21waWxlci9wYXJzZXIvTW9kdWxlLmpzXCI7XHJcbmltcG9ydCB7IEludGVyZmFjZSwgS2xhc3MsIFR5cGVWYXJpYWJsZSB9IGZyb20gXCIuLi8uLi9jb21waWxlci90eXBlcy9DbGFzcy5qc1wiO1xyXG5pbXBvcnQgeyBib29sZWFuUHJpbWl0aXZlVHlwZSB9IGZyb20gXCIuLi8uLi9jb21waWxlci90eXBlcy9QcmltaXRpdmVUeXBlcy5qc1wiO1xyXG5pbXBvcnQgeyBNZXRob2QsIFBhcmFtZXRlcmxpc3QsIFZhbHVlIH0gZnJvbSBcIi4uLy4uL2NvbXBpbGVyL3R5cGVzL1R5cGVzLmpzXCI7XHJcbmltcG9ydCB7IEludGVycHJldGVyIH0gZnJvbSBcIi4uLy4uL2ludGVycHJldGVyL0ludGVycHJldGVyLmpzXCI7XHJcbmltcG9ydCB7IFJ1bnRpbWVPYmplY3QgfSBmcm9tIFwiLi4vLi4vaW50ZXJwcmV0ZXIvUnVudGltZU9iamVjdC5qc1wiO1xyXG5pbXBvcnQgeyBTZXRIZWxwZXIgfSBmcm9tIFwiLi9TZXRIZWxwZXIuanNcIjtcclxuXHJcbmV4cG9ydCB0eXBlIEl0ZXJhdG9yS2luZCA9IFwiZGVzY2VuZGluZ1wiIHwgXCJhc2NlbmRpbmdcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBTZXRJdGVyYXRvckltcGxDbGFzcyBleHRlbmRzIEtsYXNzIHtcclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGdldEl0ZXJhdG9yKE1hcEhlbHBlcjogU2V0SGVscGVyLCBpbnRlcnByZXRlcjogSW50ZXJwcmV0ZXIsIG1vZHVsZTogTW9kdWxlLCBraW5kOiBJdGVyYXRvcktpbmQpOiBWYWx1ZSB7XHJcblxyXG4gICAgICAgIGxldCBrbGFzcyA9IDxLbGFzcz5tb2R1bGUudHlwZVN0b3JlLmdldFR5cGUoXCJTZXRJdGVyYXRvckltcGxcIik7XHJcbiAgICAgICAgbGV0IHJ0OiBSdW50aW1lT2JqZWN0ID0gbmV3IFJ1bnRpbWVPYmplY3Qoa2xhc3MpO1xyXG4gICAgICAgIHJ0LmludHJpbnNpY0RhdGFbXCJTZXRJdGVyYXRvckhlbHBlclwiXSA9IG5ldyBTZXRJdGVyYXRvckhlbHBlcihNYXBIZWxwZXIsIGludGVycHJldGVyLCBraW5kKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdmFsdWU6IHJ0LFxyXG4gICAgICAgICAgICB0eXBlOiBrbGFzc1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihtb2R1bGU6IE1vZHVsZSkge1xyXG5cclxuICAgICAgICBzdXBlcihcIlNldEl0ZXJhdG9ySW1wbFwiLCBtb2R1bGUpO1xyXG5cclxuICAgICAgICBsZXQgb2JqZWN0VHlwZSA9IG1vZHVsZS50eXBlU3RvcmUuZ2V0VHlwZShcIk9iamVjdFwiKTtcclxuXHJcbiAgICAgICAgdGhpcy5zZXRCYXNlQ2xhc3MoPEtsYXNzPm9iamVjdFR5cGUpO1xyXG5cclxuICAgICAgICBsZXQgdHlwZUU6IEtsYXNzID0gKDxLbGFzcz5vYmplY3RUeXBlKS5jbG9uZSgpO1xyXG4gICAgICAgIHR5cGVFLmlkZW50aWZpZXIgPSBcIkVcIjtcclxuICAgICAgICB0eXBlRS5pc1R5cGVWYXJpYWJsZSA9IHRydWU7XHJcblxyXG4gICAgICAgIGxldCB0dkU6IFR5cGVWYXJpYWJsZSA9IHtcclxuICAgICAgICAgICAgaWRlbnRpZmllcjogXCJFXCIsXHJcbiAgICAgICAgICAgIHNjb3BlRnJvbTogeyBsaW5lOiAxLCBjb2x1bW46IDEsIGxlbmd0aDogMSB9LFxyXG4gICAgICAgICAgICBzY29wZVRvOiB7IGxpbmU6IDEsIGNvbHVtbjogMSwgbGVuZ3RoOiAxIH0sXHJcbiAgICAgICAgICAgIHR5cGU6IHR5cGVFXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy50eXBlVmFyaWFibGVzLnB1c2godHZFKTtcclxuXHJcbiAgICAgICAgbGV0IGl0ZXJhdG9ySW50ZXJmYWNlID0gKDxJbnRlcmZhY2U+bW9kdWxlLnR5cGVTdG9yZS5nZXRUeXBlKFwiSXRlcmF0b3JcIikpLmNsb25lKCk7XHJcbiAgICAgICAgaXRlcmF0b3JJbnRlcmZhY2UudHlwZVZhcmlhYmxlcyA9IFt0dkVdO1xyXG5cclxuICAgICAgICB0aGlzLmltcGxlbWVudHMucHVzaChpdGVyYXRvckludGVyZmFjZSk7XHJcblxyXG4gICAgICAgIHRoaXMuYWRkTWV0aG9kKG5ldyBNZXRob2QoXCJoYXNOZXh0XCIsIG5ldyBQYXJhbWV0ZXJsaXN0KFtcclxuICAgICAgICBdKSwgYm9vbGVhblByaW1pdGl2ZVR5cGUsXHJcbiAgICAgICAgICAgIChwYXJhbWV0ZXJzKSA9PiB7XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IG86IFJ1bnRpbWVPYmplY3QgPSBwYXJhbWV0ZXJzWzBdLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgbGV0IGFoOiBTZXRJdGVyYXRvckhlbHBlciA9IG8uaW50cmluc2ljRGF0YVtcIlNldEl0ZXJhdG9ySGVscGVyXCJdO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBhaC5oYXNOZXh0KCk7XHJcblxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBmYWxzZSwgZmFsc2UsIFwiR2lidCBnZW5hdSBkYW5uIHRydWUgenVyw7xjaywgd2VubiBzaWNoIG5vY2ggbWluZGVzdGVucyBlaW4gd2VpdGVyZXMgRWxlbWVudCBpbiBkZXIgQ29sbGVjdGlvbiBiZWZpbmRldC5cIikpO1xyXG5cclxuICAgICAgICB0aGlzLmFkZE1ldGhvZChuZXcgTWV0aG9kKFwibmV4dFwiLCBuZXcgUGFyYW1ldGVybGlzdChbXHJcbiAgICAgICAgXSksIHR5cGVFLFxyXG4gICAgICAgICAgICAocGFyYW1ldGVycykgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBvOiBSdW50aW1lT2JqZWN0ID0gcGFyYW1ldGVyc1swXS52YWx1ZTtcclxuICAgICAgICAgICAgICAgIGxldCBhaDogU2V0SXRlcmF0b3JIZWxwZXIgPSBvLmludHJpbnNpY0RhdGFbXCJTZXRJdGVyYXRvckhlbHBlclwiXTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYWgubmV4dCgpO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZmFsc2UsIGZhbHNlLCBcIkdpYnQgZGFzIG7DpGNoc3RlIEVsZW1lbnQgZGVyIENvbGxlY3Rpb24genVyw7xjay5cIikpO1xyXG5cclxuICAgICAgICB0aGlzLmFkZE1ldGhvZChuZXcgTWV0aG9kKFwicmVtb3ZlXCIsIG5ldyBQYXJhbWV0ZXJsaXN0KFtcclxuICAgICAgICBdKSwgbnVsbCxcclxuICAgICAgICAgICAgKHBhcmFtZXRlcnMpID0+IHtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgbzogUnVudGltZU9iamVjdCA9IHBhcmFtZXRlcnNbMF0udmFsdWU7XHJcbiAgICAgICAgICAgICAgICBsZXQgYWg6IFNldEl0ZXJhdG9ySGVscGVyID0gby5pbnRyaW5zaWNEYXRhW1wiU2V0SXRlcmF0b3JIZWxwZXJcIl07XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFoLnJlbW92ZSgpO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZmFsc2UsIGZhbHNlLCBcIkzDtnNjaHQgZGFzIGxldHp0ZSBkdXJjaCBuZXh0IHp1csO8Y2tnZWdlYmVuZSBPYmpla3QuIERpZXNlIE1ldGhvZGUgYmVlaW5mbHVzc3QgbmljaHQsIHdlbGNoZXMgRWxlbWVudCBhbHMgbsOkY2hzdGVzIGR1cmNoIG5leHQgenVyw7xja2dlZ2ViZW4gd2lyZC5cIikpO1xyXG5cclxuXHJcblxyXG4gICAgfVxyXG59XHJcblxyXG5jbGFzcyBTZXRJdGVyYXRvckhlbHBlciB7XHJcblxyXG4gICAgbmV4dFBvczogbnVtYmVyO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgTWFwSGVscGVyOiBTZXRIZWxwZXIsIHByaXZhdGUgaW50ZXJwcmV0ZXI6IEludGVycHJldGVyLCBwcml2YXRlIGtpbmQ6IEl0ZXJhdG9yS2luZCkge1xyXG4gICAgICAgIHN3aXRjaCAoa2luZCkge1xyXG4gICAgICAgICAgICBjYXNlIFwiYXNjZW5kaW5nXCI6IHRoaXMubmV4dFBvcyA9IDA7IGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiZGVzY2VuZGluZ1wiOiB0aGlzLm5leHRQb3MgPSBNYXBIZWxwZXIudmFsdWVBcnJheS5sZW5ndGggLSAxOyBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmVtb3ZlKCkge1xyXG4gICAgICAgIHN3aXRjaCAodGhpcy5raW5kKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJhc2NlbmRpbmdcIjpcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm5leHRQb3MgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW50ZXJwcmV0ZXIudGhyb3dFeGNlcHRpb24oXCJEaWUgTWV0aG9kZSByZW1vdmUoKSBkZXMgSXRlcmF0b3JzIHd1cmRlIGF1ZmdlcnVmZW4sIG9id29obCBub2NoIG5pZSBuZXh0KCkgYXVmZ2VydWZlbiB3dXJkZS5cIilcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5uZXh0UG9zID4gdGhpcy5NYXBIZWxwZXIudmFsdWVBcnJheS5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnRlcnByZXRlci50aHJvd0V4Y2VwdGlvbihcIkRpZSBNZXRob2RlIHJlbW92ZSgpIGRlcyBJdGVyYXRvcnMgd3VyZGUgYXVmZ2VydWZlbiwgb2J3b2hsIGRhcyBsZXR6dGUgRWxlbWVudCBzY2hvbiBiZWltIHZvcmhlcmlnZW4gQXVmcnVmIHp1csO8Y2tnZWdlYmVuIHdvcmRlbiB3YXIuXCIpXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuTWFwSGVscGVyLnJlbW92ZU9iamVjdCh0aGlzLk1hcEhlbHBlci52YWx1ZUFycmF5W3RoaXMubmV4dFBvcyAtIDFdLnZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm5leHRQb3MgLT0gMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiZGVzY2VuZGluZ1wiOlxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubmV4dFBvcyA9PSB0aGlzLk1hcEhlbHBlci52YWx1ZUFycmF5Lmxlbmd0aCAtIDEpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmludGVycHJldGVyLnRocm93RXhjZXB0aW9uKFwiRGllIE1ldGhvZGUgcmVtb3ZlKCkgZGVzIEl0ZXJhdG9ycyB3dXJkZSBhdWZnZXJ1ZmVuLCBvYndvaGwgbm9jaCBuaWUgbmV4dCgpIGF1ZmdlcnVmZW4gd3VyZGUuXCIpXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMubmV4dFBvcyA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmludGVycHJldGVyLnRocm93RXhjZXB0aW9uKFwiRGllIE1ldGhvZGUgcmVtb3ZlKCkgZGVzIEl0ZXJhdG9ycyB3dXJkZSBhdWZnZXJ1ZmVuLCBvYndvaGwgZGFzIGxldHp0ZSBFbGVtZW50IHNjaG9uIGJlaW0gdm9yaGVyaWdlbiBBdWZydWYgenVyw7xja2dlZ2ViZW4gd29yZGVuIHdhci5cIilcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5NYXBIZWxwZXIucmVtb3ZlT2JqZWN0KHRoaXMuTWFwSGVscGVyLnZhbHVlQXJyYXlbdGhpcy5uZXh0UG9zICsgMV0udmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubmV4dFBvcyArPSAxO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG5leHQoKTogYW55IHtcclxuICAgICAgICBzd2l0Y2ggKHRoaXMua2luZCkge1xyXG4gICAgICAgICAgICBjYXNlIFwiYXNjZW5kaW5nXCI6XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5uZXh0UG9zID4gdGhpcy5NYXBIZWxwZXIudmFsdWVBcnJheS5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnRlcnByZXRlci50aHJvd0V4Y2VwdGlvbihcIkRpZSBNZXRob2RlIG5leHQoKSBkZXMgSXRlcmF0b3JzIHd1cmRlIGF1ZmdlcnVmZW4sIG9id29obCBkYXMgbGV0enRlIEVsZW1lbnQgc2Nob24gYmVpbSB2b3JoZXJpZ2VuIEF1ZnJ1ZiB6dXLDvGNrZ2VnZWJlbiB3b3JkZW4gd2FyLlwiKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuTWFwSGVscGVyLnZhbHVlQXJyYXlbdGhpcy5uZXh0UG9zKytdLnZhbHVlO1xyXG4gICAgICAgICAgICBjYXNlIFwiZGVzY2VuZGluZ1wiOlxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubmV4dFBvcyA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmludGVycHJldGVyLnRocm93RXhjZXB0aW9uKFwiRGllIE1ldGhvZGUgbmV4dCgpIGRlcyBJdGVyYXRvcnMgd3VyZGUgYXVmZ2VydWZlbiwgb2J3b2hsIGRhcyBsZXR6dGUgRWxlbWVudCBzY2hvbiBiZWltIHZvcmhlcmlnZW4gQXVmcnVmIHp1csO8Y2tnZWdlYmVuIHdvcmRlbiB3YXIuXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5NYXBIZWxwZXIudmFsdWVBcnJheVt0aGlzLm5leHRQb3MtLV0udmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGhhc05leHQoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgc3dpdGNoICh0aGlzLmtpbmQpIHtcclxuICAgICAgICAgICAgY2FzZSBcImFzY2VuZGluZ1wiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubmV4dFBvcyA8IHRoaXMuTWFwSGVscGVyLnZhbHVlQXJyYXkubGVuZ3RoO1xyXG4gICAgICAgICAgICBjYXNlIFwiZGVzY2VuZGluZ1wiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubmV4dFBvcyA+PSAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG5cclxufSJdfQ==