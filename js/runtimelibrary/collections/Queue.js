import { Method, Parameterlist } from "../../compiler/types/Types.js";
import { Interface } from "../../compiler/types/Class.js";
export class QueueClass extends Interface {
    constructor(module) {
        super("Queue", module);
        let objectType = module.typeStore.getType("Object");
        let typeE = objectType.clone();
        typeE.identifier = "E";
        typeE.isTypeVariable = true;
        let tvE = {
            identifier: "E",
            scopeFrom: { line: 1, column: 1, length: 1 },
            scopeTo: { line: 1, column: 1, length: 1 },
            type: typeE
        };
        this.typeVariables.push(tvE);
        let collectionInterface = module.typeStore.getType("Collection").clone();
        collectionInterface.typeVariables = [tvE];
        this.extends.push(collectionInterface);
        this.addMethod(new Method("remove", new Parameterlist([]), typeE, null, // no implementation!
        true, false, "Entfernt das Element am Kopf der Liste und gibt es zurück. Führt zum Fehler, wenn die Liste leer ist."));
        this.addMethod(new Method("poll", new Parameterlist([
            { identifier: "element", type: typeE, declaration: null, usagePositions: null, isFinal: true }
        ]), typeE, null, // no implementation!
        true, false, "Entfernt das Element am Kopf der Liste und gibt es zurück. Gibt null zurück, wenn die Liste leer ist."));
        this.addMethod(new Method("peek", new Parameterlist([]), typeE, null, // no implementation!
        true, false, "Gibt das Element am Kopf der Liste zurück, entfernt es aber nicht. Gib null zurück, wenn die Liste leer ist."));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUXVldWUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY2xpZW50L3J1bnRpbWVsaWJyYXJ5L2NvbGxlY3Rpb25zL1F1ZXVlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxNQUFNLEVBQUUsYUFBYSxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDdEUsT0FBTyxFQUFFLFNBQVMsRUFBdUIsTUFBTSwrQkFBK0IsQ0FBQztBQUcvRSxNQUFNLE9BQU8sVUFBVyxTQUFRLFNBQVM7SUFFckMsWUFBWSxNQUFjO1FBRXRCLEtBQUssQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFFdkIsSUFBSSxVQUFVLEdBQVUsTUFBTSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFM0QsSUFBSSxLQUFLLEdBQVUsVUFBVSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3RDLEtBQUssQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDO1FBQ3ZCLEtBQUssQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDO1FBRTVCLElBQUksR0FBRyxHQUFpQjtZQUNwQixVQUFVLEVBQUUsR0FBRztZQUNmLFNBQVMsRUFBRSxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFO1lBQzVDLE9BQU8sRUFBRSxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFO1lBQzFDLElBQUksRUFBRSxLQUFLO1NBQ2QsQ0FBQztRQUVGLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTdCLElBQUksbUJBQW1CLEdBQWUsTUFBTSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFFLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDdEYsbUJBQW1CLENBQUMsYUFBYSxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFMUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUd2QyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksTUFBTSxDQUFDLFFBQVEsRUFBRSxJQUFJLGFBQWEsQ0FBQyxFQUNyRCxDQUFDLEVBQUUsS0FBSyxFQUNMLElBQUksRUFBRyxxQkFBcUI7UUFDNUIsSUFBSSxFQUFFLEtBQUssRUFBRSx1R0FBdUcsQ0FBQyxDQUFDLENBQUM7UUFFM0gsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxNQUFNLEVBQUUsSUFBSSxhQUFhLENBQUM7WUFDaEQsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUU7U0FDakcsQ0FBQyxFQUFFLEtBQUssRUFDTCxJQUFJLEVBQUcscUJBQXFCO1FBQzVCLElBQUksRUFBRSxLQUFLLEVBQUUsdUdBQXVHLENBQUMsQ0FBQyxDQUFDO1FBRTNILElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxNQUFNLENBQUMsTUFBTSxFQUFFLElBQUksYUFBYSxDQUFDLEVBQ25ELENBQUMsRUFBRSxLQUFLLEVBQ0wsSUFBSSxFQUFHLHFCQUFxQjtRQUM1QixJQUFJLEVBQUUsS0FBSyxFQUFFLDhHQUE4RyxDQUFDLENBQUMsQ0FBQztJQUV0SSxDQUFDO0NBR0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNb2R1bGUgfSBmcm9tIFwiLi4vLi4vY29tcGlsZXIvcGFyc2VyL01vZHVsZS5qc1wiO1xyXG5pbXBvcnQgeyBNZXRob2QsIFBhcmFtZXRlcmxpc3QgfSBmcm9tIFwiLi4vLi4vY29tcGlsZXIvdHlwZXMvVHlwZXMuanNcIjtcclxuaW1wb3J0IHsgSW50ZXJmYWNlLCBUeXBlVmFyaWFibGUsIEtsYXNzIH0gZnJvbSBcIi4uLy4uL2NvbXBpbGVyL3R5cGVzL0NsYXNzLmpzXCI7XHJcbmltcG9ydCB7IHZvaWRQcmltaXRpdmVUeXBlLCBib29sZWFuUHJpbWl0aXZlVHlwZSwgaW50UHJpbWl0aXZlVHlwZSB9IGZyb20gXCIuLi8uLi9jb21waWxlci90eXBlcy9QcmltaXRpdmVUeXBlcy5qc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFF1ZXVlQ2xhc3MgZXh0ZW5kcyBJbnRlcmZhY2Uge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG1vZHVsZTogTW9kdWxlKSB7XHJcblxyXG4gICAgICAgIHN1cGVyKFwiUXVldWVcIiwgbW9kdWxlKTtcclxuXHJcbiAgICAgICAgbGV0IG9iamVjdFR5cGUgPSA8S2xhc3M+bW9kdWxlLnR5cGVTdG9yZS5nZXRUeXBlKFwiT2JqZWN0XCIpO1xyXG5cclxuICAgICAgICBsZXQgdHlwZUU6IEtsYXNzID0gb2JqZWN0VHlwZS5jbG9uZSgpO1xyXG4gICAgICAgIHR5cGVFLmlkZW50aWZpZXIgPSBcIkVcIjtcclxuICAgICAgICB0eXBlRS5pc1R5cGVWYXJpYWJsZSA9IHRydWU7XHJcblxyXG4gICAgICAgIGxldCB0dkU6IFR5cGVWYXJpYWJsZSA9IHtcclxuICAgICAgICAgICAgaWRlbnRpZmllcjogXCJFXCIsXHJcbiAgICAgICAgICAgIHNjb3BlRnJvbTogeyBsaW5lOiAxLCBjb2x1bW46IDEsIGxlbmd0aDogMSB9LFxyXG4gICAgICAgICAgICBzY29wZVRvOiB7IGxpbmU6IDEsIGNvbHVtbjogMSwgbGVuZ3RoOiAxIH0sXHJcbiAgICAgICAgICAgIHR5cGU6IHR5cGVFXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdGhpcy50eXBlVmFyaWFibGVzLnB1c2godHZFKTtcclxuXHJcbiAgICAgICAgbGV0IGNvbGxlY3Rpb25JbnRlcmZhY2UgPSAoPEludGVyZmFjZT5tb2R1bGUudHlwZVN0b3JlLmdldFR5cGUoXCJDb2xsZWN0aW9uXCIpKS5jbG9uZSgpO1xyXG4gICAgICAgIGNvbGxlY3Rpb25JbnRlcmZhY2UudHlwZVZhcmlhYmxlcyA9IFt0dkVdO1xyXG5cclxuICAgICAgICB0aGlzLmV4dGVuZHMucHVzaChjb2xsZWN0aW9uSW50ZXJmYWNlKTtcclxuXHJcblxyXG4gICAgICAgIHRoaXMuYWRkTWV0aG9kKG5ldyBNZXRob2QoXCJyZW1vdmVcIiwgbmV3IFBhcmFtZXRlcmxpc3QoW1xyXG4gICAgICAgIF0pLCB0eXBlRSxcclxuICAgICAgICAgICAgbnVsbCwgIC8vIG5vIGltcGxlbWVudGF0aW9uIVxyXG4gICAgICAgICAgICB0cnVlLCBmYWxzZSwgXCJFbnRmZXJudCBkYXMgRWxlbWVudCBhbSBLb3BmIGRlciBMaXN0ZSB1bmQgZ2lidCBlcyB6dXLDvGNrLiBGw7xocnQgenVtIEZlaGxlciwgd2VubiBkaWUgTGlzdGUgbGVlciBpc3QuXCIpKTtcclxuXHJcbiAgICAgICAgdGhpcy5hZGRNZXRob2QobmV3IE1ldGhvZChcInBvbGxcIiwgbmV3IFBhcmFtZXRlcmxpc3QoW1xyXG4gICAgICAgICAgICB7IGlkZW50aWZpZXI6IFwiZWxlbWVudFwiLCB0eXBlOiB0eXBlRSwgZGVjbGFyYXRpb246IG51bGwsIHVzYWdlUG9zaXRpb25zOiBudWxsLCBpc0ZpbmFsOiB0cnVlIH1cclxuICAgICAgICBdKSwgdHlwZUUsXHJcbiAgICAgICAgICAgIG51bGwsICAvLyBubyBpbXBsZW1lbnRhdGlvbiFcclxuICAgICAgICAgICAgdHJ1ZSwgZmFsc2UsIFwiRW50ZmVybnQgZGFzIEVsZW1lbnQgYW0gS29wZiBkZXIgTGlzdGUgdW5kIGdpYnQgZXMgenVyw7xjay4gR2lidCBudWxsIHp1csO8Y2ssIHdlbm4gZGllIExpc3RlIGxlZXIgaXN0LlwiKSk7XHJcblxyXG4gICAgICAgIHRoaXMuYWRkTWV0aG9kKG5ldyBNZXRob2QoXCJwZWVrXCIsIG5ldyBQYXJhbWV0ZXJsaXN0KFtcclxuICAgICAgICBdKSwgdHlwZUUsXHJcbiAgICAgICAgICAgIG51bGwsICAvLyBubyBpbXBsZW1lbnRhdGlvbiFcclxuICAgICAgICAgICAgdHJ1ZSwgZmFsc2UsIFwiR2lidCBkYXMgRWxlbWVudCBhbSBLb3BmIGRlciBMaXN0ZSB6dXLDvGNrLCBlbnRmZXJudCBlcyBhYmVyIG5pY2h0LiBHaWIgbnVsbCB6dXLDvGNrLCB3ZW5uIGRpZSBMaXN0ZSBsZWVyIGlzdC5cIikpO1xyXG5cclxuICAgIH1cclxuXHJcblxyXG59XHJcbiJdfQ==