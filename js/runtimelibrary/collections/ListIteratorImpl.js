import { Klass } from "../../compiler/types/Class.js";
import { booleanPrimitiveType } from "../../compiler/types/PrimitiveTypes.js";
import { Method, Parameterlist } from "../../compiler/types/Types.js";
import { RuntimeObject } from "../../interpreter/RuntimeObject.js";
export class ListIteratorImplClass extends Klass {
    static getIterator(listHelper, interpreter, module, kind) {
        let klass = module.typeStore.getType("ListIteratorImpl");
        let rt = new RuntimeObject(klass);
        rt.intrinsicData["IteratorHelper"] = new IteratorHelper(listHelper, interpreter, kind);
        return {
            value: rt,
            type: klass
        };
    }
    constructor(module) {
        super("ListIteratorImpl", module);
        let objectType = module.typeStore.getType("Object");
        this.setBaseClass(objectType);
        let typeE = objectType.clone();
        typeE.identifier = "E";
        typeE.isTypeVariable = true;
        let tvE = {
            identifier: "E",
            scopeFrom: { line: 1, column: 1, length: 1 },
            scopeTo: { line: 1, column: 1, length: 1 },
            type: typeE
        };
        this.typeVariables.push(tvE);
        let iteratorInterface = module.typeStore.getType("Iterator").clone();
        iteratorInterface.typeVariables = [tvE];
        this.implements.push(iteratorInterface);
        this.addMethod(new Method("hasNext", new Parameterlist([]), booleanPrimitiveType, (parameters) => {
            let o = parameters[0].value;
            let ah = o.intrinsicData["IteratorHelper"];
            return ah.hasNext();
        }, false, false, "Gibt genau dann true zurück, wenn sich noch mindestens ein weiteres Element in der Collection befindet."));
        this.addMethod(new Method("next", new Parameterlist([]), typeE, (parameters) => {
            let o = parameters[0].value;
            let ah = o.intrinsicData["IteratorHelper"];
            return ah.next();
        }, false, false, "Gibt das nächste Element der Collection zurück."));
        this.addMethod(new Method("remove", new Parameterlist([]), null, (parameters) => {
            let o = parameters[0].value;
            let ah = o.intrinsicData["IteratorHelper"];
            return ah.remove();
        }, false, false, "Löscht das letzte durch next zurückgegebene Objekt. Diese Methode beeinflusst nicht, welches Element als nächstes durch next zurückgegeben wird."));
    }
}
class IteratorHelper {
    constructor(listHelper, interpreter, kind) {
        this.listHelper = listHelper;
        this.interpreter = interpreter;
        this.kind = kind;
        switch (kind) {
            case "ascending":
                this.nextPos = 0;
                break;
            case "descending":
                this.nextPos = listHelper.objectArray.length - 1;
                break;
        }
    }
    remove() {
        switch (this.kind) {
            case "ascending":
                if (this.nextPos == 0) {
                    this.interpreter.throwException("Die Methode remove() des Iterators wurde aufgerufen, obwohl noch nie next() aufgerufen wurde.");
                }
                else if (this.nextPos > this.listHelper.objectArray.length - 1) {
                    this.interpreter.throwException("Die Methode remove() des Iterators wurde aufgerufen, obwohl das letzte Element schon beim vorherigen Aufruf zurückgegeben worden war.");
                }
                else {
                    this.listHelper.valueArray.splice(this.nextPos - 1, 1);
                    this.listHelper.objectArray.splice(this.nextPos - 1, 1);
                    this.nextPos -= 1;
                }
                break;
            case "descending":
                if (this.nextPos == this.listHelper.objectArray.length - 1) {
                    this.interpreter.throwException("Die Methode remove() des Iterators wurde aufgerufen, obwohl noch nie next() aufgerufen wurde.");
                }
                else if (this.nextPos < 0) {
                    this.interpreter.throwException("Die Methode remove() des Iterators wurde aufgerufen, obwohl das letzte Element schon beim vorherigen Aufruf zurückgegeben worden war.");
                }
                else {
                    this.listHelper.valueArray.splice(this.nextPos + 1, 1);
                    this.listHelper.objectArray.splice(this.nextPos + 1, 1);
                    this.nextPos += 1;
                }
                break;
        }
    }
    next() {
        switch (this.kind) {
            case "ascending":
                if (this.nextPos > this.listHelper.objectArray.length - 1) {
                    this.interpreter.throwException("Die Methode next() des Iterators wurde aufgerufen, obwohl das letzte Element schon beim vorherigen Aufruf zurückgegeben worden war.");
                    return null;
                }
                return this.listHelper.objectArray[this.nextPos++].value;
            case "descending":
                if (this.nextPos < 0) {
                    this.interpreter.throwException("Die Methode next() des Iterators wurde aufgerufen, obwohl das letzte Element schon beim vorherigen Aufruf zurückgegeben worden war.");
                    return null;
                }
                return this.listHelper.objectArray[this.nextPos--].value;
        }
    }
    hasNext() {
        switch (this.kind) {
            case "ascending":
                return this.nextPos < this.listHelper.objectArray.length;
            case "descending":
                return this.nextPos >= 0;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGlzdEl0ZXJhdG9ySW1wbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jbGllbnQvcnVudGltZWxpYnJhcnkvY29sbGVjdGlvbnMvTGlzdEl0ZXJhdG9ySW1wbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQWEsS0FBSyxFQUFnQixNQUFNLCtCQUErQixDQUFDO0FBQy9FLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQzlFLE9BQU8sRUFBRSxNQUFNLEVBQUUsYUFBYSxFQUFTLE1BQU0sK0JBQStCLENBQUM7QUFFN0UsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBS25FLE1BQU0sT0FBTyxxQkFBc0IsU0FBUSxLQUFLO0lBRXJDLE1BQU0sQ0FBQyxXQUFXLENBQUMsVUFBc0IsRUFBRSxXQUF3QixFQUFFLE1BQWMsRUFBRSxJQUFrQjtRQUUxRyxJQUFJLEtBQUssR0FBVSxNQUFNLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO1FBQ2hFLElBQUksRUFBRSxHQUFrQixJQUFJLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNqRCxFQUFFLENBQUMsYUFBYSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsSUFBSSxjQUFjLENBQUMsVUFBVSxFQUFFLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUV2RixPQUFPO1lBQ0gsS0FBSyxFQUFFLEVBQUU7WUFDVCxJQUFJLEVBQUUsS0FBSztTQUNkLENBQUE7SUFDTCxDQUFDO0lBRUQsWUFBWSxNQUFjO1FBRXRCLEtBQUssQ0FBQyxrQkFBa0IsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUVsQyxJQUFJLFVBQVUsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUVwRCxJQUFJLENBQUMsWUFBWSxDQUFRLFVBQVUsQ0FBQyxDQUFDO1FBRXJD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LE1BQU0sQ0FBQztZQUM3RCxLQUFLLFlBQVk7Z0JBQ2IsT0FBTyxJQUFJLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQztTQUNoQztJQUNMLENBQUM7Q0FJSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1vZHVsZSB9IGZyb20gXCIuLi8uLi9jb21waWxlci9wYXJzZXIvTW9kdWxlLmpzXCI7XHJcbmltcG9ydCB7IEludGVyZmFjZSwgS2xhc3MsIFR5cGVWYXJpYWJsZSB9IGZyb20gXCIuLi8uLi9jb21waWxlci90eXBlcy9DbGFzcy5qc1wiO1xyXG5pbXBvcnQgeyBib29sZWFuUHJpbWl0aXZlVHlwZSB9IGZyb20gXCIuLi8uLi9jb21waWxlci90eXBlcy9QcmltaXRpdmVUeXBlcy5qc1wiO1xyXG5pbXBvcnQgeyBNZXRob2QsIFBhcmFtZXRlcmxpc3QsIFZhbHVlIH0gZnJvbSBcIi4uLy4uL2NvbXBpbGVyL3R5cGVzL1R5cGVzLmpzXCI7XHJcbmltcG9ydCB7IEludGVycHJldGVyIH0gZnJvbSBcIi4uLy4uL2ludGVycHJldGVyL0ludGVycHJldGVyLmpzXCI7XHJcbmltcG9ydCB7IFJ1bnRpbWVPYmplY3QgfSBmcm9tIFwiLi4vLi4vaW50ZXJwcmV0ZXIvUnVudGltZU9iamVjdC5qc1wiO1xyXG5pbXBvcnQgeyBMaXN0SGVscGVyIH0gZnJvbSBcIi4vQXJyYXlMaXN0LmpzXCI7XHJcblxyXG5leHBvcnQgdHlwZSBJdGVyYXRvcktpbmQgPSBcImRlc2NlbmRpbmdcIiB8IFwiYXNjZW5kaW5nXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgTGlzdEl0ZXJhdG9ySW1wbENsYXNzIGV4dGVuZHMgS2xhc3Mge1xyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0SXRlcmF0b3IobGlzdEhlbHBlcjogTGlzdEhlbHBlciwgaW50ZXJwcmV0ZXI6IEludGVycHJldGVyLCBtb2R1bGU6IE1vZHVsZSwga2luZDogSXRlcmF0b3JLaW5kKTogVmFsdWUge1xyXG5cclxuICAgICAgICBsZXQga2xhc3MgPSA8S2xhc3M+bW9kdWxlLnR5cGVTdG9yZS5nZXRUeXBlKFwiTGlzdEl0ZXJhdG9ySW1wbFwiKTtcclxuICAgICAgICBsZXQgcnQ6IFJ1bnRpbWVPYmplY3QgPSBuZXcgUnVudGltZU9iamVjdChrbGFzcyk7XHJcbiAgICAgICAgcnQuaW50cmluc2ljRGF0YVtcIkl0ZXJhdG9ySGVscGVyXCJdID0gbmV3IEl0ZXJhdG9ySGVscGVyKGxpc3RIZWxwZXIsIGludGVycHJldGVyLCBraW5kKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdmFsdWU6IHJ0LFxyXG4gICAgICAgICAgICB0eXBlOiBrbGFzc1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihtb2R1bGU6IE1vZHVsZSkge1xyXG5cclxuICAgICAgICBzdXBlcihcIkxpc3RJdGVyYXRvckltcGxcIiwgbW9kdWxlKTtcclxuXHJcbiAgICAgICAgbGV0IG9iamVjdFR5cGUgPSBtb2R1bGUudHlwZVN0b3JlLmdldFR5cGUoXCJPYmplY3RcIik7XHJcblxyXG4gICAgICAgIHRoaXMuc2V0QmFzZUNsYXNzKDxLbGFzcz5vYmplY3RUeXBlKTtcclxuXHJcbiAgICAgICAgbGV0IHR5cGVFOiBLbGFzcyA9ICg8S2xhc3M+b2JqZWN0VHlwZSkuY2xvbmUoKTtcclxuICAgICAgICB0eXBlRS5pZGVudGlmaWVyID0gXCJFXCI7XHJcbiAgICAgICAgdHlwZUUuaXNUeXBlVmFyaWFibGUgPSB0cnVlO1xyXG5cclxuICAgICAgICBsZXQgdHZFOiBUeXBlVmFyaWFibGUgPSB7XHJcbiAgICAgICAgICAgIGlkZW50aWZpZXI6IFwiRVwiLFxyXG4gICAgICAgICAgICBzY29wZUZyb206IHsgbGluZTogMSwgY29sdW1uOiAxLCBsZW5ndGg6IDEgfSxcclxuICAgICAgICAgICAgc2NvcGVUbzogeyBsaW5lOiAxLCBjb2x1bW46IDEsIGxlbmd0aDogMSB9LFxyXG4gICAgICAgICAgICB0eXBlOiB0eXBlRVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMudHlwZVZhcmlhYmxlcy5wdXNoKHR2RSk7XHJcblxyXG4gICAgICAgIGxldCBpdGVyYXRvckludGVyZmFjZSA9ICg8SW50ZXJmYWNlPm1vZHVsZS50eXBlU3RvcmUuZ2V0VHlwZShcIkl0ZXJhdG9yXCIpKS5jbG9uZSgpO1xyXG4gICAgICAgIGl0ZXJhdG9ySW50ZXJmYWNlLnR5cGVWYXJpYWJsZXMgPSBbdHZFXTtcclxuXHJcbiAgICAgICAgdGhpcy5pbXBsZW1lbnRzLnB1c2goaXRlcmF0b3JJbnRlcmZhY2UpO1xyXG5cclxuICAgICAgICB0aGlzLmFkZE1ldGhvZChuZXcgTWV0aG9kKFwiaGFzTmV4dFwiLCBuZXcgUGFyYW1ldGVybGlzdChbXHJcbiAgICAgICAgXSksIGJvb2xlYW5QcmltaXRpdmVUeXBlLFxyXG4gICAgICAgICAgICAocGFyYW1ldGVycykgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBvOiBSdW50aW1lT2JqZWN0ID0gcGFyYW1ldGVyc1swXS52YWx1ZTtcclxuICAgICAgICAgICAgICAgIGxldCBhaDogSXRlcmF0b3JIZWxwZXIgPSBvLmludHJpbnNpY0RhdGFbXCJJdGVyYXRvckhlbHBlclwiXTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYWguaGFzTmV4dCgpO1xyXG5cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZmFsc2UsIGZhbHNlLCBcIkdpYnQgZ2VuYXUgZGFubiB0cnVlIHp1csO8Y2ssIHdlbm4gc2ljaCBub2NoIG1pbmRlc3RlbnMgZWluIHdlaXRlcmVzIEVsZW1lbnQgaW4gZGVyIENvbGxlY3Rpb24gYmVmaW5kZXQuXCIpKTtcclxuXHJcbiAgICAgICAgdGhpcy5hZGRNZXRob2QobmV3IE1ldGhvZChcIm5leHRcIiwgbmV3IFBhcmFtZXRlcmxpc3QoW1xyXG4gICAgICAgIF0pLCB0eXBlRSxcclxuICAgICAgICAgICAgKHBhcmFtZXRlcnMpID0+IHtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgbzogUnVudGltZU9iamVjdCA9IHBhcmFtZXRlcnNbMF0udmFsdWU7XHJcbiAgICAgICAgICAgICAgICBsZXQgYWg6IEl0ZXJhdG9ySGVscGVyID0gby5pbnRyaW5zaWNEYXRhW1wiSXRlcmF0b3JIZWxwZXJcIl07XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFoLm5leHQoKTtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGZhbHNlLCBmYWxzZSwgXCJHaWJ0IGRhcyBuw6RjaHN0ZSBFbGVtZW50IGRlciBDb2xsZWN0aW9uIHp1csO8Y2suXCIpKTtcclxuXHJcbiAgICAgICAgdGhpcy5hZGRNZXRob2QobmV3IE1ldGhvZChcInJlbW92ZVwiLCBuZXcgUGFyYW1ldGVybGlzdChbXHJcbiAgICAgICAgXSksIG51bGwsXHJcbiAgICAgICAgICAgIChwYXJhbWV0ZXJzKSA9PiB7XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IG86IFJ1bnRpbWVPYmplY3QgPSBwYXJhbWV0ZXJzWzBdLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgbGV0IGFoOiBJdGVyYXRvckhlbHBlciA9IG8uaW50cmluc2ljRGF0YVtcIkl0ZXJhdG9ySGVscGVyXCJdO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBhaC5yZW1vdmUoKTtcclxuXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGZhbHNlLCBmYWxzZSwgXCJMw7ZzY2h0IGRhcyBsZXR6dGUgZHVyY2ggbmV4dCB6dXLDvGNrZ2VnZWJlbmUgT2JqZWt0LiBEaWVzZSBNZXRob2RlIGJlZWluZmx1c3N0IG5pY2h0LCB3ZWxjaGVzIEVsZW1lbnQgYWxzIG7DpGNoc3RlcyBkdXJjaCBuZXh0IHp1csO8Y2tnZWdlYmVuIHdpcmQuXCIpKTtcclxuXHJcblxyXG5cclxuICAgIH1cclxufVxyXG5cclxuY2xhc3MgSXRlcmF0b3JIZWxwZXIge1xyXG5cclxuICAgIG5leHRQb3M6IG51bWJlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGxpc3RIZWxwZXI6IExpc3RIZWxwZXIsIHByaXZhdGUgaW50ZXJwcmV0ZXI6IEludGVycHJldGVyLCBwcml2YXRlIGtpbmQ6IEl0ZXJhdG9yS2luZCkge1xyXG4gICAgICAgIHN3aXRjaCAoa2luZCkge1xyXG4gICAgICAgICAgICBjYXNlIFwiYXNjZW5kaW5nXCI6IHRoaXMubmV4dFBvcyA9IDA7IGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiZGVzY2VuZGluZ1wiOiB0aGlzLm5leHRQb3MgPSBsaXN0SGVscGVyLm9iamVjdEFycmF5Lmxlbmd0aCAtIDE7IGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZW1vdmUoKSB7XHJcbiAgICAgICAgc3dpdGNoICh0aGlzLmtpbmQpIHtcclxuICAgICAgICAgICAgY2FzZSBcImFzY2VuZGluZ1wiOlxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubmV4dFBvcyA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnRlcnByZXRlci50aHJvd0V4Y2VwdGlvbihcIkRpZSBNZXRob2RlIHJlbW92ZSgpIGRlcyBJdGVyYXRvcnMgd3VyZGUgYXVmZ2VydWZlbiwgb2J3b2hsIG5vY2ggbmllIG5leHQoKSBhdWZnZXJ1ZmVuIHd1cmRlLlwiKVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLm5leHRQb3MgPiB0aGlzLmxpc3RIZWxwZXIub2JqZWN0QXJyYXkubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW50ZXJwcmV0ZXIudGhyb3dFeGNlcHRpb24oXCJEaWUgTWV0aG9kZSByZW1vdmUoKSBkZXMgSXRlcmF0b3JzIHd1cmRlIGF1ZmdlcnVmZW4sIG9id29obCBkYXMgbGV0enRlIEVsZW1lbnQgc2Nob24gYmVpbSB2b3JoZXJpZ2VuIEF1ZnJ1ZiB6dXLDvGNrZ2VnZWJlbiB3b3JkZW4gd2FyLlwiKVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxpc3RIZWxwZXIudmFsdWVBcnJheS5zcGxpY2UodGhpcy5uZXh0UG9zIC0gMSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5saXN0SGVscGVyLm9iamVjdEFycmF5LnNwbGljZSh0aGlzLm5leHRQb3MgLSAxLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm5leHRQb3MgLT0gMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIFwiZGVzY2VuZGluZ1wiOlxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubmV4dFBvcyA9PSB0aGlzLmxpc3RIZWxwZXIub2JqZWN0QXJyYXkubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW50ZXJwcmV0ZXIudGhyb3dFeGNlcHRpb24oXCJEaWUgTWV0aG9kZSByZW1vdmUoKSBkZXMgSXRlcmF0b3JzIHd1cmRlIGF1ZmdlcnVmZW4sIG9id29obCBub2NoIG5pZSBuZXh0KCkgYXVmZ2VydWZlbiB3dXJkZS5cIilcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5uZXh0UG9zIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW50ZXJwcmV0ZXIudGhyb3dFeGNlcHRpb24oXCJEaWUgTWV0aG9kZSByZW1vdmUoKSBkZXMgSXRlcmF0b3JzIHd1cmRlIGF1ZmdlcnVmZW4sIG9id29obCBkYXMgbGV0enRlIEVsZW1lbnQgc2Nob24gYmVpbSB2b3JoZXJpZ2VuIEF1ZnJ1ZiB6dXLDvGNrZ2VnZWJlbiB3b3JkZW4gd2FyLlwiKVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxpc3RIZWxwZXIudmFsdWVBcnJheS5zcGxpY2UodGhpcy5uZXh0UG9zICsgMSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5saXN0SGVscGVyLm9iamVjdEFycmF5LnNwbGljZSh0aGlzLm5leHRQb3MgKyAxLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm5leHRQb3MgKz0gMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBuZXh0KCk6IGFueSB7XHJcbiAgICAgICAgc3dpdGNoICh0aGlzLmtpbmQpIHtcclxuICAgICAgICAgICAgY2FzZSBcImFzY2VuZGluZ1wiOlxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubmV4dFBvcyA+IHRoaXMubGlzdEhlbHBlci5vYmplY3RBcnJheS5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnRlcnByZXRlci50aHJvd0V4Y2VwdGlvbihcIkRpZSBNZXRob2RlIG5leHQoKSBkZXMgSXRlcmF0b3JzIHd1cmRlIGF1ZmdlcnVmZW4sIG9id29obCBkYXMgbGV0enRlIEVsZW1lbnQgc2Nob24gYmVpbSB2b3JoZXJpZ2VuIEF1ZnJ1ZiB6dXLDvGNrZ2VnZWJlbiB3b3JkZW4gd2FyLlwiKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubGlzdEhlbHBlci5vYmplY3RBcnJheVt0aGlzLm5leHRQb3MrK10udmFsdWU7XHJcbiAgICAgICAgICAgIGNhc2UgXCJkZXNjZW5kaW5nXCI6XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5uZXh0UG9zIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW50ZXJwcmV0ZXIudGhyb3dFeGNlcHRpb24oXCJEaWUgTWV0aG9kZSBuZXh0KCkgZGVzIEl0ZXJhdG9ycyB3dXJkZSBhdWZnZXJ1ZmVuLCBvYndvaGwgZGFzIGxldHp0ZSBFbGVtZW50IHNjaG9uIGJlaW0gdm9yaGVyaWdlbiBBdWZydWYgenVyw7xja2dlZ2ViZW4gd29yZGVuIHdhci5cIilcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxpc3RIZWxwZXIub2JqZWN0QXJyYXlbdGhpcy5uZXh0UG9zLS1dLnZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBoYXNOZXh0KCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHN3aXRjaCAodGhpcy5raW5kKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJhc2NlbmRpbmdcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm5leHRQb3MgPCB0aGlzLmxpc3RIZWxwZXIub2JqZWN0QXJyYXkubGVuZ3RoO1xyXG4gICAgICAgICAgICBjYXNlIFwiZGVzY2VuZGluZ1wiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubmV4dFBvcyA+PSAwO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG5cclxufVxyXG4iXX0=