import { Method, Parameterlist } from "../../compiler/types/Types.js";
import { Interface } from "../../compiler/types/Class.js";
import { intPrimitiveType } from "../../compiler/types/PrimitiveTypes.js";
export class ListClass extends Interface {
    constructor(module) {
        super("List", module, "Interface mit Methoden einer Liste (d.h. Anfügen von Elementen nur am Ende)");
        let objectType = module.typeStore.getType("Object");
        let typeE = module.typeStore.getType("Object").clone();
        typeE.identifier = "E";
        typeE.isTypeVariable = true;
        let tvE = {
            identifier: "E",
            scopeFrom: { line: 1, column: 1, length: 1 },
            scopeTo: { line: 1, column: 1, length: 1 },
            type: typeE
        };
        this.typeVariables.push(tvE);
        let collectionInterface = module.typeStore.getType("Collection").clone();
        collectionInterface.typeVariables = [tvE];
        this.extends.push(collectionInterface);
        this.addMethod(new Method("get", new Parameterlist([
            { identifier: "index", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }
        ]), typeE, null, // no implementation!
        true, false, "Gibt das Element der Liste an der Stelle index zurück. WICHTIG: Das erste Element hat den Index 0. Es ist 0 <= index < size()"));
        this.addMethod(new Method("remove", new Parameterlist([
            { identifier: "index", type: intPrimitiveType, declaration: null, usagePositions: null, isFinal: true }
        ]), null, null, // no implementation!
        true, false, "Entfernt das Element an der Stelle index. WICHTIG: Das erste Element hat den Index 0. Es ist 0 <= index < size()"));
        this.addMethod(new Method("indexOf", new Parameterlist([
            { identifier: "o", type: objectType, declaration: null, usagePositions: null, isFinal: true }
        ]), intPrimitiveType, null, // no implementation!
        true, false, "Gibt den Index des Elements o zurück. Gibt -1 zurück, wenn die Liste das Element o nicht enthält. WICHTIG: Das erste Element hat den Index 0, das letzte den Index size() - 1. "));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTGlzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jbGllbnQvcnVudGltZWxpYnJhcnkvY29sbGVjdGlvbnMvTGlzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsTUFBTSxFQUFFLGFBQWEsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ3RFLE9BQU8sRUFBRSxTQUFTLEVBQXVCLE1BQU0sK0JBQStCLENBQUM7QUFDL0UsT0FBTyxFQUEyQyxnQkFBZ0IsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBRW5ILE1BQU0sT0FBTyxTQUFVLFNBQVEsU0FBUztJQUVwQyxZQUFZLE1BQWM7UUFFdEIsS0FBSyxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsNkVBQTZFLENBQUMsQ0FBQztRQUVyRyxJQUFJLFVBQVUsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUVwRCxJQUFJLEtBQUssR0FBa0IsTUFBTSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFFLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDdkUsS0FBSyxDQUFDLFVBQVUsR0FBRyxHQUFHLENBQUM7UUFDdkIsS0FBSyxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUM7UUFFNUIsSUFBSSxHQUFHLEdBQWlCO1lBQ3BCLFVBQVUsRUFBRSxHQUFHO1lBQ2YsU0FBUyxFQUFFLEVBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUM7WUFDMUMsT0FBTyxFQUFFLEVBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUM7WUFDeEMsSUFBSSxFQUFFLEtBQUs7U0FDZCxDQUFDO1FBRUYsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFN0IsSUFBSSxtQkFBbUIsR0FBZSxNQUFNLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUN0RixtQkFBbUIsQ0FBQyxhQUFhLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUUxQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBRXZDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxNQUFNLENBQUMsS0FBSyxFQUFFLElBQUksYUFBYSxDQUFDO1lBQy9DLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsZ0JBQWdCLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUU7U0FDMUcsQ0FBQyxFQUFFLEtBQUssRUFDTCxJQUFJLEVBQUcscUJBQXFCO1FBQzVCLElBQUksRUFBRSxLQUFLLEVBQUUsK0hBQStILENBQUMsQ0FBQyxDQUFDO1FBRW5KLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxNQUFNLENBQUMsUUFBUSxFQUFFLElBQUksYUFBYSxDQUFDO1lBQ2xELEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsZ0JBQWdCLEVBQUUsV0FBVyxFQUFFLElBQUksRUFBRSxjQUFjLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUU7U0FDMUcsQ0FBQyxFQUFFLElBQUksRUFDSixJQUFJLEVBQUcscUJBQXFCO1FBQzVCLElBQUksRUFBRSxLQUFLLEVBQUUsa0hBQWtILENBQUMsQ0FBQyxDQUFDO1FBRWxJLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxNQUFNLENBQUMsU0FBUyxFQUFFLElBQUksYUFBYSxDQUFDO1lBQ3ZELEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUUsY0FBYyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFO1NBQ2hHLENBQUMsRUFBRSxnQkFBZ0IsRUFDaEIsSUFBSSxFQUFHLHFCQUFxQjtRQUM1QixJQUFJLEVBQUUsS0FBSyxFQUFFLGlMQUFpTCxDQUFDLENBQUMsQ0FBQztJQUN6TSxDQUFDO0NBRUoiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNb2R1bGUgfSBmcm9tIFwiLi4vLi4vY29tcGlsZXIvcGFyc2VyL01vZHVsZS5qc1wiO1xyXG5pbXBvcnQgeyBNZXRob2QsIFBhcmFtZXRlcmxpc3QgfSBmcm9tIFwiLi4vLi4vY29tcGlsZXIvdHlwZXMvVHlwZXMuanNcIjtcclxuaW1wb3J0IHsgSW50ZXJmYWNlLCBUeXBlVmFyaWFibGUsIEtsYXNzIH0gZnJvbSBcIi4uLy4uL2NvbXBpbGVyL3R5cGVzL0NsYXNzLmpzXCI7XHJcbmltcG9ydCB7IHZvaWRQcmltaXRpdmVUeXBlLCBib29sZWFuUHJpbWl0aXZlVHlwZSwgaW50UHJpbWl0aXZlVHlwZSB9IGZyb20gXCIuLi8uLi9jb21waWxlci90eXBlcy9QcmltaXRpdmVUeXBlcy5qc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIExpc3RDbGFzcyBleHRlbmRzIEludGVyZmFjZSB7XHJcblxyXG4gICAgY29uc3RydWN0b3IobW9kdWxlOiBNb2R1bGUpIHtcclxuICAgICAgICBcclxuICAgICAgICBzdXBlcihcIkxpc3RcIiwgbW9kdWxlLCBcIkludGVyZmFjZSBtaXQgTWV0aG9kZW4gZWluZXIgTGlzdGUgKGQuaC4gQW5mw7xnZW4gdm9uIEVsZW1lbnRlbiBudXIgYW0gRW5kZSlcIik7XHJcblxyXG4gICAgICAgIGxldCBvYmplY3RUeXBlID0gbW9kdWxlLnR5cGVTdG9yZS5nZXRUeXBlKFwiT2JqZWN0XCIpO1xyXG5cclxuICAgICAgICBsZXQgdHlwZUU6IEtsYXNzID0gKDxLbGFzcz5tb2R1bGUudHlwZVN0b3JlLmdldFR5cGUoXCJPYmplY3RcIikpLmNsb25lKCk7XHJcbiAgICAgICAgdHlwZUUuaWRlbnRpZmllciA9IFwiRVwiO1xyXG4gICAgICAgIHR5cGVFLmlzVHlwZVZhcmlhYmxlID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgbGV0IHR2RTogVHlwZVZhcmlhYmxlID0ge1xyXG4gICAgICAgICAgICBpZGVudGlmaWVyOiBcIkVcIixcclxuICAgICAgICAgICAgc2NvcGVGcm9tOiB7bGluZTogMSwgY29sdW1uOiAxLCBsZW5ndGg6IDF9LFxyXG4gICAgICAgICAgICBzY29wZVRvOiB7bGluZTogMSwgY29sdW1uOiAxLCBsZW5ndGg6IDF9LFxyXG4gICAgICAgICAgICB0eXBlOiB0eXBlRVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMudHlwZVZhcmlhYmxlcy5wdXNoKHR2RSk7XHJcblxyXG4gICAgICAgIGxldCBjb2xsZWN0aW9uSW50ZXJmYWNlID0gKDxJbnRlcmZhY2U+bW9kdWxlLnR5cGVTdG9yZS5nZXRUeXBlKFwiQ29sbGVjdGlvblwiKSkuY2xvbmUoKTtcclxuICAgICAgICBjb2xsZWN0aW9uSW50ZXJmYWNlLnR5cGVWYXJpYWJsZXMgPSBbdHZFXTtcclxuXHJcbiAgICAgICAgdGhpcy5leHRlbmRzLnB1c2goY29sbGVjdGlvbkludGVyZmFjZSk7XHJcblxyXG4gICAgICAgIHRoaXMuYWRkTWV0aG9kKG5ldyBNZXRob2QoXCJnZXRcIiwgbmV3IFBhcmFtZXRlcmxpc3QoW1xyXG4gICAgICAgICAgICB7IGlkZW50aWZpZXI6IFwiaW5kZXhcIiwgdHlwZTogaW50UHJpbWl0aXZlVHlwZSwgZGVjbGFyYXRpb246IG51bGwsIHVzYWdlUG9zaXRpb25zOiBudWxsLCBpc0ZpbmFsOiB0cnVlIH1cclxuICAgICAgICBdKSwgdHlwZUUsXHJcbiAgICAgICAgICAgIG51bGwsICAvLyBubyBpbXBsZW1lbnRhdGlvbiFcclxuICAgICAgICAgICAgdHJ1ZSwgZmFsc2UsIFwiR2lidCBkYXMgRWxlbWVudCBkZXIgTGlzdGUgYW4gZGVyIFN0ZWxsZSBpbmRleCB6dXLDvGNrLiBXSUNIVElHOiBEYXMgZXJzdGUgRWxlbWVudCBoYXQgZGVuIEluZGV4IDAuIEVzIGlzdCAwIDw9IGluZGV4IDwgc2l6ZSgpXCIpKTtcclxuXHJcbiAgICAgICAgdGhpcy5hZGRNZXRob2QobmV3IE1ldGhvZChcInJlbW92ZVwiLCBuZXcgUGFyYW1ldGVybGlzdChbXHJcbiAgICAgICAgICAgIHsgaWRlbnRpZmllcjogXCJpbmRleFwiLCB0eXBlOiBpbnRQcmltaXRpdmVUeXBlLCBkZWNsYXJhdGlvbjogbnVsbCwgdXNhZ2VQb3NpdGlvbnM6IG51bGwsIGlzRmluYWw6IHRydWUgfVxyXG4gICAgICAgIF0pLCBudWxsLFxyXG4gICAgICAgICAgICBudWxsLCAgLy8gbm8gaW1wbGVtZW50YXRpb24hXHJcbiAgICAgICAgICAgIHRydWUsIGZhbHNlLCBcIkVudGZlcm50IGRhcyBFbGVtZW50IGFuIGRlciBTdGVsbGUgaW5kZXguIFdJQ0hUSUc6IERhcyBlcnN0ZSBFbGVtZW50IGhhdCBkZW4gSW5kZXggMC4gRXMgaXN0IDAgPD0gaW5kZXggPCBzaXplKClcIikpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5hZGRNZXRob2QobmV3IE1ldGhvZChcImluZGV4T2ZcIiwgbmV3IFBhcmFtZXRlcmxpc3QoW1xyXG4gICAgICAgICAgICB7IGlkZW50aWZpZXI6IFwib1wiLCB0eXBlOiBvYmplY3RUeXBlLCBkZWNsYXJhdGlvbjogbnVsbCwgdXNhZ2VQb3NpdGlvbnM6IG51bGwsIGlzRmluYWw6IHRydWUgfVxyXG4gICAgICAgIF0pLCBpbnRQcmltaXRpdmVUeXBlLFxyXG4gICAgICAgICAgICBudWxsLCAgLy8gbm8gaW1wbGVtZW50YXRpb24hXHJcbiAgICAgICAgICAgIHRydWUsIGZhbHNlLCBcIkdpYnQgZGVuIEluZGV4IGRlcyBFbGVtZW50cyBvIHp1csO8Y2suIEdpYnQgLTEgenVyw7xjaywgd2VubiBkaWUgTGlzdGUgZGFzIEVsZW1lbnQgbyBuaWNodCBlbnRow6RsdC4gV0lDSFRJRzogRGFzIGVyc3RlIEVsZW1lbnQgaGF0IGRlbiBJbmRleCAwLCBkYXMgbGV0enRlIGRlbiBJbmRleCBzaXplKCkgLSAxLiBcIikpO1xyXG4gICAgfVxyXG5cclxufVxyXG4iXX0=