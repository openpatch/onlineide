export var NVisibility;
(function (NVisibility) {
    NVisibility[NVisibility["public"] = 0] = "public";
    NVisibility[NVisibility["protected"] = 1] = "protected";
    NVisibility[NVisibility["private"] = 2] = "private";
})(NVisibility || (NVisibility = {}));
;
export class NType {
    constructor() {
        this.usagePositions = new Map();
        this.documentation = "";
    }
    canCastTo(otherType) {
        return this.getCastExpression(otherType) != null;
    }
    isPrimitive() {
        return false;
    }
}
export class NMethodInfo {
    constructor() {
        this.usagePositions = new Map();
        this.documentation = "";
        this.isAbstract = false;
        this.isStatic = false;
        this.isConstructor = false;
        this.isVirtual = false; // true, if child class has method with same signature
        this.reserveStackForLocalVariables = 0;
    }
    implements(m) {
        if (this.identifier != m.identifier)
            return false;
        if (this.returnType == null || this.returnType.identifier == "void") {
            if (m.returnType != null && m.returnType.identifier != "void")
                return false;
        }
        else {
            if (m.returnType.isPrimitive()) {
                if (m.returnType != this.returnType) {
                    return false;
                }
            }
            else if (!this.returnType.canCastTo(m.returnType)) {
                return false;
            }
        }
        if (this.parameterlist.parameters.length != m.parameterlist.parameters.length)
            return false;
        for (let i = 0; i < this.parameterlist.parameters.length; i++) {
            let myParameter = this.parameterlist.parameters[i];
            let mParameter = m.parameterlist.parameters[i];
            if (mParameter.type.isPrimitive()) {
                if (mParameter.type != myParameter.type) {
                    return false;
                }
            }
            else if (!mParameter.type.canCastTo(myParameter.type))
                return false;
        }
        return true;
    }
    hasEllipsis() {
        if (this.parameterlist.parameters.length == 0)
            return false;
        return this.parameterlist.parameters[this.parameterlist.parameters.length - 1].isEllipsis;
    }
    getParameterType(index) {
        return this.parameterlist.parameters[index].type;
    }
    getParameter(index) {
        return this.parameterlist.parameters[index];
    }
}
export class NParameterlist {
    constructor(parameters) {
        this.parameters = parameters;
        this.computeId();
    }
    computeId() {
        this.id = "(";
        let i = 0;
        while (i < this.parameters.length) {
            this.id += this.parameters[i].type.identifier;
            if (i < this.parameters.length - 1) {
                this.id += ", ";
            }
            i++;
        }
        this.id += ")";
    }
}
export class NAttributeInfo {
    constructor(name, type, isStatic, visibility, isFinal, documentation) {
        this.identifier = name;
        this.type = type;
        this.isStatic = isStatic;
        this.visibility = visibility;
        this.isFinal = isFinal;
        this.usagePositions = new Map();
        this.documentation = documentation;
    }
}
//# sourceMappingURL=data:application/json;base64,