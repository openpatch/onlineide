import { TokenType } from "../compiler/lexer/Token.js";
import { NType } from "./NewType.js";
export class NClassLike extends NType {
    constructor() {
        super(...arguments);
        this.allExtendedImplementedTypes = [];
    }
    compute(operator, otherType, value1, value2) {
        return "null" + value2;
    }
    equals(otherType) {
        return otherType == this;
    }
}
export class NClass extends NClassLike {
    constructor() {
        super(...arguments);
        this.methodInfoList = [];
        this.attributeInfo = [];
        this.implements = [];
    }
    getCastExpression(otherType) {
        return { e: "$1", condition: "$1.__class.allExtendedImplementedTypes.indexOf(" + otherType.identifier + ") >= 0", errormessage: "Casting nach " + otherType.identifier + " nicht möglich." };
    }
    castTo(otherType, value) {
        return value;
    }
    getOperatorExpression(operator, otherType) {
        if (operator == TokenType.plus && otherType.identifier == "String") {
            // TODO: Aufruf von toString richtig compilieren
            return { e: '($1 == null ? "null" : $1.toString()) + $2' };
        }
        return null;
    }
    getOperatorResultType(operator, otherType) {
        if (operator == TokenType.plus && otherType.identifier == "String") {
            return otherType;
        }
        return null;
    }
    debugOutput(value, maxLength) {
        // Todo: Aufruf der toString-Methode
        return "[" + this.identifier + "]";
    }
    getAllMethods() {
        // TODO
        return null;
    }
}
export class NInterface extends NClassLike {
    constructor() {
        super(...arguments);
        this.methodInfoList = [];
    }
    getCastExpression(otherType) {
        return { e: "$1", condition: "$1.__class.allExtendedImplementedTypes.indexOf(" + otherType.identifier + ") >= 0", errormessage: "Casting nach " + otherType.identifier + " nicht möglich." };
    }
    castTo(otherType, value) {
        return value;
    }
    getOperatorExpression(operator, otherType) {
        if (operator == TokenType.plus && otherType.identifier == "String") {
            // TODO: Aufruf von toString richtig compilieren
            return { e: '($1 == null ? "null" : $1.toString()) + $2' };
        }
        return null;
    }
    getOperatorResultType(operator, otherType) {
        if (operator == TokenType.plus && otherType.identifier == "String") {
            return otherType;
        }
        return null;
    }
    debugOutput(value, maxLength) {
        // Todo: Aufruf der toString-Methode
        return "[" + this.identifier + "]";
    }
    getAllMethods() {
        // TODO
        return null;
    }
}
export class NGenericType extends NClassLike {
    getCastExpression(otherType) {
        return { e: "$1", condition: "$1.__class.allExtendedImplementedTypes.indexOf(" + otherType.identifier + ") >= 0",
            errormessage: "Casting nach " + otherType.identifier + " nicht möglich." };
    }
    castTo(otherType, value) {
        return value;
    }
    getOperatorExpression(operator, otherType) {
        if (operator == TokenType.plus && otherType.identifier == "String") {
            // TODO: Aufruf von toString richtig compilieren
            return { e: '($1 == null ? "null" : $1.toString()) + $2' };
        }
        return null;
    }
    getOperatorResultType(operator, otherType) {
        if (operator == TokenType.plus && otherType.identifier == "String") {
            return otherType;
        }
        return null;
    }
    debugOutput(value, maxLength) {
        // Todo: Aufruf der toString-Methode
        return "[" + this.identifier + "]";
    }
    getAllMethods() {
        // TODO
        return null;
    }
}
//# sourceMappingURL=data:application/json;base64,