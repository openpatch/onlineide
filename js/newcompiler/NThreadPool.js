var NThreadStatus;
(function (NThreadStatus) {
    NThreadStatus[NThreadStatus["running"] = 0] = "running";
    NThreadStatus[NThreadStatus["callMethod"] = 1] = "callMethod";
    NThreadStatus[NThreadStatus["exited"] = 2] = "exited";
    NThreadStatus[NThreadStatus["exitedWithException"] = 3] = "exitedWithException";
    NThreadStatus[NThreadStatus["exceptionCaught"] = 4] = "exceptionCaught";
})(NThreadStatus || (NThreadStatus = {}));
export class NThread {
    constructor(threadPool, state, initialStack, executeMode) {
        this.threadPool = threadPool;
        this.executeMode = executeMode;
        this.programStack = [];
        this.currentlyHeldSemaphors = [];
        this.programStack.push(state);
        this.currentProgramState = state;
        this.stack = initialStack;
    }
    /**
     * returns true if Thread exits
     */
    run(maxNumberOfSteps) {
        let numberOfSteps = 0;
        let stack = this.stack; // for performance reasons
        this.status = NThreadStatus.running;
        //@ts-ignore
        while (numberOfSteps < maxNumberOfSteps && this.status != NThreadStatus.exited) {
            this.status = NThreadStatus.running;
            // For performance reasons: store all necessary data in local variables
            let currentProgramState = this.currentProgramState;
            let stepIndex = currentProgramState.stepIndex;
            let currentStepList = currentProgramState.currentStepList;
            let stackBase = currentProgramState.stackBase;
            let helper = currentProgramState.program.helper;
            while (numberOfSteps < maxNumberOfSteps && this.status == NThreadStatus.running) {
                let step = currentStepList[stepIndex];
                stepIndex = step.run(stack, stackBase, helper, this);
                numberOfSteps++;
            }
            currentProgramState.stepIndex = stepIndex;
            // this currentProgram might by now not be the same as before this inner while-loop
            // because callMethod or returnFromMethod may have been called since from within 
            // step.run
        }
        return this.status;
    }
    throwException(exception) {
        let className = exception.__class.identifier;
        let catchingProgramState = null;
        let stackTrace = [];
        do {
            let ps = this.programStack[this.programStack.length - 1];
            for (let exInfo of ps.exceptionInfoList) {
                if (exInfo.types.indexOf(className) >= 0) {
                    catchingProgramState = ps;
                    stackTrace.push(Object.assign(ps));
                    ps.stepIndex = exInfo.stepIndex;
                    this.stack.splice(exInfo.stackSize, this.stack.length - exInfo.stackSize);
                    this.stack.push(exception);
                    this.status = NThreadStatus.exceptionCaught;
                    break;
                }
                else {
                    stackTrace.push(ps);
                    this.programStack.pop();
                }
            }
        } while (this.programStack.length > 0);
        if (this.programStack.length == 0) {
            this.stackTrace = stackTrace;
            this.exception = exception;
            this.status = NThreadStatus.exitedWithException;
        }
    }
    beginCatchExceptions(exceptionInfo) {
        exceptionInfo.stackSize = this.stack.length;
        this.currentProgramState.exceptionInfoList.push(exceptionInfo);
    }
    endCatchExceptions() {
        this.currentProgramState.exceptionInfoList.pop();
    }
    aquireSemaphor(semaphor) {
        if (!semaphor.aquire(this)) {
            this.status = NThreadStatus.exited;
        }
    }
    returnFromMethod(returnValue) {
        while (this.stack.length > this.currentProgramState.stackBase) {
            this.stack.pop();
        }
        if (returnValue != null)
            this.stack.push(returnValue);
        this.programStack.pop();
        if (this.programStack.length > 0) {
            this.currentProgramState = this.programStack[this.programStack.length - 1];
        }
        else {
            this.status = NThreadStatus.exited;
        }
    }
    callMethod(program, callbackAfterFinished) {
        let state = {
            program: program,
            currentStepList: this.executeMode == NExecuteMode.singleSteps ? program.stepsSingle : program.stepsMultiple,
            stackBase: this.stack.length - program.numberOfParamters - program.numberOfLocalVariables,
            stepIndex: 0,
            callbackAfterFinished: callbackAfterFinished,
            exceptionInfoList: []
        };
        this.programStack.push(state);
        this.currentProgramState = state;
        this.status = NThreadStatus.callMethod;
    }
}
export var NExecuteMode;
(function (NExecuteMode) {
    NExecuteMode[NExecuteMode["singleSteps"] = 0] = "singleSteps";
    NExecuteMode[NExecuteMode["multipleSteps"] = 1] = "multipleSteps";
})(NExecuteMode || (NExecuteMode = {}));
;
export class NThreadPool {
    constructor() {
        this.runningThreads = [];
        this.currentThreadIndex = 0;
    }
    run(numberOfStepsMax) {
        let stepsPerThread = Math.ceil(numberOfStepsMax / this.runningThreads.length);
        let numberOfSteps = 0;
        if (this.runningThreads.length == 0)
            return;
        while (numberOfSteps < numberOfStepsMax) {
            let currentThread = this.runningThreads[this.currentThreadIndex];
            let status = currentThread.run(stepsPerThread);
            numberOfSteps += stepsPerThread;
            switch (status) {
                case NThreadStatus.exited:
                    for (let semaphor of currentThread.currentlyHeldSemaphors) {
                        semaphor.release(currentThread);
                    }
                    this.runningThreads.splice(this.currentThreadIndex, 1);
                    if (this.runningThreads.length == 0) {
                        return NThreadStatus.exited;
                    }
                    break;
                case NThreadStatus.exitedWithException:
                    // TODO: Print Exception
                    return NThreadStatus.exitedWithException;
            }
            this.currentThreadIndex++;
            if (this.currentThreadIndex >= this.runningThreads.length) {
                this.currentThreadIndex = 0;
            }
        }
        return NThreadStatus.running;
    }
    createThread(program, executeMode, initialStack = [], callbackAfterFinished) {
        let state = {
            program: program,
            currentStepList: executeMode == NExecuteMode.singleSteps ? program.stepsSingle : program.stepsMultiple,
            stepIndex: -1,
            stackBase: 0,
            callbackAfterFinished: callbackAfterFinished,
            exceptionInfoList: []
        };
        this.runningThreads.push(new NThread(this, state, initialStack, executeMode));
    }
    suspendThread(thread) {
        let index = this.runningThreads.indexOf(thread);
        if (index >= 0) {
            this.runningThreads.splice(index, 1);
            if (this.currentThreadIndex >= index) {
                this.currentThreadIndex--;
            }
        }
    }
    restoreThread(thread) {
        this.runningThreads.push(thread);
    }
}
export class NSemaphor {
    constructor(threadPool, capacity) {
        this.threadPool = threadPool;
        this.capacity = capacity;
        this.runningThreads = [];
        this.waitingThreads = [];
        this.counter = capacity;
    }
    aquire(thread) {
        if (this.counter > 0) {
            this.counter--;
            this.runningThreads.push(thread);
            thread.currentlyHeldSemaphors.push(this);
            return true;
        }
        else {
            this.threadPool.suspendThread(thread);
            this.waitingThreads.push(thread);
            return false;
        }
    }
    release(thread) {
        let index = this.runningThreads.indexOf(thread);
        if (index >= 0) {
            this.runningThreads.splice(index, 1);
            if (this.waitingThreads.length > 0) {
                this.threadPool.restoreThread(this.waitingThreads.shift());
            }
            else {
                this.counter++;
            }
        }
        else {
            // Error: Thread had no token!
        }
    }
}
//# sourceMappingURL=data:application/json;base64,