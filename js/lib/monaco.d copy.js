/*!-----------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Type definitions for monaco-editor
 * Released under the MIT license
*-----------------------------------------------------------*/
/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"monaco.d copy.js","sourceRoot":"","sources":["../../../src/client/lib/monaco.d copy.ts"],"names":[],"mappings":"AAAA;;;;8DAI8D;AAC9D;;;gGAGgG","sourcesContent":["/*!-----------------------------------------------------------\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Type definitions for monaco-editor\n * Released under the MIT license\n*-----------------------------------------------------------*/\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\ndeclare let MonacoEnvironment: monaco.Environment | undefined;\n\ndeclare namespace monaco {\n\n    export type Thenable<T> = PromiseLike<T>;\n\n    export interface Environment {\n        globalAPI?: boolean;\n        baseUrl?: string;\n        getWorker?(workerId: string, label: string): Worker;\n        getWorkerUrl?(workerId: string, label: string): string;\n    }\n\n    export interface IDisposable {\n        dispose(): void;\n    }\n\n    export interface IEvent<T> {\n        (listener: (e: T) => any, thisArg?: any): IDisposable;\n    }\n\n    /**\n     * A helper that allows to emit and listen to typed events\n     */\n    export class Emitter<T> {\n        constructor();\n        readonly event: IEvent<T>;\n        fire(event: T): void;\n        dispose(): void;\n    }\n\n\n    export enum MarkerTag {\n        Unnecessary = 1,\n        Deprecated = 2\n    }\n\n    export enum MarkerSeverity {\n        Hint = 1,\n        Info = 2,\n        Warning = 4,\n        Error = 8\n    }\n\n    export class CancellationTokenSource {\n        constructor(parent?: CancellationToken);\n        get token(): CancellationToken;\n        cancel(): void;\n        dispose(cancel?: boolean): void;\n    }\n\n    export interface CancellationToken {\n        /**\n         * A flag signalling is cancellation has been requested.\n         */\n        readonly isCancellationRequested: boolean;\n        /**\n         * An event which fires when cancellation is requested. This event\n         * only ever fires `once` as cancellation can only happen once. Listeners\n         * that are registered after cancellation will be called (next event loop run),\n         * but also only once.\n         *\n         * @event\n         */\n        readonly onCancellationRequested: (listener: (e: any) => any, thisArgs?: any, disposables?: IDisposable[]) => IDisposable;\n    }\n    /**\n     * Uniform Resource Identifier (Uri) http://tools.ietf.org/html/rfc3986.\n     * This class is a simple parser which creates the basic component parts\n     * (http://tools.ietf.org/html/rfc3986#section-3) with minimal validation\n     * and encoding.\n     *\n     * ```txt\n     *       foo://example.com:8042/over/there?name=ferret#nose\n     *       \\_/   \\______________/\\_________/ \\_________/ \\__/\n     *        |           |            |            |        |\n     *     scheme     authority       path        query   fragment\n     *        |   _____________________|__\n     *       / \\ /                        \\\n     *       urn:example:animal:ferret:nose\n     * ```\n     */\n    export class Uri implements UriComponents {\n        static isUri(thing: any): thing is Uri;\n        /**\n         * scheme is the 'http' part of 'http://www.msft.com/some/path?query#fragment'.\n         * The part before the first colon.\n         */\n        readonly scheme: string;\n        /**\n         * authority is the 'www.msft.com' part of 'http://www.msft.com/some/path?query#fragment'.\n         * The part between the first double slashes and the next slash.\n         */\n        readonly authority: string;\n        /**\n         * path is the '/some/path' part of 'http://www.msft.com/some/path?query#fragment'.\n         */\n        readonly path: string;\n        /**\n         * query is the 'query' part of 'http://www.msft.com/some/path?query#fragment'.\n         */\n        readonly query: string;\n        /**\n         * fragment is the 'fragment' part of 'http://www.msft.com/some/path?query#fragment'.\n         */\n        readonly fragment: string;\n        /**\n         * Returns a string representing the corresponding file system path of this Uri.\n         * Will handle UNC paths, normalizes windows drive letters to lower-case, and uses the\n         * platform specific path separator.\n         *\n         * * Will *not* validate the path for invalid characters and semantics.\n         * * Will *not* look at the scheme of this Uri.\n         * * The result shall *not* be used for display purposes but for accessing a file on disk.\n         *\n         *\n         * The *difference* to `Uri#path` is the use of the platform specific separator and the handling\n         * of UNC paths. See the below sample of a file-uri with an authority (UNC path).\n         *\n         * ```ts\n            const u = Uri.parse('file://server/c$/folder/file.txt')\n            u.authority === 'server'\n            u.path === '/shares/c$/file.txt'\n            u.fsPath === '\\\\server\\c$\\folder\\file.txt'\n        ```\n         *\n         * Using `Uri#path` to read a file (using fs-apis) would not be enough because parts of the path,\n         * namely the server name, would be missing. Therefore `Uri#fsPath` exists - it's sugar to ease working\n         * with URIs that represent files on disk (`file` scheme).\n         */\n        get fsPath(): string;\n        with(change: {\n            scheme?: string;\n            authority?: string | null;\n            path?: string | null;\n            query?: string | null;\n            fragment?: string | null;\n        }): Uri;\n        /**\n         * Creates a new Uri from a string, e.g. `http://www.msft.com/some/path`,\n         * `file:///usr/home`, or `scheme:with/path`.\n         *\n         * @param value A string which represents an Uri (see `Uri#toString`).\n         */\n        static parse(value: string, _strict?: boolean): Uri;\n        /**\n         * Creates a new Uri from a file system path, e.g. `c:\\my\\files`,\n         * `/usr/home`, or `\\\\server\\share\\some\\path`.\n         *\n         * The *difference* between `Uri#parse` and `Uri#file` is that the latter treats the argument\n         * as path, not as stringified-uri. E.g. `Uri.file(path)` is **not the same as**\n         * `Uri.parse('file://' + path)` because the path might contain characters that are\n         * interpreted (# and ?). See the following sample:\n         * ```ts\n        const good = Uri.file('/coding/c#/project1');\n        good.scheme === 'file';\n        good.path === '/coding/c#/project1';\n        good.fragment === '';\n        const bad = Uri.parse('file://' + '/coding/c#/project1');\n        bad.scheme === 'file';\n        bad.path === '/coding/c'; // path is now broken\n        bad.fragment === '/project1';\n        ```\n         *\n         * @param path A file system path (see `Uri#fsPath`)\n         */\n        static file(path: string): Uri;\n        static from(components: {\n            scheme: string;\n            authority?: string;\n            path?: string;\n            query?: string;\n            fragment?: string;\n        }): Uri;\n        /**\n         * Join a Uri path with path fragments and normalizes the resulting path.\n         *\n         * @param uri The input Uri.\n         * @param pathFragment The path fragment to add to the Uri path.\n         * @returns The resulting Uri.\n         */\n        static joinPath(uri: Uri, ...pathFragment: string[]): Uri;\n        /**\n         * Creates a string representation for this Uri. It's guaranteed that calling\n         * `Uri.parse` with the result of this function creates an Uri which is equal\n         * to this Uri.\n         *\n         * * The result shall *not* be used for display purposes but for externalization or transport.\n         * * The result will be encoded using the percentage encoding and encoding happens mostly\n         * ignore the scheme-specific encoding rules.\n         *\n         * @param skipEncoding Do not encode the result, default is `false`\n         */\n        toString(skipEncoding?: boolean): string;\n        toJSON(): UriComponents;\n        static revive(data: UriComponents | Uri): Uri;\n        static revive(data: UriComponents | Uri | undefined): Uri | undefined;\n        static revive(data: UriComponents | Uri | null): Uri | null;\n        static revive(data: UriComponents | Uri | undefined | null): Uri | undefined | null;\n    }\n\n    export interface UriComponents {\n        scheme: string;\n        authority: string;\n        path: string;\n        query: string;\n        fragment: string;\n    }\n\n    /**\n     * Virtual Key Codes, the value does not hold any inherent meaning.\n     * Inspired somewhat from https://msdn.microsoft.com/en-us/library/windows/desktop/dd375731(v=vs.85).aspx\n     * But these are \"more general\", as they should work across browsers & OS`s.\n     */\n    export enum KeyCode {\n        DependsOnKbLayout = -1,\n        /**\n         * Placed first to cover the 0 value of the enum.\n         */\n        Unknown = 0,\n        Backspace = 1,\n        Tab = 2,\n        Enter = 3,\n        Shift = 4,\n        Ctrl = 5,\n        Alt = 6,\n        PauseBreak = 7,\n        CapsLock = 8,\n        Escape = 9,\n        Space = 10,\n        PageUp = 11,\n        PageDown = 12,\n        End = 13,\n        Home = 14,\n        LeftArrow = 15,\n        UpArrow = 16,\n        RightArrow = 17,\n        DownArrow = 18,\n        Insert = 19,\n        Delete = 20,\n        KEY_0 = 21,\n        KEY_1 = 22,\n        KEY_2 = 23,\n        KEY_3 = 24,\n        KEY_4 = 25,\n        KEY_5 = 26,\n        KEY_6 = 27,\n        KEY_7 = 28,\n        KEY_8 = 29,\n        KEY_9 = 30,\n        KEY_A = 31,\n        KEY_B = 32,\n        KEY_C = 33,\n        KEY_D = 34,\n        KEY_E = 35,\n        KEY_F = 36,\n        KEY_G = 37,\n        KEY_H = 38,\n        KEY_I = 39,\n        KEY_J = 40,\n        KEY_K = 41,\n        KEY_L = 42,\n        KEY_M = 43,\n        KEY_N = 44,\n        KEY_O = 45,\n        KEY_P = 46,\n        KEY_Q = 47,\n        KEY_R = 48,\n        KEY_S = 49,\n        KEY_T = 50,\n        KEY_U = 51,\n        KEY_V = 52,\n        KEY_W = 53,\n        KEY_X = 54,\n        KEY_Y = 55,\n        KEY_Z = 56,\n        Meta = 57,\n        ContextMenu = 58,\n        F1 = 59,\n        F2 = 60,\n        F3 = 61,\n        F4 = 62,\n        F5 = 63,\n        F6 = 64,\n        F7 = 65,\n        F8 = 66,\n        F9 = 67,\n        F10 = 68,\n        F11 = 69,\n        F12 = 70,\n        F13 = 71,\n        F14 = 72,\n        F15 = 73,\n        F16 = 74,\n        F17 = 75,\n        F18 = 76,\n        F19 = 77,\n        NumLock = 78,\n        ScrollLock = 79,\n        /**\n         * Used for miscellaneous characters; it can vary by keyboard.\n         * For the US standard keyboard, the ';:' key\n         */\n        US_SEMICOLON = 80,\n        /**\n         * For any country/region, the '+' key\n         * For the US standard keyboard, the '=+' key\n         */\n        US_EQUAL = 81,\n        /**\n         * For any country/region, the ',' key\n         * For the US standard keyboard, the ',<' key\n         */\n        US_COMMA = 82,\n        /**\n         * For any country/region, the '-' key\n         * For the US standard keyboard, the '-_' key\n         */\n        US_MINUS = 83,\n        /**\n         * For any country/region, the '.' key\n         * For the US standard keyboard, the '.>' key\n         */\n        US_DOT = 84,\n        /**\n         * Used for miscellaneous characters; it can vary by keyboard.\n         * For the US standard keyboard, the '/?' key\n         */\n        US_SLASH = 85,\n        /**\n         * Used for miscellaneous characters; it can vary by keyboard.\n         * For the US standard keyboard, the '`~' key\n         */\n        US_BACKTICK = 86,\n        /**\n         * Used for miscellaneous characters; it can vary by keyboard.\n         * For the US standard keyboard, the '[{' key\n         */\n        US_OPEN_SQUARE_BRACKET = 87,\n        /**\n         * Used for miscellaneous characters; it can vary by keyboard.\n         * For the US standard keyboard, the '\\|' key\n         */\n        US_BACKSLASH = 88,\n        /**\n         * Used for miscellaneous characters; it can vary by keyboard.\n         * For the US standard keyboard, the ']}' key\n         */\n        US_CLOSE_SQUARE_BRACKET = 89,\n        /**\n         * Used for miscellaneous characters; it can vary by keyboard.\n         * For the US standard keyboard, the ''\"' key\n         */\n        US_QUOTE = 90,\n        /**\n         * Used for miscellaneous characters; it can vary by keyboard.\n         */\n        OEM_8 = 91,\n        /**\n         * Either the angle bracket key or the backslash key on the RT 102-key keyboard.\n         */\n        OEM_102 = 92,\n        NUMPAD_0 = 93,\n        NUMPAD_1 = 94,\n        NUMPAD_2 = 95,\n        NUMPAD_3 = 96,\n        NUMPAD_4 = 97,\n        NUMPAD_5 = 98,\n        NUMPAD_6 = 99,\n        NUMPAD_7 = 100,\n        NUMPAD_8 = 101,\n        NUMPAD_9 = 102,\n        NUMPAD_MULTIPLY = 103,\n        NUMPAD_ADD = 104,\n        NUMPAD_SEPARATOR = 105,\n        NUMPAD_SUBTRACT = 106,\n        NUMPAD_DECIMAL = 107,\n        NUMPAD_DIVIDE = 108,\n        /**\n         * Cover all key codes when IME is processing input.\n         */\n        KEY_IN_COMPOSITION = 109,\n        ABNT_C1 = 110,\n        ABNT_C2 = 111,\n        /**\n         * Placed last to cover the length of the enum.\n         * Please do not depend on this value!\n         */\n        MAX_VALUE = 112\n    }\n    export class KeyMod {\n        static readonly CtrlCmd: number;\n        static readonly Shift: number;\n        static readonly Alt: number;\n        static readonly WinCtrl: number;\n        static chord(firstPart: number, secondPart: number): number;\n    }\n\n    export interface IMarkdownString {\n        readonly value: string;\n        readonly isTrusted?: boolean;\n        readonly supportThemeIcons?: boolean;\n        uris?: {\n            [href: string]: UriComponents;\n        };\n    }\n\n    export interface IKeyboardEvent {\n        readonly _standardKeyboardEventBrand: true;\n        readonly browserEvent: KeyboardEvent;\n        readonly target: HTMLElement;\n        readonly ctrlKey: boolean;\n        readonly shiftKey: boolean;\n        readonly altKey: boolean;\n        readonly metaKey: boolean;\n        readonly keyCode: KeyCode;\n        readonly code: string;\n        equals(keybinding: number): boolean;\n        preventDefault(): void;\n        stopPropagation(): void;\n    }\n    export interface IMouseEvent {\n        readonly browserEvent: MouseEvent;\n        readonly leftButton: boolean;\n        readonly middleButton: boolean;\n        readonly rightButton: boolean;\n        readonly buttons: number;\n        readonly target: HTMLElement;\n        readonly detail: number;\n        readonly posx: number;\n        readonly posy: number;\n        readonly ctrlKey: boolean;\n        readonly shiftKey: boolean;\n        readonly altKey: boolean;\n        readonly metaKey: boolean;\n        readonly timestamp: number;\n        preventDefault(): void;\n        stopPropagation(): void;\n    }\n\n    export interface IScrollEvent {\n        readonly scrollTop: number;\n        readonly scrollLeft: number;\n        readonly scrollWidth: number;\n        readonly scrollHeight: number;\n        readonly scrollTopChanged: boolean;\n        readonly scrollLeftChanged: boolean;\n        readonly scrollWidthChanged: boolean;\n        readonly scrollHeightChanged: boolean;\n    }\n    /**\n     * A position in the editor. This interface is suitable for serialization.\n     */\n    export interface IPosition {\n        /**\n         * line number (starts at 1)\n         */\n        readonly lineNumber: number;\n        /**\n         * column (the first character in a line is between column 1 and column 2)\n         */\n        readonly column: number;\n    }\n\n    /**\n     * A position in the editor.\n     */\n    export class Position {\n        /**\n         * line number (starts at 1)\n         */\n        readonly lineNumber: number;\n        /**\n         * column (the first character in a line is between column 1 and column 2)\n         */\n        readonly column: number;\n        constructor(lineNumber: number, column: number);\n        /**\n         * Create a new position from this position.\n         *\n         * @param newLineNumber new line number\n         * @param newColumn new column\n         */\n        with(newLineNumber?: number, newColumn?: number): Position;\n        /**\n         * Derive a new position from this position.\n         *\n         * @param deltaLineNumber line number delta\n         * @param deltaColumn column delta\n         */\n        delta(deltaLineNumber?: number, deltaColumn?: number): Position;\n        /**\n         * Test if this position equals other position\n         */\n        equals(other: IPosition): boolean;\n        /**\n         * Test if position `a` equals position `b`\n         */\n        static equals(a: IPosition | null, b: IPosition | null): boolean;\n        /**\n         * Test if this position is before other position.\n         * If the two positions are equal, the result will be false.\n         */\n        isBefore(other: IPosition): boolean;\n        /**\n         * Test if position `a` is before position `b`.\n         * If the two positions are equal, the result will be false.\n         */\n        static isBefore(a: IPosition, b: IPosition): boolean;\n        /**\n         * Test if this position is before other position.\n         * If the two positions are equal, the result will be true.\n         */\n        isBeforeOrEqual(other: IPosition): boolean;\n        /**\n         * Test if position `a` is before position `b`.\n         * If the two positions are equal, the result will be true.\n         */\n        static isBeforeOrEqual(a: IPosition, b: IPosition): boolean;\n        /**\n         * A function that compares positions, useful for sorting\n         */\n        static compare(a: IPosition, b: IPosition): number;\n        /**\n         * Clone this position.\n         */\n        clone(): Position;\n        /**\n         * Convert to a human-readable representation.\n         */\n        toString(): string;\n        /**\n         * Create a `Position` from an `IPosition`.\n         */\n        static lift(pos: IPosition): Position;\n        /**\n         * Test if `obj` is an `IPosition`.\n         */\n        static isIPosition(obj: any): obj is IPosition;\n    }\n\n    /**\n     * A range in the editor. This interface is suitable for serialization.\n     */\n    export interface IRange {\n        /**\n         * Line number on which the range starts (starts at 1).\n         */\n        readonly startLineNumber: number;\n        /**\n         * Column on which the range starts in line `startLineNumber` (starts at 1).\n         */\n        readonly startColumn: number;\n        /**\n         * Line number on which the range ends.\n         */\n        readonly endLineNumber: number;\n        /**\n         * Column on which the range ends in line `endLineNumber`.\n         */\n        readonly endColumn: number;\n    }\n\n    /**\n     * A range in the editor. (startLineNumber,startColumn) is <= (endLineNumber,endColumn)\n     */\n    export class Range {\n        /**\n         * Line number on which the range starts (starts at 1).\n         */\n        readonly startLineNumber: number;\n        /**\n         * Column on which the range starts in line `startLineNumber` (starts at 1).\n         */\n        readonly startColumn: number;\n        /**\n         * Line number on which the range ends.\n         */\n        readonly endLineNumber: number;\n        /**\n         * Column on which the range ends in line `endLineNumber`.\n         */\n        readonly endColumn: number;\n        constructor(startLineNumber: number, startColumn: number, endLineNumber: number, endColumn: number);\n        /**\n         * Test if this range is empty.\n         */\n        isEmpty(): boolean;\n        /**\n         * Test if `range` is empty.\n         */\n        static isEmpty(range: IRange): boolean;\n        /**\n         * Test if position is in this range. If the position is at the edges, will return true.\n         */\n        containsPosition(position: IPosition): boolean;\n        /**\n         * Test if `position` is in `range`. If the position is at the edges, will return true.\n         */\n        static containsPosition(range: IRange, position: IPosition): boolean;\n        /**\n         * Test if range is in this range. If the range is equal to this range, will return true.\n         */\n        containsRange(range: IRange): boolean;\n        /**\n         * Test if `otherRange` is in `range`. If the ranges are equal, will return true.\n         */\n        static containsRange(range: IRange, otherRange: IRange): boolean;\n        /**\n         * Test if `range` is strictly in this range. `range` must start after and end before this range for the result to be true.\n         */\n        strictContainsRange(range: IRange): boolean;\n        /**\n         * Test if `otherRange` is strinctly in `range` (must start after, and end before). If the ranges are equal, will return false.\n         */\n        static strictContainsRange(range: IRange, otherRange: IRange): boolean;\n        /**\n         * A reunion of the two ranges.\n         * The smallest position will be used as the start point, and the largest one as the end point.\n         */\n        plusRange(range: IRange): Range;\n        /**\n         * A reunion of the two ranges.\n         * The smallest position will be used as the start point, and the largest one as the end point.\n         */\n        static plusRange(a: IRange, b: IRange): Range;\n        /**\n         * A intersection of the two ranges.\n         */\n        intersectRanges(range: IRange): Range | null;\n        /**\n         * A intersection of the two ranges.\n         */\n        static intersectRanges(a: IRange, b: IRange): Range | null;\n        /**\n         * Test if this range equals other.\n         */\n        equalsRange(other: IRange | null): boolean;\n        /**\n         * Test if range `a` equals `b`.\n         */\n        static equalsRange(a: IRange | null, b: IRange | null): boolean;\n        /**\n         * Return the end position (which will be after or equal to the start position)\n         */\n        getEndPosition(): Position;\n        /**\n         * Return the end position (which will be after or equal to the start position)\n         */\n        static getEndPosition(range: IRange): Position;\n        /**\n         * Return the start position (which will be before or equal to the end position)\n         */\n        getStartPosition(): Position;\n        /**\n         * Return the start position (which will be before or equal to the end position)\n         */\n        static getStartPosition(range: IRange): Position;\n        /**\n         * Transform to a user presentable string representation.\n         */\n        toString(): string;\n        /**\n         * Create a new range using this range's start position, and using endLineNumber and endColumn as the end position.\n         */\n        setEndPosition(endLineNumber: number, endColumn: number): Range;\n        /**\n         * Create a new range using this range's end position, and using startLineNumber and startColumn as the start position.\n         */\n        setStartPosition(startLineNumber: number, startColumn: number): Range;\n        /**\n         * Create a new empty range using this range's start position.\n         */\n        collapseToStart(): Range;\n        /**\n         * Create a new empty range using this range's start position.\n         */\n        static collapseToStart(range: IRange): Range;\n        static fromPositions(start: IPosition, end?: IPosition): Range;\n        /**\n         * Create a `Range` from an `IRange`.\n         */\n        static lift(range: undefined | null): null;\n        static lift(range: IRange): Range;\n        /**\n         * Test if `obj` is an `IRange`.\n         */\n        static isIRange(obj: any): obj is IRange;\n        /**\n         * Test if the two ranges are touching in any way.\n         */\n        static areIntersectingOrTouching(a: IRange, b: IRange): boolean;\n        /**\n         * Test if the two ranges are intersecting. If the ranges are touching it returns true.\n         */\n        static areIntersecting(a: IRange, b: IRange): boolean;\n        /**\n         * A function that compares ranges, useful for sorting ranges\n         * It will first compare ranges on the startPosition and then on the endPosition\n         */\n        static compareRangesUsingStarts(a: IRange | null | undefined, b: IRange | null | undefined): number;\n        /**\n         * A function that compares ranges, useful for sorting ranges\n         * It will first compare ranges on the endPosition and then on the startPosition\n         */\n        static compareRangesUsingEnds(a: IRange, b: IRange): number;\n        /**\n         * Test if the range spans multiple lines.\n         */\n        static spansMultipleLines(range: IRange): boolean;\n    }\n\n    /**\n     * A selection in the editor.\n     * The selection is a range that has an orientation.\n     */\n    export interface ISelection {\n        /**\n         * The line number on which the selection has started.\n         */\n        readonly selectionStartLineNumber: number;\n        /**\n         * The column on `selectionStartLineNumber` where the selection has started.\n         */\n        readonly selectionStartColumn: number;\n        /**\n         * The line number on which the selection has ended.\n         */\n        readonly positionLineNumber: number;\n        /**\n         * The column on `positionLineNumber` where the selection has ended.\n         */\n        readonly positionColumn: number;\n    }\n\n    /**\n     * A selection in the editor.\n     * The selection is a range that has an orientation.\n     */\n    export class Selection extends Range {\n        /**\n         * The line number on which the selection has started.\n         */\n        readonly selectionStartLineNumber: number;\n        /**\n         * The column on `selectionStartLineNumber` where the selection has started.\n         */\n        readonly selectionStartColumn: number;\n        /**\n         * The line number on which the selection has ended.\n         */\n        readonly positionLineNumber: number;\n        /**\n         * The column on `positionLineNumber` where the selection has ended.\n         */\n        readonly positionColumn: number;\n        constructor(selectionStartLineNumber: number, selectionStartColumn: number, positionLineNumber: number, positionColumn: number);\n        /**\n         * Transform to a human-readable representation.\n         */\n        toString(): string;\n        /**\n         * Test if equals other selection.\n         */\n        equalsSelection(other: ISelection): boolean;\n        /**\n         * Test if the two selections are equal.\n         */\n        static selectionsEqual(a: ISelection, b: ISelection): boolean;\n        /**\n         * Get directions (LTR or RTL).\n         */\n        getDirection(): SelectionDirection;\n        /**\n         * Create a new selection with a different `positionLineNumber` and `positionColumn`.\n         */\n        setEndPosition(endLineNumber: number, endColumn: number): Selection;\n        /**\n         * Get the position at `positionLineNumber` and `positionColumn`.\n         */\n        getPosition(): Position;\n        /**\n         * Create a new selection with a different `selectionStartLineNumber` and `selectionStartColumn`.\n         */\n        setStartPosition(startLineNumber: number, startColumn: number): Selection;\n        /**\n         * Create a `Selection` from one or two positions\n         */\n        static fromPositions(start: IPosition, end?: IPosition): Selection;\n        /**\n         * Create a `Selection` from an `ISelection`.\n         */\n        static liftSelection(sel: ISelection): Selection;\n        /**\n         * `a` equals `b`.\n         */\n        static selectionsArrEqual(a: ISelection[], b: ISelection[]): boolean;\n        /**\n         * Test if `obj` is an `ISelection`.\n         */\n        static isISelection(obj: any): obj is ISelection;\n        /**\n         * Create with a direction.\n         */\n        static createWithDirection(startLineNumber: number, startColumn: number, endLineNumber: number, endColumn: number, direction: SelectionDirection): Selection;\n    }\n\n    /**\n     * The direction of a selection.\n     */\n    export enum SelectionDirection {\n        /**\n         * The selection starts above where it ends.\n         */\n        LTR = 0,\n        /**\n         * The selection starts below where it ends.\n         */\n        RTL = 1\n    }\n\n    export class Token {\n        _tokenBrand: void;\n        readonly offset: number;\n        readonly type: string;\n        readonly language: string;\n        constructor(offset: number, type: string, language: string);\n        toString(): string;\n    }\n}\n\ndeclare namespace monaco.editor {\n\n    export interface IDiffNavigator {\n        canNavigate(): boolean;\n        next(): void;\n        previous(): void;\n        dispose(): void;\n    }\n\n    /**\n     * Create a new editor under `domElement`.\n     * `domElement` should be empty (not contain other dom nodes).\n     * The editor will read the size of `domElement`.\n     */\n    export function create(domElement: HTMLElement, options?: IStandaloneEditorConstructionOptions, override?: IEditorOverrideServices): IStandaloneCodeEditor;\n\n    /**\n     * Emitted when an editor is created.\n     * Creating a diff editor might cause this listener to be invoked with the two editors.\n     * @event\n     */\n    export function onDidCreateEditor(listener: (codeEditor: ICodeEditor) => void): IDisposable;\n\n    /**\n     * Create a new diff editor under `domElement`.\n     * `domElement` should be empty (not contain other dom nodes).\n     * The editor will read the size of `domElement`.\n     */\n    export function createDiffEditor(domElement: HTMLElement, options?: IDiffEditorConstructionOptions, override?: IEditorOverrideServices): IStandaloneDiffEditor;\n\n    export interface IDiffNavigatorOptions {\n        readonly followsCaret?: boolean;\n        readonly ignoreCharChanges?: boolean;\n        readonly alwaysRevealFirst?: boolean;\n    }\n\n    export function createDiffNavigator(diffEditor: IStandaloneDiffEditor, opts?: IDiffNavigatorOptions): IDiffNavigator;\n\n    /**\n     * Create a new editor model.\n     * You can specify the language that should be set for this model or let the language be inferred from the `uri`.\n     */\n    export function createModel(value: string, language?: string, uri?: Uri): ITextModel;\n\n    /**\n     * Change the language for a model.\n     */\n    export function setModelLanguage(model: ITextModel, languageId: string): void;\n\n    /**\n     * Set the markers for a model.\n     */\n    export function setModelMarkers(model: ITextModel, owner: string, markers: IMarkerData[]): void;\n\n    /**\n     * Get markers for owner and/or resource\n     *\n     * @returns list of markers\n     */\n    export function getModelMarkers(filter: {\n        owner?: string;\n        resource?: Uri;\n        take?: number;\n    }): IMarker[];\n\n    /**\n     * Emitted when markers change for a model.\n     * @event\n     */\n    export function onDidChangeMarkers(listener: (e: readonly Uri[]) => void): IDisposable;\n\n    /**\n     * Get the model that has `uri` if it exists.\n     */\n    export function getModel(uri: Uri): ITextModel | null;\n\n    /**\n     * Get all the created models.\n     */\n    export function getModels(): ITextModel[];\n\n    /**\n     * Emitted when a model is created.\n     * @event\n     */\n    export function onDidCreateModel(listener: (model: ITextModel) => void): IDisposable;\n\n    /**\n     * Emitted right before a model is disposed.\n     * @event\n     */\n    export function onWillDisposeModel(listener: (model: ITextModel) => void): IDisposable;\n\n    /**\n     * Emitted when a different language is set to a model.\n     * @event\n     */\n    export function onDidChangeModelLanguage(listener: (e: {\n        readonly model: ITextModel;\n        readonly oldLanguage: string;\n    }) => void): IDisposable;\n\n    /**\n     * Create a new web worker that has model syncing capabilities built in.\n     * Specify an AMD module to load that will `create` an object that will be proxied.\n     */\n    export function createWebWorker<T>(opts: IWebWorkerOptions): MonacoWebWorker<T>;\n\n    /**\n     * Colorize the contents of `domNode` using attribute `data-lang`.\n     */\n    export function colorizeElement(domNode: HTMLElement, options: IColorizerElementOptions): Promise<void>;\n\n    /**\n     * Colorize `text` using language `languageId`.\n     */\n    export function colorize(text: string, languageId: string, options: IColorizerOptions): Promise<string>;\n\n    /**\n     * Colorize a line in a model.\n     */\n    export function colorizeModelLine(model: ITextModel, lineNumber: number, tabSize?: number): string;\n\n    /**\n     * Tokenize `text` using language `languageId`\n     */\n    export function tokenize(text: string, languageId: string): Token[][];\n\n    /**\n     * Define a new theme or update an existing theme.\n     */\n    export function defineTheme(themeName: string, themeData: IStandaloneThemeData): void;\n\n    /**\n     * Switches to a theme.\n     */\n    export function setTheme(themeName: string): void;\n\n    /**\n     * Clears all cached font measurements and triggers re-measurement.\n     */\n    export function remeasureFonts(): void;\n\n    /**\n     * Register a command.\n     */\n    export function registerCommand(id: string, handler: (accessor: any, ...args: any[]) => void): IDisposable;\n\n    export type BuiltinTheme = 'vs' | 'vs-dark' | 'hc-black';\n\n    export interface IStandaloneThemeData {\n        base: BuiltinTheme;\n        inherit: boolean;\n        rules: ITokenThemeRule[];\n        encodedTokensColors?: string[];\n        colors: IColors;\n    }\n\n    export type IColors = {\n        [colorId: string]: string;\n    };\n\n    export interface ITokenThemeRule {\n        token: string;\n        foreground?: string;\n        background?: string;\n        fontStyle?: string;\n    }\n\n    /**\n     * A web worker that can provide a proxy to an arbitrary file.\n     */\n    export interface MonacoWebWorker<T> {\n        /**\n         * Terminate the web worker, thus invalidating the returned proxy.\n         */\n        dispose(): void;\n        /**\n         * Get a proxy to the arbitrary loaded code.\n         */\n        getProxy(): Promise<T>;\n        /**\n         * Synchronize (send) the models at `resources` to the web worker,\n         * making them available in the monaco.worker.getMirrorModels().\n         */\n        withSyncedResources(resources: Uri[]): Promise<T>;\n    }\n\n    export interface IWebWorkerOptions {\n        /**\n         * The AMD moduleId to load.\n         * It should export a function `create` that should return the exported proxy.\n         */\n        moduleId: string;\n        /**\n         * The data to send over when calling create on the module.\n         */\n        createData?: any;\n        /**\n         * A label to be used to identify the web worker for debugging purposes.\n         */\n        label?: string;\n        /**\n         * An object that can be used by the web worker to make calls back to the main thread.\n         */\n        host?: any;\n        /**\n         * Keep idle models.\n         * Defaults to false, which means that idle models will stop syncing after a while.\n         */\n        keepIdleModels?: boolean;\n    }\n\n    /**\n     * Description of an action contribution\n     */\n    export interface IActionDescriptor {\n        /**\n         * An unique identifier of the contributed action.\n         */\n        id: string;\n        /**\n         * A label of the action that will be presented to the user.\n         */\n        label: string;\n        /**\n         * Precondition rule.\n         */\n        precondition?: string;\n        /**\n         * An array of keybindings for the action.\n         */\n        keybindings?: number[];\n        /**\n         * The keybinding rule (condition on top of precondition).\n         */\n        keybindingContext?: string;\n        /**\n         * Control if the action should show up in the context menu and where.\n         * The context menu of the editor has these default:\n         *   navigation - The navigation group comes first in all cases.\n         *   1_modification - This group comes next and contains commands that modify your code.\n         *   9_cutcopypaste - The last default group with the basic editing commands.\n         * You can also create your own group.\n         * Defaults to null (don't show in context menu).\n         */\n        contextMenuGroupId?: string;\n        /**\n         * Control the order in the context menu group.\n         */\n        contextMenuOrder?: number;\n        /**\n         * Method that will be executed when the action is triggered.\n         * @param editor The editor instance is passed in as a convenience\n         */\n        run(editor: ICodeEditor, ...args: any[]): void | Promise<void>;\n    }\n\n    /**\n     * Options which apply for all editors.\n     */\n    export interface IGlobalEditorOptions {\n        /**\n         * The number of spaces a tab is equal to.\n         * This setting is overridden based on the file contents when `detectIndentation` is on.\n         * Defaults to 4.\n         */\n        tabSize?: number;\n        /**\n         * Insert spaces when pressing `Tab`.\n         * This setting is overridden based on the file contents when `detectIndentation` is on.\n         * Defaults to true.\n         */\n        insertSpaces?: boolean;\n        /**\n         * Controls whether `tabSize` and `insertSpaces` will be automatically detected when a file is opened based on the file contents.\n         * Defaults to true.\n         */\n        detectIndentation?: boolean;\n        /**\n         * Remove trailing auto inserted whitespace.\n         * Defaults to true.\n         */\n        trimAutoWhitespace?: boolean;\n        /**\n         * Special handling for large files to disable certain memory intensive features.\n         * Defaults to true.\n         */\n        largeFileOptimizations?: boolean;\n        /**\n         * Controls whether completions should be computed based on words in the document.\n         * Defaults to true.\n         */\n        wordBasedSuggestions?: boolean;\n        /**\n         * Controls whether word based completions should be included from opened documents of the same language or any language.\n         */\n        wordBasedSuggestionsOnlySameLanguage?: boolean;\n        /**\n         * Controls whether the semanticHighlighting is shown for the languages that support it.\n         * true: semanticHighlighting is enabled for all themes\n         * false: semanticHighlighting is disabled for all themes\n         * 'configuredByTheme': semanticHighlighting is controlled by the current color theme's semanticHighlighting setting.\n         * Defaults to 'byTheme'.\n         */\n        'semanticHighlighting.enabled'?: true | false | 'configuredByTheme';\n        /**\n         * Keep peek editors open even when double clicking their content or when hitting `Escape`.\n         * Defaults to false.\n         */\n        stablePeek?: boolean;\n        /**\n         * Lines above this length will not be tokenized for performance reasons.\n         * Defaults to 20000.\n         */\n        maxTokenizationLineLength?: number;\n        /**\n         * Theme to be used for rendering.\n         * The current out-of-the-box available themes are: 'vs' (default), 'vs-dark', 'hc-black'.\n         * You can create custom themes via `monaco.editor.defineTheme`.\n         * To switch a theme, use `monaco.editor.setTheme`.\n         * **NOTE**: The theme might be overwritten if the OS is in high contrast mode, unless `autoDetectHighContrast` is set to false.\n         */\n        theme?: string;\n        /**\n         * If enabled, will automatically change to high contrast theme if the OS is using a high contrast theme.\n         * Defaults to true.\n         */\n        autoDetectHighContrast?: boolean;\n    }\n\n    /**\n     * The options to create an editor.\n     */\n    export interface IStandaloneEditorConstructionOptions extends IEditorConstructionOptions, IGlobalEditorOptions {\n        /**\n         * The initial model associated with this code editor.\n         */\n        model?: ITextModel | null;\n        /**\n         * The initial value of the auto created model in the editor.\n         * To not create automatically a model, use `model: null`.\n         */\n        value?: string;\n        /**\n         * The initial language of the auto created model in the editor.\n         * To not create automatically a model, use `model: null`.\n         */\n        language?: string;\n        /**\n         * Initial theme to be used for rendering.\n         * The current out-of-the-box available themes are: 'vs' (default), 'vs-dark', 'hc-black'.\n         * You can create custom themes via `monaco.editor.defineTheme`.\n         * To switch a theme, use `monaco.editor.setTheme`.\n         * **NOTE**: The theme might be overwritten if the OS is in high contrast mode, unless `autoDetectHighContrast` is set to false.\n         */\n        theme?: string;\n        /**\n         * If enabled, will automatically change to high contrast theme if the OS is using a high contrast theme.\n         * Defaults to true.\n         */\n        autoDetectHighContrast?: boolean;\n        /**\n         * An URL to open when Ctrl+H (Windows and Linux) or Cmd+H (OSX) is pressed in\n         * the accessibility help dialog in the editor.\n         *\n         * Defaults to \"https://go.microsoft.com/fwlink/?linkid=852450\"\n         */\n        accessibilityHelpUrl?: string;\n    }\n\n    /**\n     * The options to create a diff editor.\n     */\n    export interface IDiffEditorConstructionOptions extends IDiffEditorOptions {\n        /**\n         * Initial theme to be used for rendering.\n         * The current out-of-the-box available themes are: 'vs' (default), 'vs-dark', 'hc-black'.\n         * You can create custom themes via `monaco.editor.defineTheme`.\n         * To switch a theme, use `monaco.editor.setTheme`.\n         * **NOTE**: The theme might be overwritten if the OS is in high contrast mode, unless `autoDetectHighContrast` is set to false.\n         */\n        theme?: string;\n        /**\n         * If enabled, will automatically change to high contrast theme if the OS is using a high contrast theme.\n         * Defaults to true.\n         */\n        autoDetectHighContrast?: boolean;\n    }\n\n    export interface IStandaloneCodeEditor extends ICodeEditor {\n        updateOptions(newOptions: IEditorOptions & IGlobalEditorOptions): void;\n        addCommand(keybinding: number, handler: ICommandHandler, context?: string): string | null;\n        createContextKey<T>(key: string, defaultValue: T): IContextKey<T>;\n        addAction(descriptor: IActionDescriptor): IDisposable;\n    }\n\n    export interface IStandaloneDiffEditor extends IDiffEditor {\n        addCommand(keybinding: number, handler: ICommandHandler, context?: string): string | null;\n        createContextKey<T>(key: string, defaultValue: T): IContextKey<T>;\n        addAction(descriptor: IActionDescriptor): IDisposable;\n        getOriginalEditor(): IStandaloneCodeEditor;\n        getModifiedEditor(): IStandaloneCodeEditor;\n    }\n    export interface ICommandHandler {\n        (...args: any[]): void;\n    }\n\n    export interface IContextKey<T> {\n        set(value: T): void;\n        reset(): void;\n        get(): T | undefined;\n    }\n\n    export interface IEditorOverrideServices {\n        [index: string]: any;\n    }\n\n    export interface IMarker {\n        owner: string;\n        resource: Uri;\n        severity: MarkerSeverity;\n        code?: string | {\n            value: string;\n            target: Uri;\n        };\n        message: string;\n        source?: string;\n        startLineNumber: number;\n        startColumn: number;\n        endLineNumber: number;\n        endColumn: number;\n        relatedInformation?: IRelatedInformation[];\n        tags?: MarkerTag[];\n    }\n\n    /**\n     * A structure defining a problem/warning/etc.\n     */\n    export interface IMarkerData {\n        code?: string | {\n            value: string;\n            target: Uri;\n        };\n        severity: MarkerSeverity;\n        message: string;\n        source?: string;\n        startLineNumber: number;\n        startColumn: number;\n        endLineNumber: number;\n        endColumn: number;\n        relatedInformation?: IRelatedInformation[];\n        tags?: MarkerTag[];\n    }\n\n    /**\n     *\n     */\n    export interface IRelatedInformation {\n        resource: Uri;\n        message: string;\n        startLineNumber: number;\n        startColumn: number;\n        endLineNumber: number;\n        endColumn: number;\n    }\n\n    export interface IColorizerOptions {\n        tabSize?: number;\n    }\n\n    export interface IColorizerElementOptions extends IColorizerOptions {\n        theme?: string;\n        mimeType?: string;\n    }\n\n    export enum ScrollbarVisibility {\n        Auto = 1,\n        Hidden = 2,\n        Visible = 3\n    }\n\n    export interface ThemeColor {\n        id: string;\n    }\n\n    /**\n     * Vertical Lane in the overview ruler of the editor.\n     */\n    export enum OverviewRulerLane {\n        Left = 1,\n        Center = 2,\n        Right = 4,\n        Full = 7\n    }\n\n    /**\n     * Position in the minimap to render the decoration.\n     */\n    export enum MinimapPosition {\n        Inline = 1,\n        Gutter = 2\n    }\n\n    export interface IDecorationOptions {\n        /**\n         * CSS color to render.\n         * e.g.: rgba(100, 100, 100, 0.5) or a color from the color registry\n         */\n        color: string | ThemeColor | undefined;\n        /**\n         * CSS color to render.\n         * e.g.: rgba(100, 100, 100, 0.5) or a color from the color registry\n         */\n        darkColor?: string | ThemeColor;\n    }\n\n    /**\n     * Options for rendering a model decoration in the overview ruler.\n     */\n    export interface IModelDecorationOverviewRulerOptions extends IDecorationOptions {\n        /**\n         * The position in the overview ruler.\n         */\n        position: OverviewRulerLane;\n    }\n\n    /**\n     * Options for rendering a model decoration in the overview ruler.\n     */\n    export interface IModelDecorationMinimapOptions extends IDecorationOptions {\n        /**\n         * The position in the overview ruler.\n         */\n        position: MinimapPosition;\n    }\n\n    /**\n     * Options for a model decoration.\n     */\n    export interface IModelDecorationOptions {\n        /**\n         * Customize the growing behavior of the decoration when typing at the edges of the decoration.\n         * Defaults to TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges\n         */\n        stickiness?: TrackedRangeStickiness;\n        /**\n         * CSS class name describing the decoration.\n         */\n        className?: string | null;\n        /**\n         * Message to be rendered when hovering over the glyph margin decoration.\n         */\n        glyphMarginHoverMessage?: IMarkdownString | IMarkdownString[] | null;\n        /**\n         * Array of MarkdownString to render as the decoration message.\n         */\n        hoverMessage?: IMarkdownString | IMarkdownString[] | null;\n        /**\n         * Should the decoration expand to encompass a whole line.\n         */\n        isWholeLine?: boolean;\n        /**\n         * Specifies the stack order of a decoration.\n         * A decoration with greater stack order is always in front of a decoration with a lower stack order.\n         */\n        zIndex?: number;\n        /**\n         * If set, render this decoration in the overview ruler.\n         */\n        overviewRuler?: IModelDecorationOverviewRulerOptions | null;\n        /**\n         * If set, render this decoration in the minimap.\n         */\n        minimap?: IModelDecorationMinimapOptions | null;\n        /**\n         * If set, the decoration will be rendered in the glyph margin with this CSS class name.\n         */\n        glyphMarginClassName?: string | null;\n        /**\n         * If set, the decoration will be rendered in the lines decorations with this CSS class name.\n         */\n        linesDecorationsClassName?: string | null;\n        /**\n         * If set, the decoration will be rendered in the lines decorations with this CSS class name, but only for the first line in case of line wrapping.\n         */\n        firstLineDecorationClassName?: string | null;\n        /**\n         * If set, the decoration will be rendered in the margin (covering its full width) with this CSS class name.\n         */\n        marginClassName?: string | null;\n        /**\n         * If set, the decoration will be rendered inline with the text with this CSS class name.\n         * Please use this only for CSS rules that must impact the text. For example, use `className`\n         * to have a background color decoration.\n         */\n        inlineClassName?: string | null;\n        /**\n         * If there is an `inlineClassName` which affects letter spacing.\n         */\n        inlineClassNameAffectsLetterSpacing?: boolean;\n        /**\n         * If set, the decoration will be rendered before the text with this CSS class name.\n         */\n        beforeContentClassName?: string | null;\n        /**\n         * If set, the decoration will be rendered after the text with this CSS class name.\n         */\n        afterContentClassName?: string | null;\n        /**\n         * If set, text will be injected in the view after the range.\n         */\n        after?: InjectedTextOptions | null;\n        /**\n         * If set, text will be injected in the view before the range.\n         */\n        before?: InjectedTextOptions | null;\n    }\n\n    /**\n     * Configures text that is injected into the view without changing the underlying document.\n    */\n    export interface InjectedTextOptions {\n        /**\n         * Sets the text to inject. Must be a single line.\n         */\n        readonly content: string;\n        /**\n         * If set, the decoration will be rendered inline with the text with this CSS class name.\n         */\n        readonly inlineClassName?: string | null;\n        /**\n         * If there is an `inlineClassName` which affects letter spacing.\n         */\n        readonly inlineClassNameAffectsLetterSpacing?: boolean;\n    }\n\n    /**\n     * New model decorations.\n     */\n    export interface IModelDeltaDecoration {\n        /**\n         * Range that this decoration covers.\n         */\n        range: IRange;\n        /**\n         * Options associated with this decoration.\n         */\n        options: IModelDecorationOptions;\n    }\n\n    /**\n     * A decoration in the model.\n     */\n    export interface IModelDecoration {\n        /**\n         * Identifier for a decoration.\n         */\n        readonly id: string;\n        /**\n         * Identifier for a decoration's owner.\n         */\n        readonly ownerId: number;\n        /**\n         * Range that this decoration covers.\n         */\n        readonly range: Range;\n        /**\n         * Options associated with this decoration.\n         */\n        readonly options: IModelDecorationOptions;\n    }\n\n    /**\n     * Word inside a model.\n     */\n    export interface IWordAtPosition {\n        /**\n         * The word.\n         */\n        readonly word: string;\n        /**\n         * The column where the word starts.\n         */\n        readonly startColumn: number;\n        /**\n         * The column where the word ends.\n         */\n        readonly endColumn: number;\n    }\n\n    /**\n     * End of line character preference.\n     */\n    export enum EndOfLinePreference {\n        /**\n         * Use the end of line character identified in the text buffer.\n         */\n        TextDefined = 0,\n        /**\n         * Use line feed (\\n) as the end of line character.\n         */\n        LF = 1,\n        /**\n         * Use carriage return and line feed (\\r\\n) as the end of line character.\n         */\n        CRLF = 2\n    }\n\n    /**\n     * The default end of line to use when instantiating models.\n     */\n    export enum DefaultEndOfLine {\n        /**\n         * Use line feed (\\n) as the end of line character.\n         */\n        LF = 1,\n        /**\n         * Use carriage return and line feed (\\r\\n) as the end of line character.\n         */\n        CRLF = 2\n    }\n\n    /**\n     * End of line character preference.\n     */\n    export enum EndOfLineSequence {\n        /**\n         * Use line feed (\\n) as the end of line character.\n         */\n        LF = 0,\n        /**\n         * Use carriage return and line feed (\\r\\n) as the end of line character.\n         */\n        CRLF = 1\n    }\n\n    /**\n     * A single edit operation, that acts as a simple replace.\n     * i.e. Replace text at `range` with `text` in model.\n     */\n    export interface ISingleEditOperation {\n        /**\n         * The range to replace. This can be empty to emulate a simple insert.\n         */\n        range: IRange;\n        /**\n         * The text to replace with. This can be null to emulate a simple delete.\n         */\n        text: string | null;\n        /**\n         * This indicates that this operation has \"insert\" semantics.\n         * i.e. forceMoveMarkers = true => if `range` is collapsed, all markers at the position will be moved.\n         */\n        forceMoveMarkers?: boolean;\n    }\n\n    /**\n     * A single edit operation, that has an identifier.\n     */\n    export interface IIdentifiedSingleEditOperation {\n        /**\n         * The range to replace. This can be empty to emulate a simple insert.\n         */\n        range: IRange;\n        /**\n         * The text to replace with. This can be null to emulate a simple delete.\n         */\n        text: string | null;\n        /**\n         * This indicates that this operation has \"insert\" semantics.\n         * i.e. forceMoveMarkers = true => if `range` is collapsed, all markers at the position will be moved.\n         */\n        forceMoveMarkers?: boolean;\n    }\n\n    export interface IValidEditOperation {\n        /**\n         * The range to replace. This can be empty to emulate a simple insert.\n         */\n        range: Range;\n        /**\n         * The text to replace with. This can be empty to emulate a simple delete.\n         */\n        text: string;\n    }\n\n    /**\n     * A callback that can compute the cursor state after applying a series of edit operations.\n     */\n    export interface ICursorStateComputer {\n        /**\n         * A callback that can compute the resulting cursors state after some edit operations have been executed.\n         */\n        (inverseEditOperations: IValidEditOperation[]): Selection[] | null;\n    }\n\n    export class TextModelResolvedOptions {\n        _textModelResolvedOptionsBrand: void;\n        readonly tabSize: number;\n        readonly indentSize: number;\n        readonly insertSpaces: boolean;\n        readonly defaultEOL: DefaultEndOfLine;\n        readonly trimAutoWhitespace: boolean;\n    }\n\n    export interface ITextModelUpdateOptions {\n        tabSize?: number;\n        indentSize?: number;\n        insertSpaces?: boolean;\n        trimAutoWhitespace?: boolean;\n    }\n\n    export class FindMatch {\n        _findMatchBrand: void;\n        readonly range: Range;\n        readonly matches: string[] | null;\n    }\n\n    /**\n     * Describes the behavior of decorations when typing/editing near their edges.\n     * Note: Please do not edit the values, as they very carefully match `DecorationRangeBehavior`\n     */\n    export enum TrackedRangeStickiness {\n        AlwaysGrowsWhenTypingAtEdges = 0,\n        NeverGrowsWhenTypingAtEdges = 1,\n        GrowsOnlyWhenTypingBefore = 2,\n        GrowsOnlyWhenTypingAfter = 3\n    }\n\n    /**\n     * A model.\n     */\n    export interface ITextModel {\n        /**\n         * Gets the resource associated with this editor model.\n         */\n        readonly uri: Uri;\n        /**\n         * A unique identifier associated with this model.\n         */\n        readonly id: string;\n        /**\n         * Get the resolved options for this model.\n         */\n        getOptions(): TextModelResolvedOptions;\n        /**\n         * Get the current version id of the model.\n         * Anytime a change happens to the model (even undo/redo),\n         * the version id is incremented.\n         */\n        getVersionId(): number;\n        /**\n         * Get the alternative version id of the model.\n         * This alternative version id is not always incremented,\n         * it will return the same values in the case of undo-redo.\n         */\n        getAlternativeVersionId(): number;\n        /**\n         * Replace the entire text buffer value contained in this model.\n         */\n        setValue(newValue: string): void;\n        /**\n         * Get the text stored in this model.\n         * @param eol The end of line character preference. Defaults to `EndOfLinePreference.TextDefined`.\n         * @param preserverBOM Preserve a BOM character if it was detected when the model was constructed.\n         * @return The text.\n         */\n        getValue(eol?: EndOfLinePreference, preserveBOM?: boolean): string;\n        /**\n         * Get the length of the text stored in this model.\n         */\n        getValueLength(eol?: EndOfLinePreference, preserveBOM?: boolean): number;\n        /**\n         * Get the text in a certain range.\n         * @param range The range describing what text to get.\n         * @param eol The end of line character preference. This will only be used for multiline ranges. Defaults to `EndOfLinePreference.TextDefined`.\n         * @return The text.\n         */\n        getValueInRange(range: IRange, eol?: EndOfLinePreference): string;\n        /**\n         * Get the length of text in a certain range.\n         * @param range The range describing what text length to get.\n         * @return The text length.\n         */\n        getValueLengthInRange(range: IRange): number;\n        /**\n         * Get the character count of text in a certain range.\n         * @param range The range describing what text length to get.\n         */\n        getCharacterCountInRange(range: IRange): number;\n        /**\n         * Get the number of lines in the model.\n         */\n        getLineCount(): number;\n        /**\n         * Get the text for a certain line.\n         */\n        getLineContent(lineNumber: number): string;\n        /**\n         * Get the text length for a certain line.\n         */\n        getLineLength(lineNumber: number): number;\n        /**\n         * Get the text for all lines.\n         */\n        getLinesContent(): string[];\n        /**\n         * Get the end of line sequence predominantly used in the text buffer.\n         * @return EOL char sequence (e.g.: '\\n' or '\\r\\n').\n         */\n        getEOL(): string;\n        /**\n         * Get the end of line sequence predominantly used in the text buffer.\n         */\n        getEndOfLineSequence(): EndOfLineSequence;\n        /**\n         * Get the minimum legal column for line at `lineNumber`\n         */\n        getLineMinColumn(lineNumber: number): number;\n        /**\n         * Get the maximum legal column for line at `lineNumber`\n         */\n        getLineMaxColumn(lineNumber: number): number;\n        /**\n         * Returns the column before the first non whitespace character for line at `lineNumber`.\n         * Returns 0 if line is empty or contains only whitespace.\n         */\n        getLineFirstNonWhitespaceColumn(lineNumber: number): number;\n        /**\n         * Returns the column after the last non whitespace character for line at `lineNumber`.\n         * Returns 0 if line is empty or contains only whitespace.\n         */\n        getLineLastNonWhitespaceColumn(lineNumber: number): number;\n        /**\n         * Create a valid position,\n         */\n        validatePosition(position: IPosition): Position;\n        /**\n         * Advances the given position by the given offset (negative offsets are also accepted)\n         * and returns it as a new valid position.\n         *\n         * If the offset and position are such that their combination goes beyond the beginning or\n         * end of the model, throws an exception.\n         *\n         * If the offset is such that the new position would be in the middle of a multi-byte\n         * line terminator, throws an exception.\n         */\n        modifyPosition(position: IPosition, offset: number): Position;\n        /**\n         * Create a valid range.\n         */\n        validateRange(range: IRange): Range;\n        /**\n         * Converts the position to a zero-based offset.\n         *\n         * The position will be [adjusted](#TextDocument.validatePosition).\n         *\n         * @param position A position.\n         * @return A valid zero-based offset.\n         */\n        getOffsetAt(position: IPosition): number;\n        /**\n         * Converts a zero-based offset to a position.\n         *\n         * @param offset A zero-based offset.\n         * @return A valid [position](#Position).\n         */\n        getPositionAt(offset: number): Position;\n        /**\n         * Get a range covering the entire model\n         */\n        getFullModelRange(): Range;\n        /**\n         * Returns if the model was disposed or not.\n         */\n        isDisposed(): boolean;\n        /**\n         * Search the model.\n         * @param searchString The string used to search. If it is a regular expression, set `isRegex` to true.\n         * @param searchOnlyEditableRange Limit the searching to only search inside the editable range of the model.\n         * @param isRegex Used to indicate that `searchString` is a regular expression.\n         * @param matchCase Force the matching to match lower/upper case exactly.\n         * @param wordSeparators Force the matching to match entire words only. Pass null otherwise.\n         * @param captureMatches The result will contain the captured groups.\n         * @param limitResultCount Limit the number of results\n         * @return The ranges where the matches are. It is empty if not matches have been found.\n         */\n        findMatches(searchString: string, searchOnlyEditableRange: boolean, isRegex: boolean, matchCase: boolean, wordSeparators: string | null, captureMatches: boolean, limitResultCount?: number): FindMatch[];\n        /**\n         * Search the model.\n         * @param searchString The string used to search. If it is a regular expression, set `isRegex` to true.\n         * @param searchScope Limit the searching to only search inside these ranges.\n         * @param isRegex Used to indicate that `searchString` is a regular expression.\n         * @param matchCase Force the matching to match lower/upper case exactly.\n         * @param wordSeparators Force the matching to match entire words only. Pass null otherwise.\n         * @param captureMatches The result will contain the captured groups.\n         * @param limitResultCount Limit the number of results\n         * @return The ranges where the matches are. It is empty if no matches have been found.\n         */\n        findMatches(searchString: string, searchScope: IRange | IRange[], isRegex: boolean, matchCase: boolean, wordSeparators: string | null, captureMatches: boolean, limitResultCount?: number): FindMatch[];\n        /**\n         * Search the model for the next match. Loops to the beginning of the model if needed.\n         * @param searchString The string used to search. If it is a regular expression, set `isRegex` to true.\n         * @param searchStart Start the searching at the specified position.\n         * @param isRegex Used to indicate that `searchString` is a regular expression.\n         * @param matchCase Force the matching to match lower/upper case exactly.\n         * @param wordSeparators Force the matching to match entire words only. Pass null otherwise.\n         * @param captureMatches The result will contain the captured groups.\n         * @return The range where the next match is. It is null if no next match has been found.\n         */\n        findNextMatch(searchString: string, searchStart: IPosition, isRegex: boolean, matchCase: boolean, wordSeparators: string | null, captureMatches: boolean): FindMatch | null;\n        /**\n         * Search the model for the previous match. Loops to the end of the model if needed.\n         * @param searchString The string used to search. If it is a regular expression, set `isRegex` to true.\n         * @param searchStart Start the searching at the specified position.\n         * @param isRegex Used to indicate that `searchString` is a regular expression.\n         * @param matchCase Force the matching to match lower/upper case exactly.\n         * @param wordSeparators Force the matching to match entire words only. Pass null otherwise.\n         * @param captureMatches The result will contain the captured groups.\n         * @return The range where the previous match is. It is null if no previous match has been found.\n         */\n        findPreviousMatch(searchString: string, searchStart: IPosition, isRegex: boolean, matchCase: boolean, wordSeparators: string | null, captureMatches: boolean): FindMatch | null;\n        /**\n         * Get the language associated with this model.\n         */\n        getModeId(): string;\n        /**\n         * Get the word under or besides `position`.\n         * @param position The position to look for a word.\n         * @return The word under or besides `position`. Might be null.\n         */\n        getWordAtPosition(position: IPosition): IWordAtPosition | null;\n        /**\n         * Get the word under or besides `position` trimmed to `position`.column\n         * @param position The position to look for a word.\n         * @return The word under or besides `position`. Will never be null.\n         */\n        getWordUntilPosition(position: IPosition): IWordAtPosition;\n        /**\n         * Perform a minimum amount of operations, in order to transform the decorations\n         * identified by `oldDecorations` to the decorations described by `newDecorations`\n         * and returns the new identifiers associated with the resulting decorations.\n         *\n         * @param oldDecorations Array containing previous decorations identifiers.\n         * @param newDecorations Array describing what decorations should result after the call.\n         * @param ownerId Identifies the editor id in which these decorations should appear. If no `ownerId` is provided, the decorations will appear in all editors that attach this model.\n         * @return An array containing the new decorations identifiers.\n         */\n        deltaDecorations(oldDecorations: string[], newDecorations: IModelDeltaDecoration[], ownerId?: number): string[];\n        /**\n         * Get the options associated with a decoration.\n         * @param id The decoration id.\n         * @return The decoration options or null if the decoration was not found.\n         */\n        getDecorationOptions(id: string): IModelDecorationOptions | null;\n        /**\n         * Get the range associated with a decoration.\n         * @param id The decoration id.\n         * @return The decoration range or null if the decoration was not found.\n         */\n        getDecorationRange(id: string): Range | null;\n        /**\n         * Gets all the decorations for the line `lineNumber` as an array.\n         * @param lineNumber The line number\n         * @param ownerId If set, it will ignore decorations belonging to other owners.\n         * @param filterOutValidation If set, it will ignore decorations specific to validation (i.e. warnings, errors).\n         * @return An array with the decorations\n         */\n        getLineDecorations(lineNumber: number, ownerId?: number, filterOutValidation?: boolean): IModelDecoration[];\n        /**\n         * Gets all the decorations for the lines between `startLineNumber` and `endLineNumber` as an array.\n         * @param startLineNumber The start line number\n         * @param endLineNumber The end line number\n         * @param ownerId If set, it will ignore decorations belonging to other owners.\n         * @param filterOutValidation If set, it will ignore decorations specific to validation (i.e. warnings, errors).\n         * @return An array with the decorations\n         */\n        getLinesDecorations(startLineNumber: number, endLineNumber: number, ownerId?: number, filterOutValidation?: boolean): IModelDecoration[];\n        /**\n         * Gets all the decorations in a range as an array. Only `startLineNumber` and `endLineNumber` from `range` are used for filtering.\n         * So for now it returns all the decorations on the same line as `range`.\n         * @param range The range to search in\n         * @param ownerId If set, it will ignore decorations belonging to other owners.\n         * @param filterOutValidation If set, it will ignore decorations specific to validation (i.e. warnings, errors).\n         * @return An array with the decorations\n         */\n        getDecorationsInRange(range: IRange, ownerId?: number, filterOutValidation?: boolean): IModelDecoration[];\n        /**\n         * Gets all the decorations as an array.\n         * @param ownerId If set, it will ignore decorations belonging to other owners.\n         * @param filterOutValidation If set, it will ignore decorations specific to validation (i.e. warnings, errors).\n         */\n        getAllDecorations(ownerId?: number, filterOutValidation?: boolean): IModelDecoration[];\n        /**\n         * Gets all the decorations that should be rendered in the overview ruler as an array.\n         * @param ownerId If set, it will ignore decorations belonging to other owners.\n         * @param filterOutValidation If set, it will ignore decorations specific to validation (i.e. warnings, errors).\n         */\n        getOverviewRulerDecorations(ownerId?: number, filterOutValidation?: boolean): IModelDecoration[];\n        /**\n         * Gets all the decorations that contain injected text.\n         * @param ownerId If set, it will ignore decorations belonging to other owners.\n         */\n        getInjectedTextDecorations(ownerId?: number): IModelDecoration[];\n        /**\n         * Normalize a string containing whitespace according to indentation rules (converts to spaces or to tabs).\n         */\n        normalizeIndentation(str: string): string;\n        /**\n         * Change the options of this model.\n         */\n        updateOptions(newOpts: ITextModelUpdateOptions): void;\n        /**\n         * Detect the indentation options for this model from its content.\n         */\n        detectIndentation(defaultInsertSpaces: boolean, defaultTabSize: number): void;\n        /**\n         * Close the current undo-redo element.\n         * This offers a way to create an undo/redo stop point.\n         */\n        pushStackElement(): void;\n        /**\n         * Open the current undo-redo element.\n         * This offers a way to remove the current undo/redo stop point.\n         */\n        popStackElement(): void;\n        /**\n         * Push edit operations, basically editing the model. This is the preferred way\n         * of editing the model. The edit operations will land on the undo stack.\n         * @param beforeCursorState The cursor state before the edit operations. This cursor state will be returned when `undo` or `redo` are invoked.\n         * @param editOperations The edit operations.\n         * @param cursorStateComputer A callback that can compute the resulting cursors state after the edit operations have been executed.\n         * @return The cursor state returned by the `cursorStateComputer`.\n         */\n        pushEditOperations(beforeCursorState: Selection[] | null, editOperations: IIdentifiedSingleEditOperation[], cursorStateComputer: ICursorStateComputer): Selection[] | null;\n        /**\n         * Change the end of line sequence. This is the preferred way of\n         * changing the eol sequence. This will land on the undo stack.\n         */\n        pushEOL(eol: EndOfLineSequence): void;\n        /**\n         * Edit the model without adding the edits to the undo stack.\n         * This can have dire consequences on the undo stack! See @pushEditOperations for the preferred way.\n         * @param operations The edit operations.\n         * @return If desired, the inverse edit operations, that, when applied, will bring the model back to the previous state.\n         */\n        applyEdits(operations: IIdentifiedSingleEditOperation[]): void;\n        applyEdits(operations: IIdentifiedSingleEditOperation[], computeUndoEdits: false): void;\n        applyEdits(operations: IIdentifiedSingleEditOperation[], computeUndoEdits: true): IValidEditOperation[];\n        /**\n         * Change the end of line sequence without recording in the undo stack.\n         * This can have dire consequences on the undo stack! See @pushEOL for the preferred way.\n         */\n        setEOL(eol: EndOfLineSequence): void;\n        /**\n         * An event emitted when the contents of the model have changed.\n         * @event\n         */\n        onDidChangeContent(listener: (e: IModelContentChangedEvent) => void): IDisposable;\n        /**\n         * An event emitted when decorations of the model have changed.\n         * @event\n         */\n        onDidChangeDecorations(listener: (e: IModelDecorationsChangedEvent) => void): IDisposable;\n        /**\n         * An event emitted when the model options have changed.\n         * @event\n         */\n        onDidChangeOptions(listener: (e: IModelOptionsChangedEvent) => void): IDisposable;\n        /**\n         * An event emitted when the language associated with the model has changed.\n         * @event\n         */\n        onDidChangeLanguage(listener: (e: IModelLanguageChangedEvent) => void): IDisposable;\n        /**\n         * An event emitted when the language configuration associated with the model has changed.\n         * @event\n         */\n        onDidChangeLanguageConfiguration(listener: (e: IModelLanguageConfigurationChangedEvent) => void): IDisposable;\n        /**\n         * An event emitted when the model has been attached to the first editor or detached from the last editor.\n         * @event\n         */\n        onDidChangeAttached(listener: () => void): IDisposable;\n        /**\n         * An event emitted right before disposing the model.\n         * @event\n         */\n        onWillDispose(listener: () => void): IDisposable;\n        /**\n         * Destroy this model. This will unbind the model from the mode\n         * and make all necessary clean-up to release this object to the GC.\n         */\n        dispose(): void;\n        /**\n         * Returns if this model is attached to an editor or not.\n         */\n        isAttachedToEditor(): boolean;\n    }\n\n    /**\n     * A builder and helper for edit operations for a command.\n     */\n    export interface IEditOperationBuilder {\n        /**\n         * Add a new edit operation (a replace operation).\n         * @param range The range to replace (delete). May be empty to represent a simple insert.\n         * @param text The text to replace with. May be null to represent a simple delete.\n         */\n        addEditOperation(range: IRange, text: string | null, forceMoveMarkers?: boolean): void;\n        /**\n         * Add a new edit operation (a replace operation).\n         * The inverse edits will be accessible in `ICursorStateComputerData.getInverseEditOperations()`\n         * @param range The range to replace (delete). May be empty to represent a simple insert.\n         * @param text The text to replace with. May be null to represent a simple delete.\n         */\n        addTrackedEditOperation(range: IRange, text: string | null, forceMoveMarkers?: boolean): void;\n        /**\n         * Track `selection` when applying edit operations.\n         * A best effort will be made to not grow/expand the selection.\n         * An empty selection will clamp to a nearby character.\n         * @param selection The selection to track.\n         * @param trackPreviousOnEmpty If set, and the selection is empty, indicates whether the selection\n         *           should clamp to the previous or the next character.\n         * @return A unique identifier.\n         */\n        trackSelection(selection: Selection, trackPreviousOnEmpty?: boolean): string;\n    }\n\n    /**\n     * A helper for computing cursor state after a command.\n     */\n    export interface ICursorStateComputerData {\n        /**\n         * Get the inverse edit operations of the added edit operations.\n         */\n        getInverseEditOperations(): IValidEditOperation[];\n        /**\n         * Get a previously tracked selection.\n         * @param id The unique identifier returned by `trackSelection`.\n         * @return The selection.\n         */\n        getTrackedSelection(id: string): Selection;\n    }\n\n    /**\n     * A command that modifies text / cursor state on a model.\n     */\n    export interface ICommand {\n        /**\n         * Get the edit operations needed to execute this command.\n         * @param model The model the command will execute on.\n         * @param builder A helper to collect the needed edit operations and to track selections.\n         */\n        getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void;\n        /**\n         * Compute the cursor state after the edit operations were applied.\n         * @param model The model the command has executed on.\n         * @param helper A helper to get inverse edit operations and to get previously tracked selections.\n         * @return The cursor state after the command executed.\n         */\n        computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection;\n    }\n\n    /**\n     * A model for the diff editor.\n     */\n    export interface IDiffEditorModel {\n        /**\n         * Original model.\n         */\n        original: ITextModel;\n        /**\n         * Modified model.\n         */\n        modified: ITextModel;\n    }\n\n    /**\n     * An event describing that an editor has had its model reset (i.e. `editor.setModel()`).\n     */\n    export interface IModelChangedEvent {\n        /**\n         * The `uri` of the previous model or null.\n         */\n        readonly oldModelUrl: Uri | null;\n        /**\n         * The `uri` of the new model or null.\n         */\n        readonly newModelUrl: Uri | null;\n    }\n\n    export interface IDimension {\n        width: number;\n        height: number;\n    }\n\n    /**\n     * A change\n     */\n    export interface IChange {\n        readonly originalStartLineNumber: number;\n        readonly originalEndLineNumber: number;\n        readonly modifiedStartLineNumber: number;\n        readonly modifiedEndLineNumber: number;\n    }\n\n    /**\n     * A character level change.\n     */\n    export interface ICharChange extends IChange {\n        readonly originalStartColumn: number;\n        readonly originalEndColumn: number;\n        readonly modifiedStartColumn: number;\n        readonly modifiedEndColumn: number;\n    }\n\n    /**\n     * A line change\n     */\n    export interface ILineChange extends IChange {\n        readonly charChanges: ICharChange[] | undefined;\n    }\n\n    export interface IContentSizeChangedEvent {\n        readonly contentWidth: number;\n        readonly contentHeight: number;\n        readonly contentWidthChanged: boolean;\n        readonly contentHeightChanged: boolean;\n    }\n\n    export interface INewScrollPosition {\n        scrollLeft?: number;\n        scrollTop?: number;\n    }\n\n    export interface IEditorAction {\n        readonly id: string;\n        readonly label: string;\n        readonly alias: string;\n        isSupported(): boolean;\n        run(): Promise<void>;\n    }\n\n    export type IEditorModel = ITextModel | IDiffEditorModel;\n\n    /**\n     * A (serializable) state of the cursors.\n     */\n    export interface ICursorState {\n        inSelectionMode: boolean;\n        selectionStart: IPosition;\n        position: IPosition;\n    }\n\n    /**\n     * A (serializable) state of the view.\n     */\n    export interface IViewState {\n        /** written by previous versions */\n        scrollTop?: number;\n        /** written by previous versions */\n        scrollTopWithoutViewZones?: number;\n        scrollLeft: number;\n        firstPosition: IPosition;\n        firstPositionDeltaTop: number;\n    }\n\n    /**\n     * A (serializable) state of the code editor.\n     */\n    export interface ICodeEditorViewState {\n        cursorState: ICursorState[];\n        viewState: IViewState;\n        contributionsState: {\n            [id: string]: any;\n        };\n    }\n\n    /**\n     * (Serializable) View state for the diff editor.\n     */\n    export interface IDiffEditorViewState {\n        original: ICodeEditorViewState | null;\n        modified: ICodeEditorViewState | null;\n    }\n\n    /**\n     * An editor view state.\n     */\n    export type IEditorViewState = ICodeEditorViewState | IDiffEditorViewState;\n\n    export enum ScrollType {\n        Smooth = 0,\n        Immediate = 1\n    }\n\n    /**\n     * An editor.\n     */\n    export interface IEditor {\n        /**\n         * An event emitted when the editor has been disposed.\n         * @event\n         */\n        onDidDispose(listener: () => void): IDisposable;\n        /**\n         * Dispose the editor.\n         */\n        dispose(): void;\n        /**\n         * Get a unique id for this editor instance.\n         */\n        getId(): string;\n        /**\n         * Get the editor type. Please see `EditorType`.\n         * This is to avoid an instanceof check\n         */\n        getEditorType(): string;\n        /**\n         * Update the editor's options after the editor has been created.\n         */\n        updateOptions(newOptions: IEditorOptions): void;\n        /**\n         * Instructs the editor to remeasure its container. This method should\n         * be called when the container of the editor gets resized.\n         *\n         * If a dimension is passed in, the passed in value will be used.\n         */\n        layout(dimension?: IDimension): void;\n        /**\n         * Brings browser focus to the editor text\n         */\n        focus(): void;\n        /**\n         * Returns true if the text inside this editor is focused (i.e. cursor is blinking).\n         */\n        hasTextFocus(): boolean;\n        /**\n         * Returns all actions associated with this editor.\n         */\n        getSupportedActions(): IEditorAction[];\n        /**\n         * Saves current view state of the editor in a serializable object.\n         */\n        saveViewState(): IEditorViewState | null;\n        /**\n         * Restores the view state of the editor from a serializable object generated by `saveViewState`.\n         */\n        restoreViewState(state: IEditorViewState): void;\n        /**\n         * Given a position, returns a column number that takes tab-widths into account.\n         */\n        getVisibleColumnFromPosition(position: IPosition): number;\n        /**\n         * Returns the primary position of the cursor.\n         */\n        getPosition(): Position | null;\n        /**\n         * Set the primary position of the cursor. This will remove any secondary cursors.\n         * @param position New primary cursor's position\n         */\n        setPosition(position: IPosition): void;\n        /**\n         * Scroll vertically as necessary and reveal a line.\n         */\n        revealLine(lineNumber: number, scrollType?: ScrollType): void;\n        /**\n         * Scroll vertically as necessary and reveal a line centered vertically.\n         */\n        revealLineInCenter(lineNumber: number, scrollType?: ScrollType): void;\n        /**\n         * Scroll vertically as necessary and reveal a line centered vertically only if it lies outside the viewport.\n         */\n        revealLineInCenterIfOutsideViewport(lineNumber: number, scrollType?: ScrollType): void;\n        /**\n         * Scroll vertically as necessary and reveal a line close to the top of the viewport,\n         * optimized for viewing a code definition.\n         */\n        revealLineNearTop(lineNumber: number, scrollType?: ScrollType): void;\n        /**\n         * Scroll vertically or horizontally as necessary and reveal a position.\n         */\n        revealPosition(position: IPosition, scrollType?: ScrollType): void;\n        /**\n         * Scroll vertically or horizontally as necessary and reveal a position centered vertically.\n         */\n        revealPositionInCenter(position: IPosition, scrollType?: ScrollType): void;\n        /**\n         * Scroll vertically or horizontally as necessary and reveal a position centered vertically only if it lies outside the viewport.\n         */\n        revealPositionInCenterIfOutsideViewport(position: IPosition, scrollType?: ScrollType): void;\n        /**\n         * Scroll vertically or horizontally as necessary and reveal a position close to the top of the viewport,\n         * optimized for viewing a code definition.\n         */\n        revealPositionNearTop(position: IPosition, scrollType?: ScrollType): void;\n        /**\n         * Returns the primary selection of the editor.\n         */\n        getSelection(): Selection | null;\n        /**\n         * Returns all the selections of the editor.\n         */\n        getSelections(): Selection[] | null;\n        /**\n         * Set the primary selection of the editor. This will remove any secondary cursors.\n         * @param selection The new selection\n         */\n        setSelection(selection: IRange): void;\n        /**\n         * Set the primary selection of the editor. This will remove any secondary cursors.\n         * @param selection The new selection\n         */\n        setSelection(selection: Range): void;\n        /**\n         * Set the primary selection of the editor. This will remove any secondary cursors.\n         * @param selection The new selection\n         */\n        setSelection(selection: ISelection): void;\n        /**\n         * Set the primary selection of the editor. This will remove any secondary cursors.\n         * @param selection The new selection\n         */\n        setSelection(selection: Selection): void;\n        /**\n         * Set the selections for all the cursors of the editor.\n         * Cursors will be removed or added, as necessary.\n         */\n        setSelections(selections: readonly ISelection[]): void;\n        /**\n         * Scroll vertically as necessary and reveal lines.\n         */\n        revealLines(startLineNumber: number, endLineNumber: number, scrollType?: ScrollType): void;\n        /**\n         * Scroll vertically as necessary and reveal lines centered vertically.\n         */\n        revealLinesInCenter(lineNumber: number, endLineNumber: number, scrollType?: ScrollType): void;\n        /**\n         * Scroll vertically as necessary and reveal lines centered vertically only if it lies outside the viewport.\n         */\n        revealLinesInCenterIfOutsideViewport(lineNumber: number, endLineNumber: number, scrollType?: ScrollType): void;\n        /**\n         * Scroll vertically as necessary and reveal lines close to the top of the viewport,\n         * optimized for viewing a code definition.\n         */\n        revealLinesNearTop(lineNumber: number, endLineNumber: number, scrollType?: ScrollType): void;\n        /**\n         * Scroll vertically or horizontally as necessary and reveal a range.\n         */\n        revealRange(range: IRange, scrollType?: ScrollType): void;\n        /**\n         * Scroll vertically or horizontally as necessary and reveal a range centered vertically.\n         */\n        revealRangeInCenter(range: IRange, scrollType?: ScrollType): void;\n        /**\n         * Scroll vertically or horizontally as necessary and reveal a range at the top of the viewport.\n         */\n        revealRangeAtTop(range: IRange, scrollType?: ScrollType): void;\n        /**\n         * Scroll vertically or horizontally as necessary and reveal a range centered vertically only if it lies outside the viewport.\n         */\n        revealRangeInCenterIfOutsideViewport(range: IRange, scrollType?: ScrollType): void;\n        /**\n         * Scroll vertically or horizontally as necessary and reveal a range close to the top of the viewport,\n         * optimized for viewing a code definition.\n         */\n        revealRangeNearTop(range: IRange, scrollType?: ScrollType): void;\n        /**\n         * Scroll vertically or horizontally as necessary and reveal a range close to the top of the viewport,\n         * optimized for viewing a code definition. Only if it lies outside the viewport.\n         */\n        revealRangeNearTopIfOutsideViewport(range: IRange, scrollType?: ScrollType): void;\n        /**\n         * Directly trigger a handler or an editor action.\n         * @param source The source of the call.\n         * @param handlerId The id of the handler or the id of a contribution.\n         * @param payload Extra data to be sent to the handler.\n         */\n        trigger(source: string | null | undefined, handlerId: string, payload: any): void;\n        /**\n         * Gets the current model attached to this editor.\n         */\n        getModel(): IEditorModel | null;\n        /**\n         * Sets the current model attached to this editor.\n         * If the previous model was created by the editor via the value key in the options\n         * literal object, it will be destroyed. Otherwise, if the previous model was set\n         * via setModel, or the model key in the options literal object, the previous model\n         * will not be destroyed.\n         * It is safe to call setModel(null) to simply detach the current model from the editor.\n         */\n        setModel(model: IEditorModel | null): void;\n    }\n\n    /**\n     * An editor contribution that gets created every time a new editor gets created and gets disposed when the editor gets disposed.\n     */\n    export interface IEditorContribution {\n        /**\n         * Dispose this contribution.\n         */\n        dispose(): void;\n        /**\n         * Store view state.\n         */\n        saveViewState?(): any;\n        /**\n         * Restore view state.\n         */\n        restoreViewState?(state: any): void;\n    }\n\n    /**\n     * The type of the `IEditor`.\n     */\n    export const EditorType: {\n        ICodeEditor: string;\n        IDiffEditor: string;\n    };\n\n    /**\n     * An event describing that the current mode associated with a model has changed.\n     */\n    export interface IModelLanguageChangedEvent {\n        /**\n         * Previous language\n         */\n        readonly oldLanguage: string;\n        /**\n         * New language\n         */\n        readonly newLanguage: string;\n    }\n\n    /**\n     * An event describing that the language configuration associated with a model has changed.\n     */\n    export interface IModelLanguageConfigurationChangedEvent {\n    }\n\n    export interface IModelContentChange {\n        /**\n         * The range that got replaced.\n         */\n        readonly range: IRange;\n        /**\n         * The offset of the range that got replaced.\n         */\n        readonly rangeOffset: number;\n        /**\n         * The length of the range that got replaced.\n         */\n        readonly rangeLength: number;\n        /**\n         * The new text for the range.\n         */\n        readonly text: string;\n    }\n\n    /**\n     * An event describing a change in the text of a model.\n     */\n    export interface IModelContentChangedEvent {\n        readonly changes: IModelContentChange[];\n        /**\n         * The (new) end-of-line character.\n         */\n        readonly eol: string;\n        /**\n         * The new version id the model has transitioned to.\n         */\n        readonly versionId: number;\n        /**\n         * Flag that indicates that this event was generated while undoing.\n         */\n        readonly isUndoing: boolean;\n        /**\n         * Flag that indicates that this event was generated while redoing.\n         */\n        readonly isRedoing: boolean;\n        /**\n         * Flag that indicates that all decorations were lost with this edit.\n         * The model has been reset to a new value.\n         */\n        readonly isFlush: boolean;\n    }\n\n    /**\n     * An event describing that model decorations have changed.\n     */\n    export interface IModelDecorationsChangedEvent {\n        readonly affectsMinimap: boolean;\n        readonly affectsOverviewRuler: boolean;\n    }\n\n    export interface IModelOptionsChangedEvent {\n        readonly tabSize: boolean;\n        readonly indentSize: boolean;\n        readonly insertSpaces: boolean;\n        readonly trimAutoWhitespace: boolean;\n    }\n\n    /**\n     * Describes the reason the cursor has changed its position.\n     */\n    export enum CursorChangeReason {\n        /**\n         * Unknown or not set.\n         */\n        NotSet = 0,\n        /**\n         * A `model.setValue()` was called.\n         */\n        ContentFlush = 1,\n        /**\n         * The `model` has been changed outside of this cursor and the cursor recovers its position from associated markers.\n         */\n        RecoverFromMarkers = 2,\n        /**\n         * There was an explicit user gesture.\n         */\n        Explicit = 3,\n        /**\n         * There was a Paste.\n         */\n        Paste = 4,\n        /**\n         * There was an Undo.\n         */\n        Undo = 5,\n        /**\n         * There was a Redo.\n         */\n        Redo = 6\n    }\n\n    /**\n     * An event describing that the cursor position has changed.\n     */\n    export interface ICursorPositionChangedEvent {\n        /**\n         * Primary cursor's position.\n         */\n        readonly position: Position;\n        /**\n         * Secondary cursors' position.\n         */\n        readonly secondaryPositions: Position[];\n        /**\n         * Reason.\n         */\n        readonly reason: CursorChangeReason;\n        /**\n         * Source of the call that caused the event.\n         */\n        readonly source: string;\n    }\n\n    /**\n     * An event describing that the cursor selection has changed.\n     */\n    export interface ICursorSelectionChangedEvent {\n        /**\n         * The primary selection.\n         */\n        readonly selection: Selection;\n        /**\n         * The secondary selections.\n         */\n        readonly secondarySelections: Selection[];\n        /**\n         * The model version id.\n         */\n        readonly modelVersionId: number;\n        /**\n         * The old selections.\n         */\n        readonly oldSelections: Selection[] | null;\n        /**\n         * The model version id the that `oldSelections` refer to.\n         */\n        readonly oldModelVersionId: number;\n        /**\n         * Source of the call that caused the event.\n         */\n        readonly source: string;\n        /**\n         * Reason.\n         */\n        readonly reason: CursorChangeReason;\n    }\n\n    export enum AccessibilitySupport {\n        /**\n         * This should be the browser case where it is not known if a screen reader is attached or no.\n         */\n        Unknown = 0,\n        Disabled = 1,\n        Enabled = 2\n    }\n\n    /**\n     * Configuration options for auto closing quotes and brackets\n     */\n    export type EditorAutoClosingStrategy = 'always' | 'languageDefined' | 'beforeWhitespace' | 'never';\n\n    /**\n     * Configuration options for auto wrapping quotes and brackets\n     */\n    export type EditorAutoSurroundStrategy = 'languageDefined' | 'quotes' | 'brackets' | 'never';\n\n    /**\n     * Configuration options for typing over closing quotes or brackets\n     */\n    export type EditorAutoClosingEditStrategy = 'always' | 'auto' | 'never';\n\n    /**\n     * Configuration options for auto indentation in the editor\n     */\n    export enum EditorAutoIndentStrategy {\n        None = 0,\n        Keep = 1,\n        Brackets = 2,\n        Advanced = 3,\n        Full = 4\n    }\n\n    /**\n     * Configuration options for the editor.\n     */\n    export interface IEditorOptions {\n        /**\n         * This editor is used inside a diff editor.\n         */\n        inDiffEditor?: boolean;\n        /**\n         * The aria label for the editor's textarea (when it is focused).\n         */\n        ariaLabel?: string;\n        /**\n         * The `tabindex` property of the editor's textarea\n         */\n        tabIndex?: number;\n        /**\n         * Render vertical lines at the specified columns.\n         * Defaults to empty array.\n         */\n        rulers?: (number | IRulerOption)[];\n        /**\n         * A string containing the word separators used when doing word navigation.\n         * Defaults to `~!@#$%^&*()-=+[{]}\\\\|;:\\'\",.<>/?\n         */\n        wordSeparators?: string;\n        /**\n         * Enable Linux primary clipboard.\n         * Defaults to true.\n         */\n        selectionClipboard?: boolean;\n        /**\n         * Control the rendering of line numbers.\n         * If it is a function, it will be invoked when rendering a line number and the return value will be rendered.\n         * Otherwise, if it is a truey, line numbers will be rendered normally (equivalent of using an identity function).\n         * Otherwise, line numbers will not be rendered.\n         * Defaults to `on`.\n         */\n        lineNumbers?: LineNumbersType;\n        /**\n         * Controls the minimal number of visible leading and trailing lines surrounding the cursor.\n         * Defaults to 0.\n        */\n        cursorSurroundingLines?: number;\n        /**\n         * Controls when `cursorSurroundingLines` should be enforced\n         * Defaults to `default`, `cursorSurroundingLines` is not enforced when cursor position is changed\n         * by mouse.\n        */\n        cursorSurroundingLinesStyle?: 'default' | 'all';\n        /**\n         * Render last line number when the file ends with a newline.\n         * Defaults to true.\n        */\n        renderFinalNewline?: boolean;\n        /**\n         * Remove unusual line terminators like LINE SEPARATOR (LS), PARAGRAPH SEPARATOR (PS).\n         * Defaults to 'prompt'.\n         */\n        unusualLineTerminators?: 'auto' | 'off' | 'prompt';\n        /**\n         * Should the corresponding line be selected when clicking on the line number?\n         * Defaults to true.\n         */\n        selectOnLineNumbers?: boolean;\n        /**\n         * Control the width of line numbers, by reserving horizontal space for rendering at least an amount of digits.\n         * Defaults to 5.\n         */\n        lineNumbersMinChars?: number;\n        /**\n         * Enable the rendering of the glyph margin.\n         * Defaults to true in vscode and to false in monaco-editor.\n         */\n        glyphMargin?: boolean;\n        /**\n         * The width reserved for line decorations (in px).\n         * Line decorations are placed between line numbers and the editor content.\n         * You can pass in a string in the format floating point followed by \"ch\". e.g. 1.3ch.\n         * Defaults to 10.\n         */\n        lineDecorationsWidth?: number | string;\n        /**\n         * When revealing the cursor, a virtual padding (px) is added to the cursor, turning it into a rectangle.\n         * This virtual padding ensures that the cursor gets revealed before hitting the edge of the viewport.\n         * Defaults to 30 (px).\n         */\n        revealHorizontalRightPadding?: number;\n        /**\n         * Render the editor selection with rounded borders.\n         * Defaults to true.\n         */\n        roundedSelection?: boolean;\n        /**\n         * Class name to be added to the editor.\n         */\n        extraEditorClassName?: string;\n        /**\n         * Should the editor be read only. See also `domReadOnly`.\n         * Defaults to false.\n         */\n        readOnly?: boolean;\n        /**\n         * Should the textarea used for input use the DOM `readonly` attribute.\n         * Defaults to false.\n         */\n        domReadOnly?: boolean;\n        /**\n         * Enable linked editing.\n         * Defaults to false.\n         */\n        linkedEditing?: boolean;\n        /**\n         * deprecated, use linkedEditing instead\n         */\n        renameOnType?: boolean;\n        /**\n         * Should the editor render validation decorations.\n         * Defaults to editable.\n         */\n        renderValidationDecorations?: 'editable' | 'on' | 'off';\n        /**\n         * Control the behavior and rendering of the scrollbars.\n         */\n        scrollbar?: IEditorScrollbarOptions;\n        /**\n         * Control the behavior and rendering of the minimap.\n         */\n        minimap?: IEditorMinimapOptions;\n        /**\n         * Control the behavior of the find widget.\n         */\n        find?: IEditorFindOptions;\n        /**\n         * Display overflow widgets as `fixed`.\n         * Defaults to `false`.\n         */\n        fixedOverflowWidgets?: boolean;\n        /**\n         * The number of vertical lanes the overview ruler should render.\n         * Defaults to 3.\n         */\n        overviewRulerLanes?: number;\n        /**\n         * Controls if a border should be drawn around the overview ruler.\n         * Defaults to `true`.\n         */\n        overviewRulerBorder?: boolean;\n        /**\n         * Control the cursor animation style, possible values are 'blink', 'smooth', 'phase', 'expand' and 'solid'.\n         * Defaults to 'blink'.\n         */\n        cursorBlinking?: 'blink' | 'smooth' | 'phase' | 'expand' | 'solid';\n        /**\n         * Zoom the font in the editor when using the mouse wheel in combination with holding Ctrl.\n         * Defaults to false.\n         */\n        mouseWheelZoom?: boolean;\n        /**\n         * Control the mouse pointer style, either 'text' or 'default' or 'copy'\n         * Defaults to 'text'\n         */\n        mouseStyle?: 'text' | 'default' | 'copy';\n        /**\n         * Enable smooth caret animation.\n         * Defaults to false.\n         */\n        cursorSmoothCaretAnimation?: boolean;\n        /**\n         * Control the cursor style, either 'block' or 'line'.\n         * Defaults to 'line'.\n         */\n        cursorStyle?: 'line' | 'block' | 'underline' | 'line-thin' | 'block-outline' | 'underline-thin';\n        /**\n         * Control the width of the cursor when cursorStyle is set to 'line'\n         */\n        cursorWidth?: number;\n        /**\n         * Enable font ligatures.\n         * Defaults to false.\n         */\n        fontLigatures?: boolean | string;\n        /**\n         * Disable the use of `transform: translate3d(0px, 0px, 0px)` for the editor margin and lines layers.\n         * The usage of `transform: translate3d(0px, 0px, 0px)` acts as a hint for browsers to create an extra layer.\n         * Defaults to false.\n         */\n        disableLayerHinting?: boolean;\n        /**\n         * Disable the optimizations for monospace fonts.\n         * Defaults to false.\n         */\n        disableMonospaceOptimizations?: boolean;\n        /**\n         * Should the cursor be hidden in the overview ruler.\n         * Defaults to false.\n         */\n        hideCursorInOverviewRuler?: boolean;\n        /**\n         * Enable that scrolling can go one screen size after the last line.\n         * Defaults to true.\n         */\n        scrollBeyondLastLine?: boolean;\n        /**\n         * Enable that scrolling can go beyond the last column by a number of columns.\n         * Defaults to 5.\n         */\n        scrollBeyondLastColumn?: number;\n        /**\n         * Enable that the editor animates scrolling to a position.\n         * Defaults to false.\n         */\n        smoothScrolling?: boolean;\n        /**\n         * Enable that the editor will install an interval to check if its container dom node size has changed.\n         * Enabling this might have a severe performance impact.\n         * Defaults to false.\n         */\n        automaticLayout?: boolean;\n        /**\n         * Control the wrapping of the editor.\n         * When `wordWrap` = \"off\", the lines will never wrap.\n         * When `wordWrap` = \"on\", the lines will wrap at the viewport width.\n         * When `wordWrap` = \"wordWrapColumn\", the lines will wrap at `wordWrapColumn`.\n         * When `wordWrap` = \"bounded\", the lines will wrap at min(viewport width, wordWrapColumn).\n         * Defaults to \"off\".\n         */\n        wordWrap?: 'off' | 'on' | 'wordWrapColumn' | 'bounded';\n        /**\n         * Override the `wordWrap` setting.\n         */\n        wordWrapOverride1?: 'off' | 'on' | 'inherit';\n        /**\n         * Override the `wordWrapOverride1` setting.\n         */\n        wordWrapOverride2?: 'off' | 'on' | 'inherit';\n        /**\n         * Control the wrapping of the editor.\n         * When `wordWrap` = \"off\", the lines will never wrap.\n         * When `wordWrap` = \"on\", the lines will wrap at the viewport width.\n         * When `wordWrap` = \"wordWrapColumn\", the lines will wrap at `wordWrapColumn`.\n         * When `wordWrap` = \"bounded\", the lines will wrap at min(viewport width, wordWrapColumn).\n         * Defaults to 80.\n         */\n        wordWrapColumn?: number;\n        /**\n         * Control indentation of wrapped lines. Can be: 'none', 'same', 'indent' or 'deepIndent'.\n         * Defaults to 'same' in vscode and to 'none' in monaco-editor.\n         */\n        wrappingIndent?: 'none' | 'same' | 'indent' | 'deepIndent';\n        /**\n         * Controls the wrapping strategy to use.\n         * Defaults to 'simple'.\n         */\n        wrappingStrategy?: 'simple' | 'advanced';\n        /**\n         * Configure word wrapping characters. A break will be introduced before these characters.\n         * Defaults to '([{‘“〈《「『【〔（［｛｢£¥＄￡￥+＋'.\n         */\n        wordWrapBreakBeforeCharacters?: string;\n        /**\n         * Configure word wrapping characters. A break will be introduced after these characters.\n         * Defaults to ' \\t})]?|/&.,;¢°′″‰℃、。｡､￠，．：；？！％・･ゝゞヽヾーァィゥェォッャュョヮヵヶぁぃぅぇぉっゃゅょゎゕゖㇰㇱㇲㇳㇴㇵㇶㇷㇸㇹㇺㇻㇼㇽㇾㇿ々〻ｧｨｩｪｫｬｭｮｯｰ”〉》」』】〕）］｝｣'.\n         */\n        wordWrapBreakAfterCharacters?: string;\n        /**\n         * Performance guard: Stop rendering a line after x characters.\n         * Defaults to 10000.\n         * Use -1 to never stop rendering\n         */\n        stopRenderingLineAfter?: number;\n        /**\n         * Configure the editor's hover.\n         */\n        hover?: IEditorHoverOptions;\n        /**\n         * Enable detecting links and making them clickable.\n         * Defaults to true.\n         */\n        links?: boolean;\n        /**\n         * Enable inline color decorators and color picker rendering.\n         */\n        colorDecorators?: boolean;\n        /**\n         * Control the behaviour of comments in the editor.\n         */\n        comments?: IEditorCommentsOptions;\n        /**\n         * Enable custom contextmenu.\n         * Defaults to true.\n         */\n        contextmenu?: boolean;\n        /**\n         * A multiplier to be used on the `deltaX` and `deltaY` of mouse wheel scroll events.\n         * Defaults to 1.\n         */\n        mouseWheelScrollSensitivity?: number;\n        /**\n         * FastScrolling mulitplier speed when pressing `Alt`\n         * Defaults to 5.\n         */\n        fastScrollSensitivity?: number;\n        /**\n         * Enable that the editor scrolls only the predominant axis. Prevents horizontal drift when scrolling vertically on a trackpad.\n         * Defaults to true.\n         */\n        scrollPredominantAxis?: boolean;\n        /**\n         * Enable that the selection with the mouse and keys is doing column selection.\n         * Defaults to false.\n         */\n        columnSelection?: boolean;\n        /**\n         * The modifier to be used to add multiple cursors with the mouse.\n         * Defaults to 'alt'\n         */\n        multiCursorModifier?: 'ctrlCmd' | 'alt';\n        /**\n         * Merge overlapping selections.\n         * Defaults to true\n         */\n        multiCursorMergeOverlapping?: boolean;\n        /**\n         * Configure the behaviour when pasting a text with the line count equal to the cursor count.\n         * Defaults to 'spread'.\n         */\n        multiCursorPaste?: 'spread' | 'full';\n        /**\n         * Configure the editor's accessibility support.\n         * Defaults to 'auto'. It is best to leave this to 'auto'.\n         */\n        accessibilitySupport?: 'auto' | 'off' | 'on';\n        /**\n         * Controls the number of lines in the editor that can be read out by a screen reader\n         */\n        accessibilityPageSize?: number;\n        /**\n         * Suggest options.\n         */\n        suggest?: ISuggestOptions;\n        inlineSuggest?: IInlineSuggestOptions;\n        /**\n         * Smart select options.\n         */\n        smartSelect?: ISmartSelectOptions;\n        /**\n         *\n         */\n        gotoLocation?: IGotoLocationOptions;\n        /**\n         * Enable quick suggestions (shadow suggestions)\n         * Defaults to true.\n         */\n        quickSuggestions?: boolean | IQuickSuggestionsOptions;\n        /**\n         * Quick suggestions show delay (in ms)\n         * Defaults to 10 (ms)\n         */\n        quickSuggestionsDelay?: number;\n        /**\n         * Controls the spacing around the editor.\n         */\n        padding?: IEditorPaddingOptions;\n        /**\n         * Parameter hint options.\n         */\n        parameterHints?: IEditorParameterHintOptions;\n        /**\n         * Options for auto closing brackets.\n         * Defaults to language defined behavior.\n         */\n        autoClosingBrackets?: EditorAutoClosingStrategy;\n        /**\n         * Options for auto closing quotes.\n         * Defaults to language defined behavior.\n         */\n        autoClosingQuotes?: EditorAutoClosingStrategy;\n        /**\n         * Options for pressing backspace near quotes or bracket pairs.\n         */\n        autoClosingDelete?: EditorAutoClosingEditStrategy;\n        /**\n         * Options for typing over closing quotes or brackets.\n         */\n        autoClosingOvertype?: EditorAutoClosingEditStrategy;\n        /**\n         * Options for auto surrounding.\n         * Defaults to always allowing auto surrounding.\n         */\n        autoSurround?: EditorAutoSurroundStrategy;\n        /**\n         * Controls whether the editor should automatically adjust the indentation when users type, paste, move or indent lines.\n         * Defaults to advanced.\n         */\n        autoIndent?: 'none' | 'keep' | 'brackets' | 'advanced' | 'full';\n        /**\n         * Emulate selection behaviour of tab characters when using spaces for indentation.\n         * This means selection will stick to tab stops.\n         */\n        stickyTabStops?: boolean;\n        /**\n         * Enable format on type.\n         * Defaults to false.\n         */\n        formatOnType?: boolean;\n        /**\n         * Enable format on paste.\n         * Defaults to false.\n         */\n        formatOnPaste?: boolean;\n        /**\n         * Controls if the editor should allow to move selections via drag and drop.\n         * Defaults to false.\n         */\n        dragAndDrop?: boolean;\n        /**\n         * Enable the suggestion box to pop-up on trigger characters.\n         * Defaults to true.\n         */\n        suggestOnTriggerCharacters?: boolean;\n        /**\n         * Accept suggestions on ENTER.\n         * Defaults to 'on'.\n         */\n        acceptSuggestionOnEnter?: 'on' | 'smart' | 'off';\n        /**\n         * Accept suggestions on provider defined characters.\n         * Defaults to true.\n         */\n        acceptSuggestionOnCommitCharacter?: boolean;\n        /**\n         * Enable snippet suggestions. Default to 'true'.\n         */\n        snippetSuggestions?: 'top' | 'bottom' | 'inline' | 'none';\n        /**\n         * Copying without a selection copies the current line.\n         */\n        emptySelectionClipboard?: boolean;\n        /**\n         * Syntax highlighting is copied.\n         */\n        copyWithSyntaxHighlighting?: boolean;\n        /**\n         * The history mode for suggestions.\n         */\n        suggestSelection?: 'first' | 'recentlyUsed' | 'recentlyUsedByPrefix';\n        /**\n         * The font size for the suggest widget.\n         * Defaults to the editor font size.\n         */\n        suggestFontSize?: number;\n        /**\n         * The line height for the suggest widget.\n         * Defaults to the editor line height.\n         */\n        suggestLineHeight?: number;\n        /**\n         * Enable tab completion.\n         */\n        tabCompletion?: 'on' | 'off' | 'onlySnippets';\n        /**\n         * Enable selection highlight.\n         * Defaults to true.\n         */\n        selectionHighlight?: boolean;\n        /**\n         * Enable semantic occurrences highlight.\n         * Defaults to true.\n         */\n        occurrencesHighlight?: boolean;\n        /**\n         * Show code lens\n         * Defaults to true.\n         */\n        codeLens?: boolean;\n        /**\n         * Code lens font family. Defaults to editor font family.\n         */\n        codeLensFontFamily?: string;\n        /**\n         * Code lens font size. Default to 90% of the editor font size\n         */\n        codeLensFontSize?: number;\n        /**\n         * Control the behavior and rendering of the code action lightbulb.\n         */\n        lightbulb?: IEditorLightbulbOptions;\n        /**\n         * Timeout for running code actions on save.\n         */\n        codeActionsOnSaveTimeout?: number;\n        /**\n         * Enable code folding.\n         * Defaults to true.\n         */\n        folding?: boolean;\n        /**\n         * Selects the folding strategy. 'auto' uses the strategies contributed for the current document, 'indentation' uses the indentation based folding strategy.\n         * Defaults to 'auto'.\n         */\n        foldingStrategy?: 'auto' | 'indentation';\n        /**\n         * Enable highlight for folded regions.\n         * Defaults to true.\n         */\n        foldingHighlight?: boolean;\n        /**\n         * Auto fold imports folding regions.\n         * Defaults to true.\n         */\n        foldingImportsByDefault?: boolean;\n        /**\n         * Controls whether the fold actions in the gutter stay always visible or hide unless the mouse is over the gutter.\n         * Defaults to 'mouseover'.\n         */\n        showFoldingControls?: 'always' | 'mouseover';\n        /**\n         * Controls whether clicking on the empty content after a folded line will unfold the line.\n         * Defaults to false.\n         */\n        unfoldOnClickAfterEndOfLine?: boolean;\n        /**\n         * Enable highlighting of matching brackets.\n         * Defaults to 'always'.\n         */\n        matchBrackets?: 'never' | 'near' | 'always';\n        /**\n         * Enable rendering of whitespace.\n         * Defaults to 'selection'.\n         */\n        renderWhitespace?: 'none' | 'boundary' | 'selection' | 'trailing' | 'all';\n        /**\n         * Enable rendering of control characters.\n         * Defaults to false.\n         */\n        renderControlCharacters?: boolean;\n        /**\n         * Enable rendering of indent guides.\n         * Defaults to true.\n         */\n        renderIndentGuides?: boolean;\n        /**\n         * Enable highlighting of the active indent guide.\n         * Defaults to true.\n         */\n        highlightActiveIndentGuide?: boolean;\n        /**\n         * Enable rendering of current line highlight.\n         * Defaults to all.\n         */\n        renderLineHighlight?: 'none' | 'gutter' | 'line' | 'all';\n        /**\n         * Control if the current line highlight should be rendered only the editor is focused.\n         * Defaults to false.\n         */\n        renderLineHighlightOnlyWhenFocus?: boolean;\n        /**\n         * Inserting and deleting whitespace follows tab stops.\n         */\n        useTabStops?: boolean;\n        /**\n         * The font family\n         */\n        fontFamily?: string;\n        /**\n         * The font weight\n         */\n        fontWeight?: string;\n        /**\n         * The font size\n         */\n        fontSize?: number;\n        /**\n         * The line height\n         */\n        lineHeight?: number;\n        /**\n         * The letter spacing\n         */\n        letterSpacing?: number;\n        /**\n         * Controls fading out of unused variables.\n         */\n        showUnused?: boolean;\n        /**\n         * Controls whether to focus the inline editor in the peek widget by default.\n         * Defaults to false.\n         */\n        peekWidgetDefaultFocus?: 'tree' | 'editor';\n        /**\n         * Controls whether the definition link opens element in the peek widget.\n         * Defaults to false.\n         */\n        definitionLinkOpensInPeek?: boolean;\n        /**\n         * Controls strikethrough deprecated variables.\n         */\n        showDeprecated?: boolean;\n        /**\n         * Control the behavior and rendering of the inline hints.\n         */\n        inlayHints?: IEditorInlayHintsOptions;\n        /**\n         * Control if the editor should use shadow DOM.\n         */\n        useShadowDOM?: boolean;\n    }\n\n    /**\n     * Configuration options for the diff editor.\n     */\n    export interface IDiffEditorOptions extends IEditorOptions {\n        /**\n         * Allow the user to resize the diff editor split view.\n         * Defaults to true.\n         */\n        enableSplitViewResizing?: boolean;\n        /**\n         * Render the differences in two side-by-side editors.\n         * Defaults to true.\n         */\n        renderSideBySide?: boolean;\n        /**\n         * Timeout in milliseconds after which diff computation is cancelled.\n         * Defaults to 5000.\n         */\n        maxComputationTime?: number;\n        /**\n         * Compute the diff by ignoring leading/trailing whitespace\n         * Defaults to true.\n         */\n        ignoreTrimWhitespace?: boolean;\n        /**\n         * Render +/- indicators for added/deleted changes.\n         * Defaults to true.\n         */\n        renderIndicators?: boolean;\n        /**\n         * Original model should be editable?\n         * Defaults to false.\n         */\n        originalEditable?: boolean;\n        /**\n         * Should the diff editor enable code lens?\n         * Defaults to false.\n         */\n        diffCodeLens?: boolean;\n        /**\n         * Is the diff editor inside another editor\n         * Defaults to false\n         */\n        isInEmbeddedEditor?: boolean;\n        /**\n         * Is the diff editor should render overview ruler\n         * Defaults to true\n         */\n        renderOverviewRuler?: boolean;\n        /**\n         * Control the wrapping of the diff editor.\n         */\n        diffWordWrap?: 'off' | 'on' | 'inherit';\n        /**\n         * Aria label for original editor.\n         */\n        originalAriaLabel?: string;\n        /**\n         * Aria label for modifed editor.\n         */\n        modifiedAriaLabel?: string;\n    }\n\n    /**\n     * An event describing that the configuration of the editor has changed.\n     */\n    export class ConfigurationChangedEvent {\n        hasChanged(id: EditorOption): boolean;\n    }\n\n    /**\n     * All computed editor options.\n     */\n    export interface IComputedEditorOptions {\n        get<T extends EditorOption>(id: T): FindComputedEditorOptionValueById<T>;\n    }\n\n    export interface IEditorOption<K1 extends EditorOption, V> {\n        readonly id: K1;\n        readonly name: string;\n        defaultValue: V;\n    }\n\n    /**\n     * Configuration options for editor comments\n     */\n    export interface IEditorCommentsOptions {\n        /**\n         * Insert a space after the line comment token and inside the block comments tokens.\n         * Defaults to true.\n         */\n        insertSpace?: boolean;\n        /**\n         * Ignore empty lines when inserting line comments.\n         * Defaults to true.\n         */\n        ignoreEmptyLines?: boolean;\n    }\n\n    export type EditorCommentsOptions = Readonly<Required<IEditorCommentsOptions>>;\n\n    /**\n     * The kind of animation in which the editor's cursor should be rendered.\n     */\n    export enum TextEditorCursorBlinkingStyle {\n        /**\n         * Hidden\n         */\n        Hidden = 0,\n        /**\n         * Blinking\n         */\n        Blink = 1,\n        /**\n         * Blinking with smooth fading\n         */\n        Smooth = 2,\n        /**\n         * Blinking with prolonged filled state and smooth fading\n         */\n        Phase = 3,\n        /**\n         * Expand collapse animation on the y axis\n         */\n        Expand = 4,\n        /**\n         * No-Blinking\n         */\n        Solid = 5\n    }\n\n    /**\n     * The style in which the editor's cursor should be rendered.\n     */\n    export enum TextEditorCursorStyle {\n        /**\n         * As a vertical line (sitting between two characters).\n         */\n        Line = 1,\n        /**\n         * As a block (sitting on top of a character).\n         */\n        Block = 2,\n        /**\n         * As a horizontal line (sitting under a character).\n         */\n        Underline = 3,\n        /**\n         * As a thin vertical line (sitting between two characters).\n         */\n        LineThin = 4,\n        /**\n         * As an outlined block (sitting on top of a character).\n         */\n        BlockOutline = 5,\n        /**\n         * As a thin horizontal line (sitting under a character).\n         */\n        UnderlineThin = 6\n    }\n\n    /**\n     * Configuration options for editor find widget\n     */\n    export interface IEditorFindOptions {\n        /**\n        * Controls whether the cursor should move to find matches while typing.\n        */\n        cursorMoveOnType?: boolean;\n        /**\n         * Controls if we seed search string in the Find Widget with editor selection.\n         */\n        seedSearchStringFromSelection?: 'never' | 'always' | 'selection';\n        /**\n         * Controls if Find in Selection flag is turned on in the editor.\n         */\n        autoFindInSelection?: 'never' | 'always' | 'multiline';\n        addExtraSpaceOnTop?: boolean;\n        /**\n         * Controls whether the search automatically restarts from the beginning (or the end) when no further matches can be found\n         */\n        loop?: boolean;\n    }\n\n    export type EditorFindOptions = Readonly<Required<IEditorFindOptions>>;\n\n    export type GoToLocationValues = 'peek' | 'gotoAndPeek' | 'goto';\n\n    /**\n     * Configuration options for go to location\n     */\n    export interface IGotoLocationOptions {\n        multiple?: GoToLocationValues;\n        multipleDefinitions?: GoToLocationValues;\n        multipleTypeDefinitions?: GoToLocationValues;\n        multipleDeclarations?: GoToLocationValues;\n        multipleImplementations?: GoToLocationValues;\n        multipleReferences?: GoToLocationValues;\n        alternativeDefinitionCommand?: string;\n        alternativeTypeDefinitionCommand?: string;\n        alternativeDeclarationCommand?: string;\n        alternativeImplementationCommand?: string;\n        alternativeReferenceCommand?: string;\n    }\n\n    export type GoToLocationOptions = Readonly<Required<IGotoLocationOptions>>;\n\n    /**\n     * Configuration options for editor hover\n     */\n    export interface IEditorHoverOptions {\n        /**\n         * Enable the hover.\n         * Defaults to true.\n         */\n        enabled?: boolean;\n        /**\n         * Delay for showing the hover.\n         * Defaults to 300.\n         */\n        delay?: number;\n        /**\n         * Is the hover sticky such that it can be clicked and its contents selected?\n         * Defaults to true.\n         */\n        sticky?: boolean;\n    }\n\n    export type EditorHoverOptions = Readonly<Required<IEditorHoverOptions>>;\n\n    /**\n     * A description for the overview ruler position.\n     */\n    export interface OverviewRulerPosition {\n        /**\n         * Width of the overview ruler\n         */\n        readonly width: number;\n        /**\n         * Height of the overview ruler\n         */\n        readonly height: number;\n        /**\n         * Top position for the overview ruler\n         */\n        readonly top: number;\n        /**\n         * Right position for the overview ruler\n         */\n        readonly right: number;\n    }\n\n    export enum RenderMinimap {\n        None = 0,\n        Text = 1,\n        Blocks = 2\n    }\n\n    /**\n     * The internal layout details of the editor.\n     */\n    export interface EditorLayoutInfo {\n        /**\n         * Full editor width.\n         */\n        readonly width: number;\n        /**\n         * Full editor height.\n         */\n        readonly height: number;\n        /**\n         * Left position for the glyph margin.\n         */\n        readonly glyphMarginLeft: number;\n        /**\n         * The width of the glyph margin.\n         */\n        readonly glyphMarginWidth: number;\n        /**\n         * Left position for the line numbers.\n         */\n        readonly lineNumbersLeft: number;\n        /**\n         * The width of the line numbers.\n         */\n        readonly lineNumbersWidth: number;\n        /**\n         * Left position for the line decorations.\n         */\n        readonly decorationsLeft: number;\n        /**\n         * The width of the line decorations.\n         */\n        readonly decorationsWidth: number;\n        /**\n         * Left position for the content (actual text)\n         */\n        readonly contentLeft: number;\n        /**\n         * The width of the content (actual text)\n         */\n        readonly contentWidth: number;\n        /**\n         * Layout information for the minimap\n         */\n        readonly minimap: EditorMinimapLayoutInfo;\n        /**\n         * The number of columns (of typical characters) fitting on a viewport line.\n         */\n        readonly viewportColumn: number;\n        readonly isWordWrapMinified: boolean;\n        readonly isViewportWrapping: boolean;\n        readonly wrappingColumn: number;\n        /**\n         * The width of the vertical scrollbar.\n         */\n        readonly verticalScrollbarWidth: number;\n        /**\n         * The height of the horizontal scrollbar.\n         */\n        readonly horizontalScrollbarHeight: number;\n        /**\n         * The position of the overview ruler.\n         */\n        readonly overviewRuler: OverviewRulerPosition;\n    }\n\n    /**\n     * The internal layout details of the editor.\n     */\n    export interface EditorMinimapLayoutInfo {\n        readonly renderMinimap: RenderMinimap;\n        readonly minimapLeft: number;\n        readonly minimapWidth: number;\n        readonly minimapHeightIsEditorHeight: boolean;\n        readonly minimapIsSampling: boolean;\n        readonly minimapScale: number;\n        readonly minimapLineHeight: number;\n        readonly minimapCanvasInnerWidth: number;\n        readonly minimapCanvasInnerHeight: number;\n        readonly minimapCanvasOuterWidth: number;\n        readonly minimapCanvasOuterHeight: number;\n    }\n\n    /**\n     * Configuration options for editor lightbulb\n     */\n    export interface IEditorLightbulbOptions {\n        /**\n         * Enable the lightbulb code action.\n         * Defaults to true.\n         */\n        enabled?: boolean;\n    }\n\n    export type EditorLightbulbOptions = Readonly<Required<IEditorLightbulbOptions>>;\n\n    /**\n     * Configuration options for editor inlayHints\n     */\n    export interface IEditorInlayHintsOptions {\n        /**\n         * Enable the inline hints.\n         * Defaults to true.\n         */\n        enabled?: boolean;\n        /**\n         * Font size of inline hints.\n         * Default to 90% of the editor font size.\n         */\n        fontSize?: number;\n        /**\n         * Font family of inline hints.\n         * Defaults to editor font family.\n         */\n        fontFamily?: string;\n    }\n\n    export type EditorInlayHintsOptions = Readonly<Required<IEditorInlayHintsOptions>>;\n\n    /**\n     * Configuration options for editor minimap\n     */\n    export interface IEditorMinimapOptions {\n        /**\n         * Enable the rendering of the minimap.\n         * Defaults to true.\n         */\n        enabled?: boolean;\n        /**\n         * Control the side of the minimap in editor.\n         * Defaults to 'right'.\n         */\n        side?: 'right' | 'left';\n        /**\n         * Control the minimap rendering mode.\n         * Defaults to 'actual'.\n         */\n        size?: 'proportional' | 'fill' | 'fit';\n        /**\n         * Control the rendering of the minimap slider.\n         * Defaults to 'mouseover'.\n         */\n        showSlider?: 'always' | 'mouseover';\n        /**\n         * Render the actual text on a line (as opposed to color blocks).\n         * Defaults to true.\n         */\n        renderCharacters?: boolean;\n        /**\n         * Limit the width of the minimap to render at most a certain number of columns.\n         * Defaults to 120.\n         */\n        maxColumn?: number;\n        /**\n         * Relative size of the font in the minimap. Defaults to 1.\n         */\n        scale?: number;\n    }\n\n    export type EditorMinimapOptions = Readonly<Required<IEditorMinimapOptions>>;\n\n    /**\n     * Configuration options for editor padding\n     */\n    export interface IEditorPaddingOptions {\n        /**\n         * Spacing between top edge of editor and first line.\n         */\n        top?: number;\n        /**\n         * Spacing between bottom edge of editor and last line.\n         */\n        bottom?: number;\n    }\n\n    export interface InternalEditorPaddingOptions {\n        readonly top: number;\n        readonly bottom: number;\n    }\n\n    /**\n     * Configuration options for parameter hints\n     */\n    export interface IEditorParameterHintOptions {\n        /**\n         * Enable parameter hints.\n         * Defaults to true.\n         */\n        enabled?: boolean;\n        /**\n         * Enable cycling of parameter hints.\n         * Defaults to false.\n         */\n        cycle?: boolean;\n    }\n\n    export type InternalParameterHintOptions = Readonly<Required<IEditorParameterHintOptions>>;\n\n    /**\n     * Configuration options for quick suggestions\n     */\n    export interface IQuickSuggestionsOptions {\n        other?: boolean;\n        comments?: boolean;\n        strings?: boolean;\n    }\n\n    export type ValidQuickSuggestionsOptions = boolean | Readonly<Required<IQuickSuggestionsOptions>>;\n\n    export type LineNumbersType = 'on' | 'off' | 'relative' | 'interval' | ((lineNumber: number) => string);\n\n    export enum RenderLineNumbersType {\n        Off = 0,\n        On = 1,\n        Relative = 2,\n        Interval = 3,\n        Custom = 4\n    }\n\n    export interface InternalEditorRenderLineNumbersOptions {\n        readonly renderType: RenderLineNumbersType;\n        readonly renderFn: ((lineNumber: number) => string) | null;\n    }\n\n    export interface IRulerOption {\n        readonly column: number;\n        readonly color: string | null;\n    }\n\n    /**\n     * Configuration options for editor scrollbars\n     */\n    export interface IEditorScrollbarOptions {\n        /**\n         * The size of arrows (if displayed).\n         * Defaults to 11.\n         * **NOTE**: This option cannot be updated using `updateOptions()`\n         */\n        arrowSize?: number;\n        /**\n         * Render vertical scrollbar.\n         * Defaults to 'auto'.\n         */\n        vertical?: 'auto' | 'visible' | 'hidden';\n        /**\n         * Render horizontal scrollbar.\n         * Defaults to 'auto'.\n         */\n        horizontal?: 'auto' | 'visible' | 'hidden';\n        /**\n         * Cast horizontal and vertical shadows when the content is scrolled.\n         * Defaults to true.\n         * **NOTE**: This option cannot be updated using `updateOptions()`\n         */\n        useShadows?: boolean;\n        /**\n         * Render arrows at the top and bottom of the vertical scrollbar.\n         * Defaults to false.\n         * **NOTE**: This option cannot be updated using `updateOptions()`\n         */\n        verticalHasArrows?: boolean;\n        /**\n         * Render arrows at the left and right of the horizontal scrollbar.\n         * Defaults to false.\n         * **NOTE**: This option cannot be updated using `updateOptions()`\n         */\n        horizontalHasArrows?: boolean;\n        /**\n         * Listen to mouse wheel events and react to them by scrolling.\n         * Defaults to true.\n         */\n        handleMouseWheel?: boolean;\n        /**\n         * Always consume mouse wheel events (always call preventDefault() and stopPropagation() on the browser events).\n         * Defaults to true.\n         * **NOTE**: This option cannot be updated using `updateOptions()`\n         */\n        alwaysConsumeMouseWheel?: boolean;\n        /**\n         * Height in pixels for the horizontal scrollbar.\n         * Defaults to 10 (px).\n         */\n        horizontalScrollbarSize?: number;\n        /**\n         * Width in pixels for the vertical scrollbar.\n         * Defaults to 10 (px).\n         */\n        verticalScrollbarSize?: number;\n        /**\n         * Width in pixels for the vertical slider.\n         * Defaults to `verticalScrollbarSize`.\n         * **NOTE**: This option cannot be updated using `updateOptions()`\n         */\n        verticalSliderSize?: number;\n        /**\n         * Height in pixels for the horizontal slider.\n         * Defaults to `horizontalScrollbarSize`.\n         * **NOTE**: This option cannot be updated using `updateOptions()`\n         */\n        horizontalSliderSize?: number;\n        /**\n         * Scroll gutter clicks move by page vs jump to position.\n         * Defaults to false.\n         */\n        scrollByPage?: boolean;\n    }\n\n    export interface InternalEditorScrollbarOptions {\n        readonly arrowSize: number;\n        readonly vertical: ScrollbarVisibility;\n        readonly horizontal: ScrollbarVisibility;\n        readonly useShadows: boolean;\n        readonly verticalHasArrows: boolean;\n        readonly horizontalHasArrows: boolean;\n        readonly handleMouseWheel: boolean;\n        readonly alwaysConsumeMouseWheel: boolean;\n        readonly horizontalScrollbarSize: number;\n        readonly horizontalSliderSize: number;\n        readonly verticalScrollbarSize: number;\n        readonly verticalSliderSize: number;\n        readonly scrollByPage: boolean;\n    }\n\n    export interface IInlineSuggestOptions {\n        /**\n         * Enable or disable the rendering of automatic inline completions.\n        */\n        enabled?: boolean;\n        /**\n         * Configures the mode.\n         * Use `prefix` to only show ghost text if the text to replace is a prefix of the suggestion text.\n         * Use `subword` to only show ghost text if the replace text is a subword of the suggestion text.\n         * Use `subwordSmart` to only show ghost text if the replace text is a subword of the suggestion text, but the subword must start after the cursor position.\n         * Defaults to `prefix`.\n        */\n        mode?: 'prefix' | 'subword' | 'subwordSmart';\n    }\n\n    export type InternalInlineSuggestOptions = Readonly<Required<IInlineSuggestOptions>>;\n\n    /**\n     * Configuration options for editor suggest widget\n     */\n    export interface ISuggestOptions {\n        /**\n         * Overwrite word ends on accept. Default to false.\n         */\n        insertMode?: 'insert' | 'replace';\n        /**\n         * Enable graceful matching. Defaults to true.\n         */\n        filterGraceful?: boolean;\n        /**\n         * Prevent quick suggestions when a snippet is active. Defaults to true.\n         */\n        snippetsPreventQuickSuggestions?: boolean;\n        /**\n         * Favors words that appear close to the cursor.\n         */\n        localityBonus?: boolean;\n        /**\n         * Enable using global storage for remembering suggestions.\n         */\n        shareSuggestSelections?: boolean;\n        /**\n         * Enable or disable icons in suggestions. Defaults to true.\n         */\n        showIcons?: boolean;\n        /**\n         * Enable or disable the suggest status bar.\n         */\n        showStatusBar?: boolean;\n        /**\n         * Enable or disable the rendering of the suggestion preview.\n         */\n        preview?: boolean;\n        /**\n         * Configures the mode of the preview.\n        */\n        previewMode?: 'prefix' | 'subword' | 'subwordSmart';\n        /**\n         * Show details inline with the label. Defaults to true.\n         */\n        showInlineDetails?: boolean;\n        /**\n         * Show method-suggestions.\n         */\n        showMethods?: boolean;\n        /**\n         * Show function-suggestions.\n         */\n        showFunctions?: boolean;\n        /**\n         * Show constructor-suggestions.\n         */\n        showConstructors?: boolean;\n        /**\n         * Show deprecated-suggestions.\n         */\n        showDeprecated?: boolean;\n        /**\n         * Show field-suggestions.\n         */\n        showFields?: boolean;\n        /**\n         * Show variable-suggestions.\n         */\n        showVariables?: boolean;\n        /**\n         * Show class-suggestions.\n         */\n        showClasses?: boolean;\n        /**\n         * Show struct-suggestions.\n         */\n        showStructs?: boolean;\n        /**\n         * Show interface-suggestions.\n         */\n        showInterfaces?: boolean;\n        /**\n         * Show module-suggestions.\n         */\n        showModules?: boolean;\n        /**\n         * Show property-suggestions.\n         */\n        showProperties?: boolean;\n        /**\n         * Show event-suggestions.\n         */\n        showEvents?: boolean;\n        /**\n         * Show operator-suggestions.\n         */\n        showOperators?: boolean;\n        /**\n         * Show unit-suggestions.\n         */\n        showUnits?: boolean;\n        /**\n         * Show value-suggestions.\n         */\n        showValues?: boolean;\n        /**\n         * Show constant-suggestions.\n         */\n        showConstants?: boolean;\n        /**\n         * Show enum-suggestions.\n         */\n        showEnums?: boolean;\n        /**\n         * Show enumMember-suggestions.\n         */\n        showEnumMembers?: boolean;\n        /**\n         * Show keyword-suggestions.\n         */\n        showKeywords?: boolean;\n        /**\n         * Show text-suggestions.\n         */\n        showWords?: boolean;\n        /**\n         * Show color-suggestions.\n         */\n        showColors?: boolean;\n        /**\n         * Show file-suggestions.\n         */\n        showFiles?: boolean;\n        /**\n         * Show reference-suggestions.\n         */\n        showReferences?: boolean;\n        /**\n         * Show folder-suggestions.\n         */\n        showFolders?: boolean;\n        /**\n         * Show typeParameter-suggestions.\n         */\n        showTypeParameters?: boolean;\n        /**\n         * Show issue-suggestions.\n         */\n        showIssues?: boolean;\n        /**\n         * Show user-suggestions.\n         */\n        showUsers?: boolean;\n        /**\n         * Show snippet-suggestions.\n         */\n        showSnippets?: boolean;\n    }\n\n    export type InternalSuggestOptions = Readonly<Required<ISuggestOptions>>;\n\n    export interface ISmartSelectOptions {\n        selectLeadingAndTrailingWhitespace?: boolean;\n    }\n\n    export type SmartSelectOptions = Readonly<Required<ISmartSelectOptions>>;\n\n    /**\n     * Describes how to indent wrapped lines.\n     */\n    export enum WrappingIndent {\n        /**\n         * No indentation => wrapped lines begin at column 1.\n         */\n        None = 0,\n        /**\n         * Same => wrapped lines get the same indentation as the parent.\n         */\n        Same = 1,\n        /**\n         * Indent => wrapped lines get +1 indentation toward the parent.\n         */\n        Indent = 2,\n        /**\n         * DeepIndent => wrapped lines get +2 indentation toward the parent.\n         */\n        DeepIndent = 3\n    }\n\n    export interface EditorWrappingInfo {\n        readonly isDominatedByLongLines: boolean;\n        readonly isWordWrapMinified: boolean;\n        readonly isViewportWrapping: boolean;\n        readonly wrappingColumn: number;\n    }\n\n    export enum EditorOption {\n        acceptSuggestionOnCommitCharacter = 0,\n        acceptSuggestionOnEnter = 1,\n        accessibilitySupport = 2,\n        accessibilityPageSize = 3,\n        ariaLabel = 4,\n        autoClosingBrackets = 5,\n        autoClosingDelete = 6,\n        autoClosingOvertype = 7,\n        autoClosingQuotes = 8,\n        autoIndent = 9,\n        automaticLayout = 10,\n        autoSurround = 11,\n        codeLens = 12,\n        codeLensFontFamily = 13,\n        codeLensFontSize = 14,\n        colorDecorators = 15,\n        columnSelection = 16,\n        comments = 17,\n        contextmenu = 18,\n        copyWithSyntaxHighlighting = 19,\n        cursorBlinking = 20,\n        cursorSmoothCaretAnimation = 21,\n        cursorStyle = 22,\n        cursorSurroundingLines = 23,\n        cursorSurroundingLinesStyle = 24,\n        cursorWidth = 25,\n        disableLayerHinting = 26,\n        disableMonospaceOptimizations = 27,\n        domReadOnly = 28,\n        dragAndDrop = 29,\n        emptySelectionClipboard = 30,\n        extraEditorClassName = 31,\n        fastScrollSensitivity = 32,\n        find = 33,\n        fixedOverflowWidgets = 34,\n        folding = 35,\n        foldingStrategy = 36,\n        foldingHighlight = 37,\n        foldingImportsByDefault = 38,\n        unfoldOnClickAfterEndOfLine = 39,\n        fontFamily = 40,\n        fontInfo = 41,\n        fontLigatures = 42,\n        fontSize = 43,\n        fontWeight = 44,\n        formatOnPaste = 45,\n        formatOnType = 46,\n        glyphMargin = 47,\n        gotoLocation = 48,\n        hideCursorInOverviewRuler = 49,\n        highlightActiveIndentGuide = 50,\n        hover = 51,\n        inDiffEditor = 52,\n        inlineSuggest = 53,\n        letterSpacing = 54,\n        lightbulb = 55,\n        lineDecorationsWidth = 56,\n        lineHeight = 57,\n        lineNumbers = 58,\n        lineNumbersMinChars = 59,\n        linkedEditing = 60,\n        links = 61,\n        matchBrackets = 62,\n        minimap = 63,\n        mouseStyle = 64,\n        mouseWheelScrollSensitivity = 65,\n        mouseWheelZoom = 66,\n        multiCursorMergeOverlapping = 67,\n        multiCursorModifier = 68,\n        multiCursorPaste = 69,\n        occurrencesHighlight = 70,\n        overviewRulerBorder = 71,\n        overviewRulerLanes = 72,\n        padding = 73,\n        parameterHints = 74,\n        peekWidgetDefaultFocus = 75,\n        definitionLinkOpensInPeek = 76,\n        quickSuggestions = 77,\n        quickSuggestionsDelay = 78,\n        readOnly = 79,\n        renameOnType = 80,\n        renderControlCharacters = 81,\n        renderIndentGuides = 82,\n        renderFinalNewline = 83,\n        renderLineHighlight = 84,\n        renderLineHighlightOnlyWhenFocus = 85,\n        renderValidationDecorations = 86,\n        renderWhitespace = 87,\n        revealHorizontalRightPadding = 88,\n        roundedSelection = 89,\n        rulers = 90,\n        scrollbar = 91,\n        scrollBeyondLastColumn = 92,\n        scrollBeyondLastLine = 93,\n        scrollPredominantAxis = 94,\n        selectionClipboard = 95,\n        selectionHighlight = 96,\n        selectOnLineNumbers = 97,\n        showFoldingControls = 98,\n        showUnused = 99,\n        snippetSuggestions = 100,\n        smartSelect = 101,\n        smoothScrolling = 102,\n        stickyTabStops = 103,\n        stopRenderingLineAfter = 104,\n        suggest = 105,\n        suggestFontSize = 106,\n        suggestLineHeight = 107,\n        suggestOnTriggerCharacters = 108,\n        suggestSelection = 109,\n        tabCompletion = 110,\n        tabIndex = 111,\n        unusualLineTerminators = 112,\n        useShadowDOM = 113,\n        useTabStops = 114,\n        wordSeparators = 115,\n        wordWrap = 116,\n        wordWrapBreakAfterCharacters = 117,\n        wordWrapBreakBeforeCharacters = 118,\n        wordWrapColumn = 119,\n        wordWrapOverride1 = 120,\n        wordWrapOverride2 = 121,\n        wrappingIndent = 122,\n        wrappingStrategy = 123,\n        showDeprecated = 124,\n        inlayHints = 125,\n        editorClassName = 126,\n        pixelRatio = 127,\n        tabFocusMode = 128,\n        layoutInfo = 129,\n        wrappingInfo = 130\n    }\n    export const EditorOptions: {\n        acceptSuggestionOnCommitCharacter: IEditorOption<EditorOption.acceptSuggestionOnCommitCharacter, boolean>;\n        acceptSuggestionOnEnter: IEditorOption<EditorOption.acceptSuggestionOnEnter, 'on' | 'off' | 'smart'>;\n        accessibilitySupport: IEditorOption<EditorOption.accessibilitySupport, AccessibilitySupport>;\n        accessibilityPageSize: IEditorOption<EditorOption.accessibilityPageSize, number>;\n        ariaLabel: IEditorOption<EditorOption.ariaLabel, string>;\n        autoClosingBrackets: IEditorOption<EditorOption.autoClosingBrackets, 'always' | 'languageDefined' | 'beforeWhitespace' | 'never'>;\n        autoClosingDelete: IEditorOption<EditorOption.autoClosingDelete, 'always' | 'never' | 'auto'>;\n        autoClosingOvertype: IEditorOption<EditorOption.autoClosingOvertype, 'always' | 'never' | 'auto'>;\n        autoClosingQuotes: IEditorOption<EditorOption.autoClosingQuotes, 'always' | 'languageDefined' | 'beforeWhitespace' | 'never'>;\n        autoIndent: IEditorOption<EditorOption.autoIndent, EditorAutoIndentStrategy>;\n        automaticLayout: IEditorOption<EditorOption.automaticLayout, boolean>;\n        autoSurround: IEditorOption<EditorOption.autoSurround, 'languageDefined' | 'never' | 'quotes' | 'brackets'>;\n        stickyTabStops: IEditorOption<EditorOption.stickyTabStops, boolean>;\n        codeLens: IEditorOption<EditorOption.codeLens, boolean>;\n        codeLensFontFamily: IEditorOption<EditorOption.codeLensFontFamily, string>;\n        codeLensFontSize: IEditorOption<EditorOption.codeLensFontSize, number>;\n        colorDecorators: IEditorOption<EditorOption.colorDecorators, boolean>;\n        columnSelection: IEditorOption<EditorOption.columnSelection, boolean>;\n        comments: IEditorOption<EditorOption.comments, EditorCommentsOptions>;\n        contextmenu: IEditorOption<EditorOption.contextmenu, boolean>;\n        copyWithSyntaxHighlighting: IEditorOption<EditorOption.copyWithSyntaxHighlighting, boolean>;\n        cursorBlinking: IEditorOption<EditorOption.cursorBlinking, TextEditorCursorBlinkingStyle>;\n        cursorSmoothCaretAnimation: IEditorOption<EditorOption.cursorSmoothCaretAnimation, boolean>;\n        cursorStyle: IEditorOption<EditorOption.cursorStyle, TextEditorCursorStyle>;\n        cursorSurroundingLines: IEditorOption<EditorOption.cursorSurroundingLines, number>;\n        cursorSurroundingLinesStyle: IEditorOption<EditorOption.cursorSurroundingLinesStyle, 'default' | 'all'>;\n        cursorWidth: IEditorOption<EditorOption.cursorWidth, number>;\n        disableLayerHinting: IEditorOption<EditorOption.disableLayerHinting, boolean>;\n        disableMonospaceOptimizations: IEditorOption<EditorOption.disableMonospaceOptimizations, boolean>;\n        domReadOnly: IEditorOption<EditorOption.domReadOnly, boolean>;\n        dragAndDrop: IEditorOption<EditorOption.dragAndDrop, boolean>;\n        emptySelectionClipboard: IEditorOption<EditorOption.emptySelectionClipboard, boolean>;\n        extraEditorClassName: IEditorOption<EditorOption.extraEditorClassName, string>;\n        fastScrollSensitivity: IEditorOption<EditorOption.fastScrollSensitivity, number>;\n        find: IEditorOption<EditorOption.find, EditorFindOptions>;\n        fixedOverflowWidgets: IEditorOption<EditorOption.fixedOverflowWidgets, boolean>;\n        folding: IEditorOption<EditorOption.folding, boolean>;\n        foldingStrategy: IEditorOption<EditorOption.foldingStrategy, 'auto' | 'indentation'>;\n        foldingHighlight: IEditorOption<EditorOption.foldingHighlight, boolean>;\n        foldingImportsByDefault: IEditorOption<EditorOption.foldingImportsByDefault, boolean>;\n        unfoldOnClickAfterEndOfLine: IEditorOption<EditorOption.unfoldOnClickAfterEndOfLine, boolean>;\n        fontFamily: IEditorOption<EditorOption.fontFamily, string>;\n        fontInfo: IEditorOption<EditorOption.fontInfo, FontInfo>;\n        fontLigatures2: IEditorOption<EditorOption.fontLigatures, string>;\n        fontSize: IEditorOption<EditorOption.fontSize, number>;\n        fontWeight: IEditorOption<EditorOption.fontWeight, string>;\n        formatOnPaste: IEditorOption<EditorOption.formatOnPaste, boolean>;\n        formatOnType: IEditorOption<EditorOption.formatOnType, boolean>;\n        glyphMargin: IEditorOption<EditorOption.glyphMargin, boolean>;\n        gotoLocation: IEditorOption<EditorOption.gotoLocation, GoToLocationOptions>;\n        hideCursorInOverviewRuler: IEditorOption<EditorOption.hideCursorInOverviewRuler, boolean>;\n        highlightActiveIndentGuide: IEditorOption<EditorOption.highlightActiveIndentGuide, boolean>;\n        hover: IEditorOption<EditorOption.hover, EditorHoverOptions>;\n        inDiffEditor: IEditorOption<EditorOption.inDiffEditor, boolean>;\n        letterSpacing: IEditorOption<EditorOption.letterSpacing, number>;\n        lightbulb: IEditorOption<EditorOption.lightbulb, EditorLightbulbOptions>;\n        lineDecorationsWidth: IEditorOption<EditorOption.lineDecorationsWidth, string | number>;\n        lineHeight: IEditorOption<EditorOption.lineHeight, number>;\n        lineNumbers: IEditorOption<EditorOption.lineNumbers, InternalEditorRenderLineNumbersOptions>;\n        lineNumbersMinChars: IEditorOption<EditorOption.lineNumbersMinChars, number>;\n        linkedEditing: IEditorOption<EditorOption.linkedEditing, boolean>;\n        links: IEditorOption<EditorOption.links, boolean>;\n        matchBrackets: IEditorOption<EditorOption.matchBrackets, 'always' | 'never' | 'near'>;\n        minimap: IEditorOption<EditorOption.minimap, EditorMinimapOptions>;\n        mouseStyle: IEditorOption<EditorOption.mouseStyle, 'default' | 'text' | 'copy'>;\n        mouseWheelScrollSensitivity: IEditorOption<EditorOption.mouseWheelScrollSensitivity, number>;\n        mouseWheelZoom: IEditorOption<EditorOption.mouseWheelZoom, boolean>;\n        multiCursorMergeOverlapping: IEditorOption<EditorOption.multiCursorMergeOverlapping, boolean>;\n        multiCursorModifier: IEditorOption<EditorOption.multiCursorModifier, 'altKey' | 'metaKey' | 'ctrlKey'>;\n        multiCursorPaste: IEditorOption<EditorOption.multiCursorPaste, 'spread' | 'full'>;\n        occurrencesHighlight: IEditorOption<EditorOption.occurrencesHighlight, boolean>;\n        overviewRulerBorder: IEditorOption<EditorOption.overviewRulerBorder, boolean>;\n        overviewRulerLanes: IEditorOption<EditorOption.overviewRulerLanes, number>;\n        padding: IEditorOption<EditorOption.padding, InternalEditorPaddingOptions>;\n        parameterHints: IEditorOption<EditorOption.parameterHints, InternalParameterHintOptions>;\n        peekWidgetDefaultFocus: IEditorOption<EditorOption.peekWidgetDefaultFocus, 'tree' | 'editor'>;\n        definitionLinkOpensInPeek: IEditorOption<EditorOption.definitionLinkOpensInPeek, boolean>;\n        quickSuggestions: IEditorOption<EditorOption.quickSuggestions, ValidQuickSuggestionsOptions>;\n        quickSuggestionsDelay: IEditorOption<EditorOption.quickSuggestionsDelay, number>;\n        readOnly: IEditorOption<EditorOption.readOnly, boolean>;\n        renameOnType: IEditorOption<EditorOption.renameOnType, boolean>;\n        renderControlCharacters: IEditorOption<EditorOption.renderControlCharacters, boolean>;\n        renderIndentGuides: IEditorOption<EditorOption.renderIndentGuides, boolean>;\n        renderFinalNewline: IEditorOption<EditorOption.renderFinalNewline, boolean>;\n        renderLineHighlight: IEditorOption<EditorOption.renderLineHighlight, 'all' | 'line' | 'none' | 'gutter'>;\n        renderLineHighlightOnlyWhenFocus: IEditorOption<EditorOption.renderLineHighlightOnlyWhenFocus, boolean>;\n        renderValidationDecorations: IEditorOption<EditorOption.renderValidationDecorations, 'on' | 'off' | 'editable'>;\n        renderWhitespace: IEditorOption<EditorOption.renderWhitespace, 'all' | 'none' | 'boundary' | 'selection' | 'trailing'>;\n        revealHorizontalRightPadding: IEditorOption<EditorOption.revealHorizontalRightPadding, number>;\n        roundedSelection: IEditorOption<EditorOption.roundedSelection, boolean>;\n        rulers: IEditorOption<EditorOption.rulers, {}>;\n        scrollbar: IEditorOption<EditorOption.scrollbar, InternalEditorScrollbarOptions>;\n        scrollBeyondLastColumn: IEditorOption<EditorOption.scrollBeyondLastColumn, number>;\n        scrollBeyondLastLine: IEditorOption<EditorOption.scrollBeyondLastLine, boolean>;\n        scrollPredominantAxis: IEditorOption<EditorOption.scrollPredominantAxis, boolean>;\n        selectionClipboard: IEditorOption<EditorOption.selectionClipboard, boolean>;\n        selectionHighlight: IEditorOption<EditorOption.selectionHighlight, boolean>;\n        selectOnLineNumbers: IEditorOption<EditorOption.selectOnLineNumbers, boolean>;\n        showFoldingControls: IEditorOption<EditorOption.showFoldingControls, 'always' | 'mouseover'>;\n        showUnused: IEditorOption<EditorOption.showUnused, boolean>;\n        showDeprecated: IEditorOption<EditorOption.showDeprecated, boolean>;\n        inlayHints: IEditorOption<EditorOption.inlayHints, any>;\n        snippetSuggestions: IEditorOption<EditorOption.snippetSuggestions, 'none' | 'top' | 'bottom' | 'inline'>;\n        smartSelect: IEditorOption<EditorOption.smartSelect, any>;\n        smoothScrolling: IEditorOption<EditorOption.smoothScrolling, boolean>;\n        stopRenderingLineAfter: IEditorOption<EditorOption.stopRenderingLineAfter, number>;\n        suggest: IEditorOption<EditorOption.suggest, InternalSuggestOptions>;\n        inlineSuggest: IEditorOption<EditorOption.inlineSuggest, any>;\n        suggestFontSize: IEditorOption<EditorOption.suggestFontSize, number>;\n        suggestLineHeight: IEditorOption<EditorOption.suggestLineHeight, number>;\n        suggestOnTriggerCharacters: IEditorOption<EditorOption.suggestOnTriggerCharacters, boolean>;\n        suggestSelection: IEditorOption<EditorOption.suggestSelection, 'first' | 'recentlyUsed' | 'recentlyUsedByPrefix'>;\n        tabCompletion: IEditorOption<EditorOption.tabCompletion, 'on' | 'off' | 'onlySnippets'>;\n        tabIndex: IEditorOption<EditorOption.tabIndex, number>;\n        unusualLineTerminators: IEditorOption<EditorOption.unusualLineTerminators, 'auto' | 'off' | 'prompt'>;\n        useShadowDOM: IEditorOption<EditorOption.useShadowDOM, boolean>;\n        useTabStops: IEditorOption<EditorOption.useTabStops, boolean>;\n        wordSeparators: IEditorOption<EditorOption.wordSeparators, string>;\n        wordWrap: IEditorOption<EditorOption.wordWrap, 'on' | 'off' | 'wordWrapColumn' | 'bounded'>;\n        wordWrapBreakAfterCharacters: IEditorOption<EditorOption.wordWrapBreakAfterCharacters, string>;\n        wordWrapBreakBeforeCharacters: IEditorOption<EditorOption.wordWrapBreakBeforeCharacters, string>;\n        wordWrapColumn: IEditorOption<EditorOption.wordWrapColumn, number>;\n        wordWrapOverride1: IEditorOption<EditorOption.wordWrapOverride1, 'on' | 'off' | 'inherit'>;\n        wordWrapOverride2: IEditorOption<EditorOption.wordWrapOverride2, 'on' | 'off' | 'inherit'>;\n        wrappingIndent: IEditorOption<EditorOption.wrappingIndent, WrappingIndent>;\n        wrappingStrategy: IEditorOption<EditorOption.wrappingStrategy, 'simple' | 'advanced'>;\n        editorClassName: IEditorOption<EditorOption.editorClassName, string>;\n        pixelRatio: IEditorOption<EditorOption.pixelRatio, number>;\n        tabFocusMode: IEditorOption<EditorOption.tabFocusMode, boolean>;\n        layoutInfo: IEditorOption<EditorOption.layoutInfo, EditorLayoutInfo>;\n        wrappingInfo: IEditorOption<EditorOption.wrappingInfo, EditorWrappingInfo>;\n    };\n\n    type EditorOptionsType = typeof EditorOptions;\n\n    type FindEditorOptionsKeyById<T extends EditorOption> = {\n        [K in keyof EditorOptionsType]: EditorOptionsType[K]['id'] extends T ? K : never;\n    }[keyof EditorOptionsType];\n\n    type ComputedEditorOptionValue<T extends IEditorOption<any, any>> = T extends IEditorOption<any, infer R> ? R : never;\n\n    export type FindComputedEditorOptionValueById<T extends EditorOption> = NonNullable<ComputedEditorOptionValue<EditorOptionsType[FindEditorOptionsKeyById<T>]>>;\n\n    /**\n     * A view zone is a full horizontal rectangle that 'pushes' text down.\n     * The editor reserves space for view zones when rendering.\n     */\n    export interface IViewZone {\n        /**\n         * The line number after which this zone should appear.\n         * Use 0 to place a view zone before the first line number.\n         */\n        afterLineNumber: number;\n        /**\n         * The column after which this zone should appear.\n         * If not set, the maxLineColumn of `afterLineNumber` will be used.\n         */\n        afterColumn?: number;\n        /**\n         * Suppress mouse down events.\n         * If set, the editor will attach a mouse down listener to the view zone and .preventDefault on it.\n         * Defaults to false\n         */\n        suppressMouseDown?: boolean;\n        /**\n         * The height in lines of the view zone.\n         * If specified, `heightInPx` will be used instead of this.\n         * If neither `heightInPx` nor `heightInLines` is specified, a default of `heightInLines` = 1 will be chosen.\n         */\n        heightInLines?: number;\n        /**\n         * The height in px of the view zone.\n         * If this is set, the editor will give preference to it rather than `heightInLines` above.\n         * If neither `heightInPx` nor `heightInLines` is specified, a default of `heightInLines` = 1 will be chosen.\n         */\n        heightInPx?: number;\n        /**\n         * The minimum width in px of the view zone.\n         * If this is set, the editor will ensure that the scroll width is >= than this value.\n         */\n        minWidthInPx?: number;\n        /**\n         * The dom node of the view zone\n         */\n        domNode: HTMLElement;\n        /**\n         * An optional dom node for the view zone that will be placed in the margin area.\n         */\n        marginDomNode?: HTMLElement | null;\n        /**\n         * Callback which gives the relative top of the view zone as it appears (taking scrolling into account).\n         */\n        onDomNodeTop?: (top: number) => void;\n        /**\n         * Callback which gives the height in pixels of the view zone.\n         */\n        onComputedHeight?: (height: number) => void;\n    }\n\n    /**\n     * An accessor that allows for zones to be added or removed.\n     */\n    export interface IViewZoneChangeAccessor {\n        /**\n         * Create a new view zone.\n         * @param zone Zone to create\n         * @return A unique identifier to the view zone.\n         */\n        addZone(zone: IViewZone): string;\n        /**\n         * Remove a zone\n         * @param id A unique identifier to the view zone, as returned by the `addZone` call.\n         */\n        removeZone(id: string): void;\n        /**\n         * Change a zone's position.\n         * The editor will rescan the `afterLineNumber` and `afterColumn` properties of a view zone.\n         */\n        layoutZone(id: string): void;\n    }\n\n    /**\n     * A positioning preference for rendering content widgets.\n     */\n    export enum ContentWidgetPositionPreference {\n        /**\n         * Place the content widget exactly at a position\n         */\n        EXACT = 0,\n        /**\n         * Place the content widget above a position\n         */\n        ABOVE = 1,\n        /**\n         * Place the content widget below a position\n         */\n        BELOW = 2\n    }\n\n    /**\n     * A position for rendering content widgets.\n     */\n    export interface IContentWidgetPosition {\n        /**\n         * Desired position for the content widget.\n         * `preference` will also affect the placement.\n         */\n        position: IPosition | null;\n        /**\n         * Optionally, a range can be provided to further\n         * define the position of the content widget.\n         */\n        range?: IRange | null;\n        /**\n         * Placement preference for position, in order of preference.\n         */\n        preference: ContentWidgetPositionPreference[];\n    }\n\n    /**\n     * A content widget renders inline with the text and can be easily placed 'near' an editor position.\n     */\n    export interface IContentWidget {\n        /**\n         * Render this content widget in a location where it could overflow the editor's view dom node.\n         */\n        allowEditorOverflow?: boolean;\n        suppressMouseDown?: boolean;\n        /**\n         * Get a unique identifier of the content widget.\n         */\n        getId(): string;\n        /**\n         * Get the dom node of the content widget.\n         */\n        getDomNode(): HTMLElement;\n        /**\n         * Get the placement of the content widget.\n         * If null is returned, the content widget will be placed off screen.\n         */\n        getPosition(): IContentWidgetPosition | null;\n        /**\n         * Optional function that is invoked before rendering\n         * the content widget. If a dimension is returned the editor will\n         * attempt to use it.\n         */\n        beforeRender?(): IDimension | null;\n        /**\n         * Optional function that is invoked after rendering the content\n         * widget. Is being invoked with the selected position preference\n         * or `null` if not rendered.\n         */\n        afterRender?(position: ContentWidgetPositionPreference | null): void;\n    }\n\n    /**\n     * A positioning preference for rendering overlay widgets.\n     */\n    export enum OverlayWidgetPositionPreference {\n        /**\n         * Position the overlay widget in the top right corner\n         */\n        TOP_RIGHT_CORNER = 0,\n        /**\n         * Position the overlay widget in the bottom right corner\n         */\n        BOTTOM_RIGHT_CORNER = 1,\n        /**\n         * Position the overlay widget in the top center\n         */\n        TOP_CENTER = 2\n    }\n\n    /**\n     * A position for rendering overlay widgets.\n     */\n    export interface IOverlayWidgetPosition {\n        /**\n         * The position preference for the overlay widget.\n         */\n        preference: OverlayWidgetPositionPreference | null;\n    }\n\n    /**\n     * An overlay widgets renders on top of the text.\n     */\n    export interface IOverlayWidget {\n        /**\n         * Get a unique identifier of the overlay widget.\n         */\n        getId(): string;\n        /**\n         * Get the dom node of the overlay widget.\n         */\n        getDomNode(): HTMLElement;\n        /**\n         * Get the placement of the overlay widget.\n         * If null is returned, the overlay widget is responsible to place itself.\n         */\n        getPosition(): IOverlayWidgetPosition | null;\n    }\n\n    /**\n     * Type of hit element with the mouse in the editor.\n     */\n    export enum MouseTargetType {\n        /**\n         * Mouse is on top of an unknown element.\n         */\n        UNKNOWN = 0,\n        /**\n         * Mouse is on top of the textarea used for input.\n         */\n        TEXTAREA = 1,\n        /**\n         * Mouse is on top of the glyph margin\n         */\n        GUTTER_GLYPH_MARGIN = 2,\n        /**\n         * Mouse is on top of the line numbers\n         */\n        GUTTER_LINE_NUMBERS = 3,\n        /**\n         * Mouse is on top of the line decorations\n         */\n        GUTTER_LINE_DECORATIONS = 4,\n        /**\n         * Mouse is on top of the whitespace left in the gutter by a view zone.\n         */\n        GUTTER_VIEW_ZONE = 5,\n        /**\n         * Mouse is on top of text in the content.\n         */\n        CONTENT_TEXT = 6,\n        /**\n         * Mouse is on top of empty space in the content (e.g. after line text or below last line)\n         */\n        CONTENT_EMPTY = 7,\n        /**\n         * Mouse is on top of a view zone in the content.\n         */\n        CONTENT_VIEW_ZONE = 8,\n        /**\n         * Mouse is on top of a content widget.\n         */\n        CONTENT_WIDGET = 9,\n        /**\n         * Mouse is on top of the decorations overview ruler.\n         */\n        OVERVIEW_RULER = 10,\n        /**\n         * Mouse is on top of a scrollbar.\n         */\n        SCROLLBAR = 11,\n        /**\n         * Mouse is on top of an overlay widget.\n         */\n        OVERLAY_WIDGET = 12,\n        /**\n         * Mouse is outside of the editor.\n         */\n        OUTSIDE_EDITOR = 13\n    }\n\n    /**\n     * Target hit with the mouse in the editor.\n     */\n    export interface IMouseTarget {\n        /**\n         * The target element\n         */\n        readonly element: Element | null;\n        /**\n         * The target type\n         */\n        readonly type: MouseTargetType;\n        /**\n         * The 'approximate' editor position\n         */\n        readonly position: Position | null;\n        /**\n         * Desired mouse column (e.g. when position.column gets clamped to text length -- clicking after text on a line).\n         */\n        readonly mouseColumn: number;\n        /**\n         * The 'approximate' editor range\n         */\n        readonly range: Range | null;\n        /**\n         * Some extra detail.\n         */\n        readonly detail: any;\n    }\n\n    /**\n     * A mouse event originating from the editor.\n     */\n    export interface IEditorMouseEvent {\n        readonly event: IMouseEvent;\n        readonly target: IMouseTarget;\n    }\n\n    export interface IPartialEditorMouseEvent {\n        readonly event: IMouseEvent;\n        readonly target: IMouseTarget | null;\n    }\n\n    /**\n     * A paste event originating from the editor.\n     */\n    export interface IPasteEvent {\n        readonly range: Range;\n        readonly mode: string | null;\n    }\n\n    export interface IEditorConstructionOptions extends IEditorOptions {\n        /**\n         * The initial editor dimension (to avoid measuring the container).\n         */\n        dimension?: IDimension;\n        /**\n         * Place overflow widgets inside an external DOM node.\n         * Defaults to an internal DOM node.\n         */\n        overflowWidgetsDomNode?: HTMLElement;\n    }\n\n    export interface IDiffEditorConstructionOptions extends IDiffEditorOptions {\n        /**\n         * The initial editor dimension (to avoid measuring the container).\n         */\n        dimension?: IDimension;\n        /**\n         * Place overflow widgets inside an external DOM node.\n         * Defaults to an internal DOM node.\n         */\n        overflowWidgetsDomNode?: HTMLElement;\n    }\n\n    /**\n     * A rich code editor.\n     */\n    export interface ICodeEditor extends IEditor {\n        /**\n         * An event emitted when the content of the current model has changed.\n         * @event\n         */\n        onDidChangeModelContent(listener: (e: IModelContentChangedEvent) => void): IDisposable;\n        /**\n         * An event emitted when the language of the current model has changed.\n         * @event\n         */\n        onDidChangeModelLanguage(listener: (e: IModelLanguageChangedEvent) => void): IDisposable;\n        /**\n         * An event emitted when the language configuration of the current model has changed.\n         * @event\n         */\n        onDidChangeModelLanguageConfiguration(listener: (e: IModelLanguageConfigurationChangedEvent) => void): IDisposable;\n        /**\n         * An event emitted when the options of the current model has changed.\n         * @event\n         */\n        onDidChangeModelOptions(listener: (e: IModelOptionsChangedEvent) => void): IDisposable;\n        /**\n         * An event emitted when the configuration of the editor has changed. (e.g. `editor.updateOptions()`)\n         * @event\n         */\n        onDidChangeConfiguration(listener: (e: ConfigurationChangedEvent) => void): IDisposable;\n        /**\n         * An event emitted when the cursor position has changed.\n         * @event\n         */\n        onDidChangeCursorPosition(listener: (e: ICursorPositionChangedEvent) => void): IDisposable;\n        /**\n         * An event emitted when the cursor selection has changed.\n         * @event\n         */\n        onDidChangeCursorSelection(listener: (e: ICursorSelectionChangedEvent) => void): IDisposable;\n        /**\n         * An event emitted when the model of this editor has changed (e.g. `editor.setModel()`).\n         * @event\n         */\n        onDidChangeModel(listener: (e: IModelChangedEvent) => void): IDisposable;\n        /**\n         * An event emitted when the decorations of the current model have changed.\n         * @event\n         */\n        onDidChangeModelDecorations(listener: (e: IModelDecorationsChangedEvent) => void): IDisposable;\n        /**\n         * An event emitted when the text inside this editor gained focus (i.e. cursor starts blinking).\n         * @event\n         */\n        onDidFocusEditorText(listener: () => void): IDisposable;\n        /**\n         * An event emitted when the text inside this editor lost focus (i.e. cursor stops blinking).\n         * @event\n         */\n        onDidBlurEditorText(listener: () => void): IDisposable;\n        /**\n         * An event emitted when the text inside this editor or an editor widget gained focus.\n         * @event\n         */\n        onDidFocusEditorWidget(listener: () => void): IDisposable;\n        /**\n         * An event emitted when the text inside this editor or an editor widget lost focus.\n         * @event\n         */\n        onDidBlurEditorWidget(listener: () => void): IDisposable;\n        /**\n         * An event emitted after composition has started.\n         */\n        onDidCompositionStart(listener: () => void): IDisposable;\n        /**\n         * An event emitted after composition has ended.\n         */\n        onDidCompositionEnd(listener: () => void): IDisposable;\n        /**\n         * An event emitted when editing failed because the editor is read-only.\n         * @event\n         */\n        onDidAttemptReadOnlyEdit(listener: () => void): IDisposable;\n        /**\n         * An event emitted when users paste text in the editor.\n         * @event\n         */\n        onDidPaste(listener: (e: IPasteEvent) => void): IDisposable;\n        /**\n         * An event emitted on a \"mouseup\".\n         * @event\n         */\n        onMouseUp(listener: (e: IEditorMouseEvent) => void): IDisposable;\n        /**\n         * An event emitted on a \"mousedown\".\n         * @event\n         */\n        onMouseDown(listener: (e: IEditorMouseEvent) => void): IDisposable;\n        /**\n         * An event emitted on a \"contextmenu\".\n         * @event\n         */\n        onContextMenu(listener: (e: IEditorMouseEvent) => void): IDisposable;\n        /**\n         * An event emitted on a \"mousemove\".\n         * @event\n         */\n        onMouseMove(listener: (e: IEditorMouseEvent) => void): IDisposable;\n        /**\n         * An event emitted on a \"mouseleave\".\n         * @event\n         */\n        onMouseLeave(listener: (e: IPartialEditorMouseEvent) => void): IDisposable;\n        /**\n         * An event emitted on a \"keyup\".\n         * @event\n         */\n        onKeyUp(listener: (e: IKeyboardEvent) => void): IDisposable;\n        /**\n         * An event emitted on a \"keydown\".\n         * @event\n         */\n        onKeyDown(listener: (e: IKeyboardEvent) => void): IDisposable;\n        /**\n         * An event emitted when the layout of the editor has changed.\n         * @event\n         */\n        onDidLayoutChange(listener: (e: EditorLayoutInfo) => void): IDisposable;\n        /**\n         * An event emitted when the content width or content height in the editor has changed.\n         * @event\n         */\n        onDidContentSizeChange(listener: (e: IContentSizeChangedEvent) => void): IDisposable;\n        /**\n         * An event emitted when the scroll in the editor has changed.\n         * @event\n         */\n        onDidScrollChange(listener: (e: IScrollEvent) => void): IDisposable;\n        /**\n         * Saves current view state of the editor in a serializable object.\n         */\n        saveViewState(): ICodeEditorViewState | null;\n        /**\n         * Restores the view state of the editor from a serializable object generated by `saveViewState`.\n         */\n        restoreViewState(state: ICodeEditorViewState): void;\n        /**\n         * Returns true if the text inside this editor or an editor widget has focus.\n         */\n        hasWidgetFocus(): boolean;\n        /**\n         * Get a contribution of this editor.\n         * @id Unique identifier of the contribution.\n         * @return The contribution or null if contribution not found.\n         */\n        getContribution<T extends IEditorContribution>(id: string): T;\n        /**\n         * Type the getModel() of IEditor.\n         */\n        getModel(): ITextModel | null;\n        /**\n         * Sets the current model attached to this editor.\n         * If the previous model was created by the editor via the value key in the options\n         * literal object, it will be destroyed. Otherwise, if the previous model was set\n         * via setModel, or the model key in the options literal object, the previous model\n         * will not be destroyed.\n         * It is safe to call setModel(null) to simply detach the current model from the editor.\n         */\n        setModel(model: ITextModel | null): void;\n        /**\n         * Gets all the editor computed options.\n         */\n        getOptions(): IComputedEditorOptions;\n        /**\n         * Gets a specific editor option.\n         */\n        getOption<T extends EditorOption>(id: T): FindComputedEditorOptionValueById<T>;\n        /**\n         * Returns the editor's configuration (without any validation or defaults).\n         */\n        getRawOptions(): IEditorOptions;\n        /**\n         * Get value of the current model attached to this editor.\n         * @see {@link ITextModel.getValue}\n         */\n        getValue(options?: {\n            preserveBOM: boolean;\n            lineEnding: string;\n        }): string;\n        /**\n         * Set the value of the current model attached to this editor.\n         * @see {@link ITextModel.setValue}\n         */\n        setValue(newValue: string): void;\n        /**\n         * Get the width of the editor's content.\n         * This is information that is \"erased\" when computing `scrollWidth = Math.max(contentWidth, width)`\n         */\n        getContentWidth(): number;\n        /**\n         * Get the scrollWidth of the editor's viewport.\n         */\n        getScrollWidth(): number;\n        /**\n         * Get the scrollLeft of the editor's viewport.\n         */\n        getScrollLeft(): number;\n        /**\n         * Get the height of the editor's content.\n         * This is information that is \"erased\" when computing `scrollHeight = Math.max(contentHeight, height)`\n         */\n        getContentHeight(): number;\n        /**\n         * Get the scrollHeight of the editor's viewport.\n         */\n        getScrollHeight(): number;\n        /**\n         * Get the scrollTop of the editor's viewport.\n         */\n        getScrollTop(): number;\n        /**\n         * Change the scrollLeft of the editor's viewport.\n         */\n        setScrollLeft(newScrollLeft: number, scrollType?: ScrollType): void;\n        /**\n         * Change the scrollTop of the editor's viewport.\n         */\n        setScrollTop(newScrollTop: number, scrollType?: ScrollType): void;\n        /**\n         * Change the scroll position of the editor's viewport.\n         */\n        setScrollPosition(position: INewScrollPosition, scrollType?: ScrollType): void;\n        /**\n         * Get an action that is a contribution to this editor.\n         * @id Unique identifier of the contribution.\n         * @return The action or null if action not found.\n         */\n        getAction(id: string): IEditorAction;\n        /**\n         * Execute a command on the editor.\n         * The edits will land on the undo-redo stack, but no \"undo stop\" will be pushed.\n         * @param source The source of the call.\n         * @param command The command to execute\n         */\n        executeCommand(source: string | null | undefined, command: ICommand): void;\n        /**\n         * Create an \"undo stop\" in the undo-redo stack.\n         */\n        pushUndoStop(): boolean;\n        /**\n         * Remove the \"undo stop\" in the undo-redo stack.\n         */\n        popUndoStop(): boolean;\n        /**\n         * Execute edits on the editor.\n         * The edits will land on the undo-redo stack, but no \"undo stop\" will be pushed.\n         * @param source The source of the call.\n         * @param edits The edits to execute.\n         * @param endCursorState Cursor state after the edits were applied.\n         */\n        executeEdits(source: string | null | undefined, edits: IIdentifiedSingleEditOperation[], endCursorState?: ICursorStateComputer | Selection[]): boolean;\n        /**\n         * Execute multiple (concomitant) commands on the editor.\n         * @param source The source of the call.\n         * @param command The commands to execute\n         */\n        executeCommands(source: string | null | undefined, commands: (ICommand | null)[]): void;\n        /**\n         * Get all the decorations on a line (filtering out decorations from other editors).\n         */\n        getLineDecorations(lineNumber: number): IModelDecoration[] | null;\n        /**\n         * All decorations added through this call will get the ownerId of this editor.\n         * @see {@link ITextModel.deltaDecorations}\n         */\n        deltaDecorations(oldDecorations: string[], newDecorations: IModelDeltaDecoration[]): string[];\n        /**\n         * Get the layout info for the editor.\n         */\n        getLayoutInfo(): EditorLayoutInfo;\n        /**\n         * Returns the ranges that are currently visible.\n         * Does not account for horizontal scrolling.\n         */\n        getVisibleRanges(): Range[];\n        /**\n         * Get the vertical position (top offset) for the line w.r.t. to the first line.\n         */\n        getTopForLineNumber(lineNumber: number): number;\n        /**\n         * Get the vertical position (top offset) for the position w.r.t. to the first line.\n         */\n        getTopForPosition(lineNumber: number, column: number): number;\n        /**\n         * Returns the editor's container dom node\n         */\n        getContainerDomNode(): HTMLElement;\n        /**\n         * Returns the editor's dom node\n         */\n        getDomNode(): HTMLElement | null;\n        /**\n         * Add a content widget. Widgets must have unique ids, otherwise they will be overwritten.\n         */\n        addContentWidget(widget: IContentWidget): void;\n        /**\n         * Layout/Reposition a content widget. This is a ping to the editor to call widget.getPosition()\n         * and update appropriately.\n         */\n        layoutContentWidget(widget: IContentWidget): void;\n        /**\n         * Remove a content widget.\n         */\n        removeContentWidget(widget: IContentWidget): void;\n        /**\n         * Add an overlay widget. Widgets must have unique ids, otherwise they will be overwritten.\n         */\n        addOverlayWidget(widget: IOverlayWidget): void;\n        /**\n         * Layout/Reposition an overlay widget. This is a ping to the editor to call widget.getPosition()\n         * and update appropriately.\n         */\n        layoutOverlayWidget(widget: IOverlayWidget): void;\n        /**\n         * Remove an overlay widget.\n         */\n        removeOverlayWidget(widget: IOverlayWidget): void;\n        /**\n         * Change the view zones. View zones are lost when a new model is attached to the editor.\n         */\n        changeViewZones(callback: (accessor: IViewZoneChangeAccessor) => void): void;\n        /**\n         * Get the horizontal position (left offset) for the column w.r.t to the beginning of the line.\n         * This method works only if the line `lineNumber` is currently rendered (in the editor's viewport).\n         * Use this method with caution.\n         */\n        getOffsetForColumn(lineNumber: number, column: number): number;\n        /**\n         * Force an editor render now.\n         */\n        render(forceRedraw?: boolean): void;\n        /**\n         * Get the hit test target at coordinates `clientX` and `clientY`.\n         * The coordinates are relative to the top-left of the viewport.\n         *\n         * @returns Hit test target or null if the coordinates fall outside the editor or the editor has no model.\n         */\n        getTargetAtClientPoint(clientX: number, clientY: number): IMouseTarget | null;\n        /**\n         * Get the visible position for `position`.\n         * The result position takes scrolling into account and is relative to the top left corner of the editor.\n         * Explanation 1: the results of this method will change for the same `position` if the user scrolls the editor.\n         * Explanation 2: the results of this method will not change if the container of the editor gets repositioned.\n         * Warning: the results of this method are inaccurate for positions that are outside the current editor viewport.\n         */\n        getScrolledVisiblePosition(position: IPosition): {\n            top: number;\n            left: number;\n            height: number;\n        } | null;\n        /**\n         * Apply the same font settings as the editor to `target`.\n         */\n        applyFontInfo(target: HTMLElement): void;\n    }\n\n    /**\n     * Information about a line in the diff editor\n     */\n    export interface IDiffLineInformation {\n        readonly equivalentLineNumber: number;\n    }\n\n    /**\n     * A rich diff editor.\n     */\n    export interface IDiffEditor extends IEditor {\n        /**\n         * @see {@link ICodeEditor.getDomNode}\n         */\n        getDomNode(): HTMLElement;\n        /**\n         * An event emitted when the diff information computed by this diff editor has been updated.\n         * @event\n         */\n        onDidUpdateDiff(listener: () => void): IDisposable;\n        /**\n         * Saves current view state of the editor in a serializable object.\n         */\n        saveViewState(): IDiffEditorViewState | null;\n        /**\n         * Restores the view state of the editor from a serializable object generated by `saveViewState`.\n         */\n        restoreViewState(state: IDiffEditorViewState): void;\n        /**\n         * Type the getModel() of IEditor.\n         */\n        getModel(): IDiffEditorModel | null;\n        /**\n         * Sets the current model attached to this editor.\n         * If the previous model was created by the editor via the value key in the options\n         * literal object, it will be destroyed. Otherwise, if the previous model was set\n         * via setModel, or the model key in the options literal object, the previous model\n         * will not be destroyed.\n         * It is safe to call setModel(null) to simply detach the current model from the editor.\n         */\n        setModel(model: IDiffEditorModel | null): void;\n        /**\n         * Get the `original` editor.\n         */\n        getOriginalEditor(): ICodeEditor;\n        /**\n         * Get the `modified` editor.\n         */\n        getModifiedEditor(): ICodeEditor;\n        /**\n         * Get the computed diff information.\n         */\n        getLineChanges(): ILineChange[] | null;\n        /**\n         * Get information based on computed diff about a line number from the original model.\n         * If the diff computation is not finished or the model is missing, will return null.\n         */\n        getDiffLineInformationForOriginal(lineNumber: number): IDiffLineInformation | null;\n        /**\n         * Get information based on computed diff about a line number from the modified model.\n         * If the diff computation is not finished or the model is missing, will return null.\n         */\n        getDiffLineInformationForModified(lineNumber: number): IDiffLineInformation | null;\n        /**\n         * Update the editor's options after the editor has been created.\n         */\n        updateOptions(newOptions: IDiffEditorOptions): void;\n    }\n\n    export class FontInfo extends BareFontInfo {\n        readonly _editorStylingBrand: void;\n        readonly version: number;\n        readonly isTrusted: boolean;\n        readonly isMonospace: boolean;\n        readonly typicalHalfwidthCharacterWidth: number;\n        readonly typicalFullwidthCharacterWidth: number;\n        readonly canUseHalfwidthRightwardsArrow: boolean;\n        readonly spaceWidth: number;\n        readonly middotWidth: number;\n        readonly wsmiddotWidth: number;\n        readonly maxDigitWidth: number;\n    }\n\n    export class BareFontInfo {\n        readonly _bareFontInfoBrand: void;\n        readonly zoomLevel: number;\n        readonly pixelRatio: number;\n        readonly fontFamily: string;\n        readonly fontWeight: string;\n        readonly fontSize: number;\n        readonly fontFeatureSettings: string;\n        readonly lineHeight: number;\n        readonly letterSpacing: number;\n    }\n\n    //compatibility:\n    export type IReadOnlyModel = ITextModel;\n    export type IModel = ITextModel;\n}\n\ndeclare namespace monaco.languages {\n\n\n    /**\n     * Register information about a new language.\n     */\n    export function register(language: ILanguageExtensionPoint): void;\n\n    /**\n     * Get the information of all the registered languages.\n     */\n    export function getLanguages(): ILanguageExtensionPoint[];\n\n    export function getEncodedLanguageId(languageId: string): number;\n\n    /**\n     * An event emitted when a language is first time needed (e.g. a model has it set).\n     * @event\n     */\n    export function onLanguage(languageId: string, callback: () => void): IDisposable;\n\n    /**\n     * Set the editing configuration for a language.\n     */\n    export function setLanguageConfiguration(languageId: string, configuration: LanguageConfiguration): IDisposable;\n\n    /**\n     * A token.\n     */\n    export interface IToken {\n        startIndex: number;\n        scopes: string;\n    }\n\n    /**\n     * The result of a line tokenization.\n     */\n    export interface ILineTokens {\n        /**\n         * The list of tokens on the line.\n         */\n        tokens: IToken[];\n        /**\n         * The tokenization end state.\n         * A pointer will be held to this and the object should not be modified by the tokenizer after the pointer is returned.\n         */\n        endState: IState;\n    }\n\n    /**\n     * The result of a line tokenization.\n     */\n    export interface IEncodedLineTokens {\n        /**\n         * The tokens on the line in a binary, encoded format. Each token occupies two array indices. For token i:\n         *  - at offset 2*i => startIndex\n         *  - at offset 2*i + 1 => metadata\n         * Meta data is in binary format:\n         * - -------------------------------------------\n         *     3322 2222 2222 1111 1111 1100 0000 0000\n         *     1098 7654 3210 9876 5432 1098 7654 3210\n         * - -------------------------------------------\n         *     bbbb bbbb bfff ffff ffFF FTTT LLLL LLLL\n         * - -------------------------------------------\n         *  - L = EncodedLanguageId (8 bits): Use `getEncodedLanguageId` to get the encoded ID of a language.\n         *  - T = StandardTokenType (3 bits): Other = 0, Comment = 1, String = 2, RegEx = 4.\n         *  - F = FontStyle (3 bits): None = 0, Italic = 1, Bold = 2, Underline = 4.\n         *  - f = foreground ColorId (9 bits)\n         *  - b = background ColorId (9 bits)\n         *  - The color value for each colorId is defined in IStandaloneThemeData.customTokenColors:\n         * e.g. colorId = 1 is stored in IStandaloneThemeData.customTokenColors[1]. Color id = 0 means no color,\n         * id = 1 is for the default foreground color, id = 2 for the default background.\n         */\n        tokens: Uint32Array;\n        /**\n         * The tokenization end state.\n         * A pointer will be held to this and the object should not be modified by the tokenizer after the pointer is returned.\n         */\n        endState: IState;\n    }\n\n    /**\n     * A \"manual\" provider of tokens.\n     */\n    export interface TokensProvider {\n        /**\n         * The initial state of a language. Will be the state passed in to tokenize the first line.\n         */\n        getInitialState(): IState;\n        /**\n         * Tokenize a line given the state at the beginning of the line.\n         */\n        tokenize(line: string, state: IState): ILineTokens;\n    }\n\n    /**\n     * A \"manual\" provider of tokens, returning tokens in a binary form.\n     */\n    export interface EncodedTokensProvider {\n        /**\n         * The initial state of a language. Will be the state passed in to tokenize the first line.\n         */\n        getInitialState(): IState;\n        /**\n         * Tokenize a line given the state at the beginning of the line.\n         */\n        tokenizeEncoded(line: string, state: IState): IEncodedLineTokens;\n        /**\n         * Tokenize a line given the state at the beginning of the line.\n         */\n        tokenize?(line: string, state: IState): ILineTokens;\n    }\n\n    /**\n     * Change the color map that is used for token colors.\n     * Supported formats (hex): #RRGGBB, $RRGGBBAA, #RGB, #RGBA\n     */\n    export function setColorMap(colorMap: string[] | null): void;\n\n    /**\n     * Set the tokens provider for a language (manual implementation).\n     */\n    export function setTokensProvider(languageId: string, provider: TokensProvider | EncodedTokensProvider | Thenable<TokensProvider | EncodedTokensProvider>): IDisposable;\n\n    /**\n     * Set the tokens provider for a language (monarch implementation).\n     */\n    export function setMonarchTokensProvider(languageId: string, languageDef: IMonarchLanguage | Thenable<IMonarchLanguage>): IDisposable;\n\n    /**\n     * Register a reference provider (used by e.g. reference search).\n     */\n    export function registerReferenceProvider(languageId: string, provider: ReferenceProvider): IDisposable;\n\n    /**\n     * Register a rename provider (used by e.g. rename symbol).\n     */\n    export function registerRenameProvider(languageId: string, provider: RenameProvider): IDisposable;\n\n    /**\n     * Register a signature help provider (used by e.g. parameter hints).\n     */\n    export function registerSignatureHelpProvider(languageId: string, provider: SignatureHelpProvider): IDisposable;\n\n    /**\n     * Register a hover provider (used by e.g. editor hover).\n     */\n    export function registerHoverProvider(languageId: string, provider: HoverProvider): IDisposable;\n\n    /**\n     * Register a document symbol provider (used by e.g. outline).\n     */\n    export function registerDocumentSymbolProvider(languageId: string, provider: DocumentSymbolProvider): IDisposable;\n\n    /**\n     * Register a document highlight provider (used by e.g. highlight occurrences).\n     */\n    export function registerDocumentHighlightProvider(languageId: string, provider: DocumentHighlightProvider): IDisposable;\n\n    /**\n     * Register an linked editing range provider.\n     */\n    export function registerLinkedEditingRangeProvider(languageId: string, provider: LinkedEditingRangeProvider): IDisposable;\n\n    /**\n     * Register a definition provider (used by e.g. go to definition).\n     */\n    export function registerDefinitionProvider(languageId: string, provider: DefinitionProvider): IDisposable;\n\n    /**\n     * Register a implementation provider (used by e.g. go to implementation).\n     */\n    export function registerImplementationProvider(languageId: string, provider: ImplementationProvider): IDisposable;\n\n    /**\n     * Register a type definition provider (used by e.g. go to type definition).\n     */\n    export function registerTypeDefinitionProvider(languageId: string, provider: TypeDefinitionProvider): IDisposable;\n\n    /**\n     * Register a code lens provider (used by e.g. inline code lenses).\n     */\n    export function registerCodeLensProvider(languageId: string, provider: CodeLensProvider): IDisposable;\n\n    /**\n     * Register a code action provider (used by e.g. quick fix).\n     */\n    export function registerCodeActionProvider(languageId: string, provider: CodeActionProvider): IDisposable;\n\n    /**\n     * Register a formatter that can handle only entire models.\n     */\n    export function registerDocumentFormattingEditProvider(languageId: string, provider: DocumentFormattingEditProvider): IDisposable;\n\n    /**\n     * Register a formatter that can handle a range inside a model.\n     */\n    export function registerDocumentRangeFormattingEditProvider(languageId: string, provider: DocumentRangeFormattingEditProvider): IDisposable;\n\n    /**\n     * Register a formatter than can do formatting as the user types.\n     */\n    export function registerOnTypeFormattingEditProvider(languageId: string, provider: OnTypeFormattingEditProvider): IDisposable;\n\n    /**\n     * Register a link provider that can find links in text.\n     */\n    export function registerLinkProvider(languageId: string, provider: LinkProvider): IDisposable;\n\n    /**\n     * Register a completion item provider (use by e.g. suggestions).\n     */\n    export function registerCompletionItemProvider(languageId: string, provider: CompletionItemProvider): IDisposable;\n\n    /**\n     * Register a document color provider (used by Color Picker, Color Decorator).\n     */\n    export function registerColorProvider(languageId: string, provider: DocumentColorProvider): IDisposable;\n\n    /**\n     * Register a folding range provider\n     */\n    export function registerFoldingRangeProvider(languageId: string, provider: FoldingRangeProvider): IDisposable;\n\n    /**\n     * Register a declaration provider\n     */\n    export function registerDeclarationProvider(languageId: string, provider: DeclarationProvider): IDisposable;\n\n    /**\n     * Register a selection range provider\n     */\n    export function registerSelectionRangeProvider(languageId: string, provider: SelectionRangeProvider): IDisposable;\n\n    /**\n     * Register a document semantic tokens provider\n     */\n    export function registerDocumentSemanticTokensProvider(languageId: string, provider: DocumentSemanticTokensProvider): IDisposable;\n\n    /**\n     * Register a document range semantic tokens provider\n     */\n    export function registerDocumentRangeSemanticTokensProvider(languageId: string, provider: DocumentRangeSemanticTokensProvider): IDisposable;\n\n    /**\n     * Register an inline completions provider.\n     */\n    export function registerInlineCompletionsProvider(languageId: string, provider: InlineCompletionsProvider): IDisposable;\n\n    /**\n     * Register an inlay hints provider.\n     */\n    export function registerInlayHintsProvider(languageId: string, provider: InlayHintsProvider): IDisposable;\n\n    /**\n     * Contains additional diagnostic information about the context in which\n     * a [code action](#CodeActionProvider.provideCodeActions) is run.\n     */\n    export interface CodeActionContext {\n        /**\n         * An array of diagnostics.\n         */\n        readonly markers: editor.IMarkerData[];\n        /**\n         * Requested kind of actions to return.\n         */\n        readonly only?: string;\n    }\n\n    /**\n     * The code action interface defines the contract between extensions and\n     * the [light bulb](https://code.visualstudio.com/docs/editor/editingevolved#_code-action) feature.\n     */\n    export interface CodeActionProvider {\n        /**\n         * Provide commands for the given document and range.\n         */\n        provideCodeActions(model: editor.ITextModel, range: Range, context: CodeActionContext, token: CancellationToken): ProviderResult<CodeActionList>;\n    }\n\n    /**\n     * Describes how comments for a language work.\n     */\n    export interface CommentRule {\n        /**\n         * The line comment token, like `// this is a comment`\n         */\n        lineComment?: string | null;\n        /**\n         * The block comment character pair, like `/* block comment *&#47;`\n         */\n        blockComment?: CharacterPair | null;\n    }\n\n    /**\n     * The language configuration interface defines the contract between extensions and\n     * various editor features, like automatic bracket insertion, automatic indentation etc.\n     */\n    export interface LanguageConfiguration {\n        /**\n         * The language's comment settings.\n         */\n        comments?: CommentRule;\n        /**\n         * The language's brackets.\n         * This configuration implicitly affects pressing Enter around these brackets.\n         */\n        brackets?: CharacterPair[];\n        /**\n         * The language's word definition.\n         * If the language supports Unicode identifiers (e.g. JavaScript), it is preferable\n         * to provide a word definition that uses exclusion of known separators.\n         * e.g.: A regex that matches anything except known separators (and dot is allowed to occur in a floating point number):\n         *   /(-?\\d*\\.\\d\\w*)|([^\\`\\~\\!\\@\\#\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\?\\s]+)/g\n         */\n        wordPattern?: RegExp;\n        /**\n         * The language's indentation settings.\n         */\n        indentationRules?: IndentationRule;\n        /**\n         * The language's rules to be evaluated when pressing Enter.\n         */\n        onEnterRules?: OnEnterRule[];\n        /**\n         * The language's auto closing pairs. The 'close' character is automatically inserted with the\n         * 'open' character is typed. If not set, the configured brackets will be used.\n         */\n        autoClosingPairs?: IAutoClosingPairConditional[];\n        /**\n         * The language's surrounding pairs. When the 'open' character is typed on a selection, the\n         * selected string is surrounded by the open and close characters. If not set, the autoclosing pairs\n         * settings will be used.\n         */\n        surroundingPairs?: IAutoClosingPair[];\n        /**\n         * Defines what characters must be after the cursor for bracket or quote autoclosing to occur when using the \\'languageDefined\\' autoclosing setting.\n         *\n         * This is typically the set of characters which can not start an expression, such as whitespace, closing brackets, non-unary operators, etc.\n         */\n        autoCloseBefore?: string;\n        /**\n         * The language's folding rules.\n         */\n        folding?: FoldingRules;\n        /**\n         * **Deprecated** Do not use.\n         *\n         * @deprecated Will be replaced by a better API soon.\n         */\n        __electricCharacterSupport?: {\n            docComment?: IDocComment;\n        };\n    }\n\n    /**\n     * Describes indentation rules for a language.\n     */\n    export interface IndentationRule {\n        /**\n         * If a line matches this pattern, then all the lines after it should be unindented once (until another rule matches).\n         */\n        decreaseIndentPattern: RegExp;\n        /**\n         * If a line matches this pattern, then all the lines after it should be indented once (until another rule matches).\n         */\n        increaseIndentPattern: RegExp;\n        /**\n         * If a line matches this pattern, then **only the next line** after it should be indented once.\n         */\n        indentNextLinePattern?: RegExp | null;\n        /**\n         * If a line matches this pattern, then its indentation should not be changed and it should not be evaluated against the other rules.\n         */\n        unIndentedLinePattern?: RegExp | null;\n    }\n\n    /**\n     * Describes language specific folding markers such as '#region' and '#endregion'.\n     * The start and end regexes will be tested against the contents of all lines and must be designed efficiently:\n     * - the regex should start with '^'\n     * - regexp flags (i, g) are ignored\n     */\n    export interface FoldingMarkers {\n        start: RegExp;\n        end: RegExp;\n    }\n\n    /**\n     * Describes folding rules for a language.\n     */\n    export interface FoldingRules {\n        /**\n         * Used by the indentation based strategy to decide whether empty lines belong to the previous or the next block.\n         * A language adheres to the off-side rule if blocks in that language are expressed by their indentation.\n         * See [wikipedia](https://en.wikipedia.org/wiki/Off-side_rule) for more information.\n         * If not set, `false` is used and empty lines belong to the previous block.\n         */\n        offSide?: boolean;\n        /**\n         * Region markers used by the language.\n         */\n        markers?: FoldingMarkers;\n    }\n\n    /**\n     * Describes a rule to be evaluated when pressing Enter.\n     */\n    export interface OnEnterRule {\n        /**\n         * This rule will only execute if the text before the cursor matches this regular expression.\n         */\n        beforeText: RegExp;\n        /**\n         * This rule will only execute if the text after the cursor matches this regular expression.\n         */\n        afterText?: RegExp;\n        /**\n         * This rule will only execute if the text above the this line matches this regular expression.\n         */\n        previousLineText?: RegExp;\n        /**\n         * The action to execute.\n         */\n        action: EnterAction;\n    }\n\n    /**\n     * Definition of documentation comments (e.g. Javadoc/JSdoc)\n     */\n    export interface IDocComment {\n        /**\n         * The string that starts a doc comment (e.g. '/**')\n         */\n        open: string;\n        /**\n         * The string that appears on the last line and closes the doc comment (e.g. ' * /').\n         */\n        close?: string;\n    }\n\n    /**\n     * A tuple of two characters, like a pair of\n     * opening and closing brackets.\n     */\n    export type CharacterPair = [string, string];\n\n    export interface IAutoClosingPair {\n        open: string;\n        close: string;\n    }\n\n    export interface IAutoClosingPairConditional extends IAutoClosingPair {\n        notIn?: string[];\n    }\n\n    /**\n     * Describes what to do with the indentation when pressing Enter.\n     */\n    export enum IndentAction {\n        /**\n         * Insert new line and copy the previous line's indentation.\n         */\n        None = 0,\n        /**\n         * Insert new line and indent once (relative to the previous line's indentation).\n         */\n        Indent = 1,\n        /**\n         * Insert two new lines:\n         *  - the first one indented which will hold the cursor\n         *  - the second one at the same indentation level\n         */\n        IndentOutdent = 2,\n        /**\n         * Insert new line and outdent once (relative to the previous line's indentation).\n         */\n        Outdent = 3\n    }\n\n    /**\n     * Describes what to do when pressing Enter.\n     */\n    export interface EnterAction {\n        /**\n         * Describe what to do with the indentation.\n         */\n        indentAction: IndentAction;\n        /**\n         * Describes text to be appended after the new line and after the indentation.\n         */\n        appendText?: string;\n        /**\n         * Describes the number of characters to remove from the new line's indentation.\n         */\n        removeText?: number;\n    }\n\n    /**\n     * The state of the tokenizer between two lines.\n     * It is useful to store flags such as in multiline comment, etc.\n     * The model will clone the previous line's state and pass it in to tokenize the next line.\n     */\n    export interface IState {\n        clone(): IState;\n        equals(other: IState): boolean;\n    }\n\n    /**\n     * A provider result represents the values a provider, like the {@link HoverProvider},\n     * may return. For once this is the actual result type `T`, like `Hover`, or a thenable that resolves\n     * to that type `T`. In addition, `null` and `undefined` can be returned - either directly or from a\n     * thenable.\n     */\n    export type ProviderResult<T> = T | undefined | null | Thenable<T | undefined | null>;\n\n    /**\n     * A hover represents additional information for a symbol or word. Hovers are\n     * rendered in a tooltip-like widget.\n     */\n    export interface Hover {\n        /**\n         * The contents of this hover.\n         */\n        contents: IMarkdownString[];\n        /**\n         * The range to which this hover applies. When missing, the\n         * editor will use the range at the current position or the\n         * current position itself.\n         */\n        range?: IRange;\n    }\n\n    /**\n     * The hover provider interface defines the contract between extensions and\n     * the [hover](https://code.visualstudio.com/docs/editor/intellisense)-feature.\n     */\n    export interface HoverProvider {\n        /**\n         * Provide a hover for the given position and document. Multiple hovers at the same\n         * position will be merged by the editor. A hover can have a range which defaults\n         * to the word range at the position when omitted.\n         */\n        provideHover(model: editor.ITextModel, position: Position, token: CancellationToken): ProviderResult<Hover>;\n    }\n\n    export enum CompletionItemKind {\n        Method = 0,\n        Function = 1,\n        Constructor = 2,\n        Field = 3,\n        Variable = 4,\n        Class = 5,\n        Struct = 6,\n        Interface = 7,\n        Module = 8,\n        Property = 9,\n        Event = 10,\n        Operator = 11,\n        Unit = 12,\n        Value = 13,\n        Constant = 14,\n        Enum = 15,\n        EnumMember = 16,\n        Keyword = 17,\n        Text = 18,\n        Color = 19,\n        File = 20,\n        Reference = 21,\n        Customcolor = 22,\n        Folder = 23,\n        TypeParameter = 24,\n        User = 25,\n        Issue = 26,\n        Snippet = 27\n    }\n\n    export interface CompletionItemLabel {\n        label: string;\n        detail?: string;\n        description?: string;\n    }\n\n    export enum CompletionItemTag {\n        Deprecated = 1\n    }\n\n    export enum CompletionItemInsertTextRule {\n        /**\n         * Adjust whitespace/indentation of multiline insert texts to\n         * match the current line indentation.\n         */\n        KeepWhitespace = 1,\n        /**\n         * `insertText` is a snippet.\n         */\n        InsertAsSnippet = 4\n    }\n\n    /**\n     * A completion item represents a text snippet that is\n     * proposed to complete text that is being typed.\n     */\n    export interface CompletionItem {\n        /**\n         * The label of this completion item. By default\n         * this is also the text that is inserted when selecting\n         * this completion.\n         */\n        label: string | CompletionItemLabel;\n        /**\n         * The kind of this completion item. Based on the kind\n         * an icon is chosen by the editor.\n         */\n        kind: CompletionItemKind;\n        /**\n         * A modifier to the `kind` which affect how the item\n         * is rendered, e.g. Deprecated is rendered with a strikeout\n         */\n        tags?: ReadonlyArray<CompletionItemTag>;\n        /**\n         * A human-readable string with additional information\n         * about this item, like type or symbol information.\n         */\n        detail?: string;\n        /**\n         * A human-readable string that represents a doc-comment.\n         */\n        documentation?: string | IMarkdownString;\n        /**\n         * A string that should be used when comparing this item\n         * with other items. When `falsy` the {@link CompletionItem.label label}\n         * is used.\n         */\n        sortText?: string;\n        /**\n         * A string that should be used when filtering a set of\n         * completion items. When `falsy` the {@link CompletionItem.label label}\n         * is used.\n         */\n        filterText?: string;\n        /**\n         * Select this item when showing. *Note* that only one completion item can be selected and\n         * that the editor decides which item that is. The rule is that the *first* item of those\n         * that match best is selected.\n         */\n        preselect?: boolean;\n        /**\n         * A string or snippet that should be inserted in a document when selecting\n         * this completion.\n         * is used.\n         */\n        insertText: string;\n        /**\n         * Addition rules (as bitmask) that should be applied when inserting\n         * this completion.\n         */\n        insertTextRules?: CompletionItemInsertTextRule;\n        /**\n         * A range of text that should be replaced by this completion item.\n         *\n         * Defaults to a range from the start of the {@link TextDocument.getWordRangeAtPosition current word} to the\n         * current position.\n         *\n         * *Note:* The range must be a {@link Range.isSingleLine single line} and it must\n         * {@link Range.contains contain} the position at which completion has been {@link CompletionItemProvider.provideCompletionItems requested}.\n         */\n        range: IRange | {\n            insert: IRange;\n            replace: IRange;\n        };\n        /**\n         * An optional set of characters that when pressed while this completion is active will accept it first and\n         * then type that character. *Note* that all commit characters should have `length=1` and that superfluous\n         * characters will be ignored.\n         */\n        commitCharacters?: string[];\n        /**\n         * An optional array of additional text edits that are applied when\n         * selecting this completion. Edits must not overlap with the main edit\n         * nor with themselves.\n         */\n        additionalTextEdits?: editor.ISingleEditOperation[];\n        /**\n         * A command that should be run upon acceptance of this item.\n         */\n        command?: Command;\n    }\n\n    export interface CompletionList {\n        suggestions: CompletionItem[];\n        incomplete?: boolean;\n        dispose?(): void;\n    }\n\n    /**\n     * How a suggest provider was triggered.\n     */\n    export enum CompletionTriggerKind {\n        Invoke = 0,\n        TriggerCharacter = 1,\n        TriggerForIncompleteCompletions = 2\n    }\n\n    /**\n     * Contains additional information about the context in which\n     * {@link CompletionItemProvider.provideCompletionItems completion provider} is triggered.\n     */\n    export interface CompletionContext {\n        /**\n         * How the completion was triggered.\n         */\n        triggerKind: CompletionTriggerKind;\n        /**\n         * Character that triggered the completion item provider.\n         *\n         * `undefined` if provider was not triggered by a character.\n         */\n        triggerCharacter?: string;\n    }\n\n    /**\n     * The completion item provider interface defines the contract between extensions and\n     * the [IntelliSense](https://code.visualstudio.com/docs/editor/intellisense).\n     *\n     * When computing *complete* completion items is expensive, providers can optionally implement\n     * the `resolveCompletionItem`-function. In that case it is enough to return completion\n     * items with a {@link CompletionItem.label label} from the\n     * {@link CompletionItemProvider.provideCompletionItems provideCompletionItems}-function. Subsequently,\n     * when a completion item is shown in the UI and gains focus this provider is asked to resolve\n     * the item, like adding {@link CompletionItem.documentation doc-comment} or {@link CompletionItem.detail details}.\n     */\n    export interface CompletionItemProvider {\n        triggerCharacters?: string[];\n        /**\n         * Provide completion items for the given position and document.\n         */\n        provideCompletionItems(model: editor.ITextModel, position: Position, context: CompletionContext, token: CancellationToken): ProviderResult<CompletionList>;\n        /**\n         * Given a completion item fill in more data, like {@link CompletionItem.documentation doc-comment}\n         * or {@link CompletionItem.detail details}.\n         *\n         * The editor will only resolve a completion item once.\n         */\n        resolveCompletionItem?(item: CompletionItem, token: CancellationToken): ProviderResult<CompletionItem>;\n    }\n\n    /**\n     * How an {@link InlineCompletionsProvider inline completion provider} was triggered.\n     */\n    export enum InlineCompletionTriggerKind {\n        /**\n         * Completion was triggered automatically while editing.\n         * It is sufficient to return a single completion item in this case.\n         */\n        Automatic = 0,\n        /**\n         * Completion was triggered explicitly by a user gesture.\n         * Return multiple completion items to enable cycling through them.\n         */\n        Explicit = 1\n    }\n\n    export interface InlineCompletionContext {\n        /**\n         * How the completion was triggered.\n         */\n        readonly triggerKind: InlineCompletionTriggerKind;\n    }\n\n    export interface InlineCompletion {\n        /**\n         * The text to insert.\n         * If the text contains a line break, the range must end at the end of a line.\n         * If existing text should be replaced, the existing text must be a prefix of the text to insert.\n        */\n        readonly text: string;\n        /**\n         * The range to replace.\n         * Must begin and end on the same line.\n        */\n        readonly range?: IRange;\n        readonly command?: Command;\n    }\n\n    export interface InlineCompletions<TItem extends InlineCompletion = InlineCompletion> {\n        readonly items: readonly TItem[];\n    }\n\n    export interface InlineCompletionsProvider<T extends InlineCompletions = InlineCompletions> {\n        provideInlineCompletions(model: editor.ITextModel, position: Position, context: InlineCompletionContext, token: CancellationToken): ProviderResult<T>;\n        /**\n         * Will be called when an item is shown.\n        */\n        handleItemDidShow?(completions: T, item: T['items'][number]): void;\n        /**\n         * Will be called when a completions list is no longer in use and can be garbage-collected.\n        */\n        freeInlineCompletions(completions: T): void;\n    }\n\n    export interface CodeAction {\n        title: string;\n        command?: Command;\n        edit?: WorkspaceEdit;\n        diagnostics?: editor.IMarkerData[];\n        kind?: string;\n        isPreferred?: boolean;\n        disabled?: string;\n    }\n\n    export interface CodeActionList extends IDisposable {\n        readonly actions: ReadonlyArray<CodeAction>;\n    }\n\n    /**\n     * Represents a parameter of a callable-signature. A parameter can\n     * have a label and a doc-comment.\n     */\n    export interface ParameterInformation {\n        /**\n         * The label of this signature. Will be shown in\n         * the UI.\n         */\n        label: string | [number, number];\n        /**\n         * The human-readable doc-comment of this signature. Will be shown\n         * in the UI but can be omitted.\n         */\n        documentation?: string | IMarkdownString;\n    }\n\n    /**\n     * Represents the signature of something callable. A signature\n     * can have a label, like a function-name, a doc-comment, and\n     * a set of parameters.\n     */\n    export interface SignatureInformation {\n        /**\n         * The label of this signature. Will be shown in\n         * the UI.\n         */\n        label: string;\n        /**\n         * The human-readable doc-comment of this signature. Will be shown\n         * in the UI but can be omitted.\n         */\n        documentation?: string | IMarkdownString;\n        /**\n         * The parameters of this signature.\n         */\n        parameters: ParameterInformation[];\n        /**\n         * Index of the active parameter.\n         *\n         * If provided, this is used in place of `SignatureHelp.activeSignature`.\n         */\n        activeParameter?: number;\n    }\n\n    /**\n     * Signature help represents the signature of something\n     * callable. There can be multiple signatures but only one\n     * active and only one active parameter.\n     */\n    export interface SignatureHelp {\n        /**\n         * One or more signatures.\n         */\n        signatures: SignatureInformation[];\n        /**\n         * The active signature.\n         */\n        activeSignature: number;\n        /**\n         * The active parameter of the active signature.\n         */\n        activeParameter: number;\n    }\n\n    export interface SignatureHelpResult extends IDisposable {\n        value: SignatureHelp;\n    }\n\n    export enum SignatureHelpTriggerKind {\n        Invoke = 1,\n        TriggerCharacter = 2,\n        ContentChange = 3\n    }\n\n    export interface SignatureHelpContext {\n        readonly triggerKind: SignatureHelpTriggerKind;\n        readonly triggerCharacter?: string;\n        readonly isRetrigger: boolean;\n        readonly activeSignatureHelp?: SignatureHelp;\n    }\n\n    /**\n     * The signature help provider interface defines the contract between extensions and\n     * the [parameter hints](https://code.visualstudio.com/docs/editor/intellisense)-feature.\n     */\n    export interface SignatureHelpProvider {\n        readonly signatureHelpTriggerCharacters?: ReadonlyArray<string>;\n        readonly signatureHelpRetriggerCharacters?: ReadonlyArray<string>;\n        /**\n         * Provide help for the signature at the given position and document.\n         */\n        provideSignatureHelp(model: editor.ITextModel, position: Position, token: CancellationToken, context: SignatureHelpContext): ProviderResult<SignatureHelpResult>;\n    }\n\n    /**\n     * A document highlight kind.\n     */\n    export enum DocumentHighlightKind {\n        /**\n         * A textual occurrence.\n         */\n        Text = 0,\n        /**\n         * Read-access of a symbol, like reading a variable.\n         */\n        Read = 1,\n        /**\n         * Write-access of a symbol, like writing to a variable.\n         */\n        Write = 2\n    }\n\n    /**\n     * A document highlight is a range inside a text document which deserves\n     * special attention. Usually a document highlight is visualized by changing\n     * the background color of its range.\n     */\n    export interface DocumentHighlight {\n        /**\n         * The range this highlight applies to.\n         */\n        range: IRange;\n        /**\n         * The highlight kind, default is {@link DocumentHighlightKind.Text text}.\n         */\n        kind?: DocumentHighlightKind;\n    }\n\n    /**\n     * The document highlight provider interface defines the contract between extensions and\n     * the word-highlight-feature.\n     */\n    export interface DocumentHighlightProvider {\n        /**\n         * Provide a set of document highlights, like all occurrences of a variable or\n         * all exit-points of a function.\n         */\n        provideDocumentHighlights(model: editor.ITextModel, position: Position, token: CancellationToken): ProviderResult<DocumentHighlight[]>;\n    }\n\n    /**\n     * The linked editing range provider interface defines the contract between extensions and\n     * the linked editing feature.\n     */\n    export interface LinkedEditingRangeProvider {\n        /**\n         * Provide a list of ranges that can be edited together.\n         */\n        provideLinkedEditingRanges(model: editor.ITextModel, position: Position, token: CancellationToken): ProviderResult<LinkedEditingRanges>;\n    }\n\n    /**\n     * Represents a list of ranges that can be edited together along with a word pattern to describe valid contents.\n     */\n    export interface LinkedEditingRanges {\n        /**\n         * A list of ranges that can be edited together. The ranges must have\n         * identical length and text content. The ranges cannot overlap\n         */\n        ranges: IRange[];\n        /**\n         * An optional word pattern that describes valid contents for the given ranges.\n         * If no pattern is provided, the language configuration's word pattern will be used.\n         */\n        wordPattern?: RegExp;\n    }\n\n    /**\n     * Value-object that contains additional information when\n     * requesting references.\n     */\n    export interface ReferenceContext {\n        /**\n         * Include the declaration of the current symbol.\n         */\n        includeDeclaration: boolean;\n    }\n\n    /**\n     * The reference provider interface defines the contract between extensions and\n     * the [find references](https://code.visualstudio.com/docs/editor/editingevolved#_peek)-feature.\n     */\n    export interface ReferenceProvider {\n        /**\n         * Provide a set of project-wide references for the given position and document.\n         */\n        provideReferences(model: editor.ITextModel, position: Position, context: ReferenceContext, token: CancellationToken): ProviderResult<Location[]>;\n    }\n\n    /**\n     * Represents a location inside a resource, such as a line\n     * inside a text file.\n     */\n    export interface Location {\n        /**\n         * The resource identifier of this location.\n         */\n        uri: Uri;\n        /**\n         * The document range of this locations.\n         */\n        range: IRange;\n    }\n\n    export interface LocationLink {\n        /**\n         * A range to select where this link originates from.\n         */\n        originSelectionRange?: IRange;\n        /**\n         * The target uri this link points to.\n         */\n        uri: Uri;\n        /**\n         * The full range this link points to.\n         */\n        range: IRange;\n        /**\n         * A range to select this link points to. Must be contained\n         * in `LocationLink.range`.\n         */\n        targetSelectionRange?: IRange;\n    }\n\n    export type Definition = Location | Location[] | LocationLink[];\n\n    /**\n     * The definition provider interface defines the contract between extensions and\n     * the [go to definition](https://code.visualstudio.com/docs/editor/editingevolved#_go-to-definition)\n     * and peek definition features.\n     */\n    export interface DefinitionProvider {\n        /**\n         * Provide the definition of the symbol at the given position and document.\n         */\n        provideDefinition(model: editor.ITextModel, position: Position, token: CancellationToken): ProviderResult<Definition | LocationLink[]>;\n    }\n\n    /**\n     * The definition provider interface defines the contract between extensions and\n     * the [go to definition](https://code.visualstudio.com/docs/editor/editingevolved#_go-to-definition)\n     * and peek definition features.\n     */\n    export interface DeclarationProvider {\n        /**\n         * Provide the declaration of the symbol at the given position and document.\n         */\n        provideDeclaration(model: editor.ITextModel, position: Position, token: CancellationToken): ProviderResult<Definition | LocationLink[]>;\n    }\n\n    /**\n     * The implementation provider interface defines the contract between extensions and\n     * the go to implementation feature.\n     */\n    export interface ImplementationProvider {\n        /**\n         * Provide the implementation of the symbol at the given position and document.\n         */\n        provideImplementation(model: editor.ITextModel, position: Position, token: CancellationToken): ProviderResult<Definition | LocationLink[]>;\n    }\n\n    /**\n     * The type definition provider interface defines the contract between extensions and\n     * the go to type definition feature.\n     */\n    export interface TypeDefinitionProvider {\n        /**\n         * Provide the type definition of the symbol at the given position and document.\n         */\n        provideTypeDefinition(model: editor.ITextModel, position: Position, token: CancellationToken): ProviderResult<Definition | LocationLink[]>;\n    }\n\n    /**\n     * A symbol kind.\n     */\n    export enum SymbolKind {\n        File = 0,\n        Module = 1,\n        Namespace = 2,\n        Package = 3,\n        Class = 4,\n        Method = 5,\n        Property = 6,\n        Field = 7,\n        Constructor = 8,\n        Enum = 9,\n        Interface = 10,\n        Function = 11,\n        Variable = 12,\n        Constant = 13,\n        String = 14,\n        Number = 15,\n        Boolean = 16,\n        Array = 17,\n        Object = 18,\n        Key = 19,\n        Null = 20,\n        EnumMember = 21,\n        Struct = 22,\n        Event = 23,\n        Operator = 24,\n        TypeParameter = 25\n    }\n\n    export enum SymbolTag {\n        Deprecated = 1\n    }\n\n    export interface DocumentSymbol {\n        name: string;\n        detail: string;\n        kind: SymbolKind;\n        tags: ReadonlyArray<SymbolTag>;\n        containerName?: string;\n        range: IRange;\n        selectionRange: IRange;\n        children?: DocumentSymbol[];\n    }\n\n    /**\n     * The document symbol provider interface defines the contract between extensions and\n     * the [go to symbol](https://code.visualstudio.com/docs/editor/editingevolved#_go-to-symbol)-feature.\n     */\n    export interface DocumentSymbolProvider {\n        displayName?: string;\n        /**\n         * Provide symbol information for the given document.\n         */\n        provideDocumentSymbols(model: editor.ITextModel, token: CancellationToken): ProviderResult<DocumentSymbol[]>;\n    }\n\n    export type TextEdit = {\n        range: IRange;\n        text: string;\n        eol?: editor.EndOfLineSequence;\n    };\n\n    /**\n     * Interface used to format a model\n     */\n    export interface FormattingOptions {\n        /**\n         * Size of a tab in spaces.\n         */\n        tabSize: number;\n        /**\n         * Prefer spaces over tabs.\n         */\n        insertSpaces: boolean;\n    }\n\n    /**\n     * The document formatting provider interface defines the contract between extensions and\n     * the formatting-feature.\n     */\n    export interface DocumentFormattingEditProvider {\n        readonly displayName?: string;\n        /**\n         * Provide formatting edits for a whole document.\n         */\n        provideDocumentFormattingEdits(model: editor.ITextModel, options: FormattingOptions, token: CancellationToken): ProviderResult<TextEdit[]>;\n    }\n\n    /**\n     * The document formatting provider interface defines the contract between extensions and\n     * the formatting-feature.\n     */\n    export interface DocumentRangeFormattingEditProvider {\n        readonly displayName?: string;\n        /**\n         * Provide formatting edits for a range in a document.\n         *\n         * The given range is a hint and providers can decide to format a smaller\n         * or larger range. Often this is done by adjusting the start and end\n         * of the range to full syntax nodes.\n         */\n        provideDocumentRangeFormattingEdits(model: editor.ITextModel, range: Range, options: FormattingOptions, token: CancellationToken): ProviderResult<TextEdit[]>;\n    }\n\n    /**\n     * The document formatting provider interface defines the contract between extensions and\n     * the formatting-feature.\n     */\n    export interface OnTypeFormattingEditProvider {\n        autoFormatTriggerCharacters: string[];\n        /**\n         * Provide formatting edits after a character has been typed.\n         *\n         * The given position and character should hint to the provider\n         * what range the position to expand to, like find the matching `{`\n         * when `}` has been entered.\n         */\n        provideOnTypeFormattingEdits(model: editor.ITextModel, position: Position, ch: string, options: FormattingOptions, token: CancellationToken): ProviderResult<TextEdit[]>;\n    }\n\n    /**\n     * A link inside the editor.\n     */\n    export interface ILink {\n        range: IRange;\n        url?: Uri | string;\n        tooltip?: string;\n    }\n\n    export interface ILinksList {\n        links: ILink[];\n        dispose?(): void;\n    }\n\n    /**\n     * A provider of links.\n     */\n    export interface LinkProvider {\n        provideLinks(model: editor.ITextModel, token: CancellationToken): ProviderResult<ILinksList>;\n        resolveLink?: (link: ILink, token: CancellationToken) => ProviderResult<ILink>;\n    }\n\n    /**\n     * A color in RGBA format.\n     */\n    export interface IColor {\n        /**\n         * The red component in the range [0-1].\n         */\n        readonly red: number;\n        /**\n         * The green component in the range [0-1].\n         */\n        readonly green: number;\n        /**\n         * The blue component in the range [0-1].\n         */\n        readonly blue: number;\n        /**\n         * The alpha component in the range [0-1].\n         */\n        readonly alpha: number;\n    }\n\n    /**\n     * String representations for a color\n     */\n    export interface IColorPresentation {\n        /**\n         * The label of this color presentation. It will be shown on the color\n         * picker header. By default this is also the text that is inserted when selecting\n         * this color presentation.\n         */\n        label: string;\n        /**\n         * An {@link TextEdit edit} which is applied to a document when selecting\n         * this presentation for the color.\n         */\n        textEdit?: TextEdit;\n        /**\n         * An optional array of additional {@link TextEdit text edits} that are applied when\n         * selecting this color presentation.\n         */\n        additionalTextEdits?: TextEdit[];\n    }\n\n    /**\n     * A color range is a range in a text model which represents a color.\n     */\n    export interface IColorInformation {\n        /**\n         * The range within the model.\n         */\n        range: IRange;\n        /**\n         * The color represented in this range.\n         */\n        color: IColor;\n    }\n\n    /**\n     * A provider of colors for editor models.\n     */\n    export interface DocumentColorProvider {\n        /**\n         * Provides the color ranges for a specific model.\n         */\n        provideDocumentColors(model: editor.ITextModel, token: CancellationToken): ProviderResult<IColorInformation[]>;\n        /**\n         * Provide the string representations for a color.\n         */\n        provideColorPresentations(model: editor.ITextModel, colorInfo: IColorInformation, token: CancellationToken): ProviderResult<IColorPresentation[]>;\n    }\n\n    export interface SelectionRange {\n        range: IRange;\n    }\n\n    export interface SelectionRangeProvider {\n        /**\n         * Provide ranges that should be selected from the given position.\n         */\n        provideSelectionRanges(model: editor.ITextModel, positions: Position[], token: CancellationToken): ProviderResult<SelectionRange[][]>;\n    }\n\n    export interface FoldingContext {\n    }\n\n    /**\n     * A provider of folding ranges for editor models.\n     */\n    export interface FoldingRangeProvider {\n        /**\n         * An optional event to signal that the folding ranges from this provider have changed.\n         */\n        onDidChange?: IEvent<this>;\n        /**\n         * Provides the folding ranges for a specific model.\n         */\n        provideFoldingRanges(model: editor.ITextModel, context: FoldingContext, token: CancellationToken): ProviderResult<FoldingRange[]>;\n    }\n\n    export interface FoldingRange {\n        /**\n         * The one-based start line of the range to fold. The folded area starts after the line's last character.\n         */\n        start: number;\n        /**\n         * The one-based end line of the range to fold. The folded area ends with the line's last character.\n         */\n        end: number;\n        /**\n         * Describes the {@link FoldingRangeKind Kind} of the folding range such as {@link FoldingRangeKind.Comment Comment} or\n         * {@link FoldingRangeKind.Region Region}. The kind is used to categorize folding ranges and used by commands\n         * like 'Fold all comments'. See\n         * {@link FoldingRangeKind} for an enumeration of standardized kinds.\n         */\n        kind?: FoldingRangeKind;\n    }\n\n    export class FoldingRangeKind {\n        value: string;\n        /**\n         * Kind for folding range representing a comment. The value of the kind is 'comment'.\n         */\n        static readonly Comment: FoldingRangeKind;\n        /**\n         * Kind for folding range representing a import. The value of the kind is 'imports'.\n         */\n        static readonly Imports: FoldingRangeKind;\n        /**\n         * Kind for folding range representing regions (for example marked by `#region`, `#endregion`).\n         * The value of the kind is 'region'.\n         */\n        static readonly Region: FoldingRangeKind;\n        /**\n         * Creates a new {@link FoldingRangeKind}.\n         *\n         * @param value of the kind.\n         */\n        constructor(value: string);\n    }\n\n    export interface WorkspaceEditMetadata {\n        needsConfirmation: boolean;\n        label: string;\n        description?: string;\n    }\n\n    export interface WorkspaceFileEditOptions {\n        overwrite?: boolean;\n        ignoreIfNotExists?: boolean;\n        ignoreIfExists?: boolean;\n        recursive?: boolean;\n        copy?: boolean;\n        folder?: boolean;\n        skipTrashBin?: boolean;\n        maxSize?: number;\n    }\n\n    export interface WorkspaceFileEdit {\n        oldUri?: Uri;\n        newUri?: Uri;\n        options?: WorkspaceFileEditOptions;\n        metadata?: WorkspaceEditMetadata;\n    }\n\n    export interface WorkspaceTextEdit {\n        resource: Uri;\n        edit: TextEdit;\n        modelVersionId?: number;\n        metadata?: WorkspaceEditMetadata;\n    }\n\n    export interface WorkspaceEdit {\n        edits: Array<WorkspaceTextEdit | WorkspaceFileEdit>;\n    }\n\n    export interface Rejection {\n        rejectReason?: string;\n    }\n\n    export interface RenameLocation {\n        range: IRange;\n        text: string;\n    }\n\n    export interface RenameProvider {\n        provideRenameEdits(model: editor.ITextModel, position: Position, newName: string, token: CancellationToken): ProviderResult<WorkspaceEdit & Rejection>;\n        resolveRenameLocation?(model: editor.ITextModel, position: Position, token: CancellationToken): ProviderResult<RenameLocation & Rejection>;\n    }\n\n    export interface Command {\n        id: string;\n        title: string;\n        tooltip?: string;\n        arguments?: any[];\n    }\n\n    export interface CodeLens {\n        range: IRange;\n        id?: string;\n        command?: Command;\n    }\n\n    export interface CodeLensList {\n        lenses: CodeLens[];\n        dispose(): void;\n    }\n\n    export interface CodeLensProvider {\n        onDidChange?: IEvent<this>;\n        provideCodeLenses(model: editor.ITextModel, token: CancellationToken): ProviderResult<CodeLensList>;\n        resolveCodeLens?(model: editor.ITextModel, codeLens: CodeLens, token: CancellationToken): ProviderResult<CodeLens>;\n    }\n\n    export enum InlayHintKind {\n        Other = 0,\n        Type = 1,\n        Parameter = 2\n    }\n\n    export interface InlayHint {\n        text: string;\n        position: IPosition;\n        kind: InlayHintKind;\n        whitespaceBefore?: boolean;\n        whitespaceAfter?: boolean;\n    }\n\n    export interface InlayHintsProvider {\n        onDidChangeInlayHints?: IEvent<void> | undefined;\n        provideInlayHints(model: editor.ITextModel, range: Range, token: CancellationToken): ProviderResult<InlayHint[]>;\n    }\n\n    export interface SemanticTokensLegend {\n        readonly tokenTypes: string[];\n        readonly tokenModifiers: string[];\n    }\n\n    export interface SemanticTokens {\n        readonly resultId?: string;\n        readonly data: Uint32Array;\n    }\n\n    export interface SemanticTokensEdit {\n        readonly start: number;\n        readonly deleteCount: number;\n        readonly data?: Uint32Array;\n    }\n\n    export interface SemanticTokensEdits {\n        readonly resultId?: string;\n        readonly edits: SemanticTokensEdit[];\n    }\n\n    export interface DocumentSemanticTokensProvider {\n        onDidChange?: IEvent<void>;\n        getLegend(): SemanticTokensLegend;\n        provideDocumentSemanticTokens(model: editor.ITextModel, lastResultId: string | null, token: CancellationToken): ProviderResult<SemanticTokens | SemanticTokensEdits>;\n        releaseDocumentSemanticTokens(resultId: string | undefined): void;\n    }\n\n    export interface DocumentRangeSemanticTokensProvider {\n        getLegend(): SemanticTokensLegend;\n        provideDocumentRangeSemanticTokens(model: editor.ITextModel, range: Range, token: CancellationToken): ProviderResult<SemanticTokens>;\n    }\n\n    export interface ILanguageExtensionPoint {\n        id: string;\n        extensions?: string[];\n        filenames?: string[];\n        filenamePatterns?: string[];\n        firstLine?: string;\n        aliases?: string[];\n        mimetypes?: string[];\n        configuration?: Uri;\n    }\n    /**\n     * A Monarch language definition\n     */\n    export interface IMonarchLanguage {\n        /**\n         * map from string to ILanguageRule[]\n         */\n        tokenizer: {\n            [name: string]: IMonarchLanguageRule[];\n        };\n        /**\n         * is the language case insensitive?\n         */\n        ignoreCase?: boolean;\n        /**\n         * is the language unicode-aware? (i.e., /\\u{1D306}/)\n         */\n        unicode?: boolean;\n        /**\n         * if no match in the tokenizer assign this token class (default 'source')\n         */\n        defaultToken?: string;\n        /**\n         * for example [['{','}','delimiter.curly']]\n         */\n        brackets?: IMonarchLanguageBracket[];\n        /**\n         * start symbol in the tokenizer (by default the first entry is used)\n         */\n        start?: string;\n        /**\n         * attach this to every token class (by default '.' + name)\n         */\n        tokenPostfix?: string;\n        /**\n         * include line feeds (in the form of a \\n character) at the end of lines\n         * Defaults to false\n         */\n        includeLF?: boolean;\n        /**\n         * Other keys that can be referred to by the tokenizer.\n         */\n        [key: string]: any;\n    }\n\n    /**\n     * A rule is either a regular expression and an action\n     * \t\tshorthands: [reg,act] == { regex: reg, action: act}\n     *\t\tand       : [reg,act,nxt] == { regex: reg, action: act{ next: nxt }}\n     */\n    export type IShortMonarchLanguageRule1 = [string | RegExp, IMonarchLanguageAction];\n\n    export type IShortMonarchLanguageRule2 = [string | RegExp, IMonarchLanguageAction, string];\n\n    export interface IExpandedMonarchLanguageRule {\n        /**\n         * match tokens\n         */\n        regex?: string | RegExp;\n        /**\n         * action to take on match\n         */\n        action?: IMonarchLanguageAction;\n        /**\n         * or an include rule. include all rules from the included state\n         */\n        include?: string;\n    }\n\n    export type IMonarchLanguageRule = IShortMonarchLanguageRule1 | IShortMonarchLanguageRule2 | IExpandedMonarchLanguageRule;\n\n    /**\n     * An action is either an array of actions...\n     * ... or a case statement with guards...\n     * ... or a basic action with a token value.\n     */\n    export type IShortMonarchLanguageAction = string;\n\n    export interface IExpandedMonarchLanguageAction {\n        /**\n         * array of actions for each parenthesized match group\n         */\n        group?: IMonarchLanguageAction[];\n        /**\n         * map from string to ILanguageAction\n         */\n        cases?: Object;\n        /**\n         * token class (ie. css class) (or \"@brackets\" or \"@rematch\")\n         */\n        token?: string;\n        /**\n         * the next state to push, or \"@push\", \"@pop\", \"@popall\"\n         */\n        next?: string;\n        /**\n         * switch to this state\n         */\n        switchTo?: string;\n        /**\n         * go back n characters in the stream\n         */\n        goBack?: number;\n        /**\n         * @open or @close\n         */\n        bracket?: string;\n        /**\n         * switch to embedded language (using the mimetype) or get out using \"@pop\"\n         */\n        nextEmbedded?: string;\n        /**\n         * log a message to the browser console window\n         */\n        log?: string;\n    }\n\n    export type IMonarchLanguageAction = IShortMonarchLanguageAction | IExpandedMonarchLanguageAction | IShortMonarchLanguageAction[] | IExpandedMonarchLanguageAction[];\n\n    /**\n     * This interface can be shortened as an array, ie. ['{','}','delimiter.curly']\n     */\n    export interface IMonarchLanguageBracket {\n        /**\n         * open bracket\n         */\n        open: string;\n        /**\n         * closing bracket\n         */\n        close: string;\n        /**\n         * token class\n         */\n        token: string;\n    }\n\n}\n\ndeclare namespace monaco.worker {\n\n\n    export interface IMirrorTextModel {\n        readonly version: number;\n    }\n\n    export interface IMirrorModel extends IMirrorTextModel {\n        readonly uri: Uri;\n        readonly version: number;\n        getValue(): string;\n    }\n\n    export interface IWorkerContext<H = undefined> {\n        /**\n         * A proxy to the main thread host object.\n         */\n        host: H;\n        /**\n         * Get all available mirror models in this worker.\n         */\n        getMirrorModels(): IMirrorModel[];\n    }\n\n}\n\n//dtsv=3\n\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\ndeclare namespace monaco.languages.typescript {\n    export enum ModuleKind {\n        None = 0,\n        CommonJS = 1,\n        AMD = 2,\n        UMD = 3,\n        System = 4,\n        ES2015 = 5,\n        ESNext = 99\n    }\n    export enum JsxEmit {\n        None = 0,\n        Preserve = 1,\n        React = 2,\n        ReactNative = 3,\n        ReactJSX = 4,\n        ReactJSXDev = 5\n    }\n    export enum NewLineKind {\n        CarriageReturnLineFeed = 0,\n        LineFeed = 1\n    }\n    export enum ScriptTarget {\n        ES3 = 0,\n        ES5 = 1,\n        ES2015 = 2,\n        ES2016 = 3,\n        ES2017 = 4,\n        ES2018 = 5,\n        ES2019 = 6,\n        ES2020 = 7,\n        ESNext = 99,\n        JSON = 100,\n        Latest = 99\n    }\n    export enum ModuleResolutionKind {\n        Classic = 1,\n        NodeJs = 2\n    }\n    interface MapLike<T> {\n        [index: string]: T;\n    }\n    type CompilerOptionsValue =\n        | string\n        | number\n        | boolean\n        | (string | number)[]\n        | string[]\n        | MapLike<string[]>\n        | null\n        | undefined;\n    interface CompilerOptions {\n        allowJs?: boolean;\n        allowSyntheticDefaultImports?: boolean;\n        allowUmdGlobalAccess?: boolean;\n        allowUnreachableCode?: boolean;\n        allowUnusedLabels?: boolean;\n        alwaysStrict?: boolean;\n        baseUrl?: string;\n        charset?: string;\n        checkJs?: boolean;\n        declaration?: boolean;\n        declarationMap?: boolean;\n        emitDeclarationOnly?: boolean;\n        declarationDir?: string;\n        disableSizeLimit?: boolean;\n        disableSourceOfProjectReferenceRedirect?: boolean;\n        downlevelIteration?: boolean;\n        emitBOM?: boolean;\n        emitDecoratorMetadata?: boolean;\n        experimentalDecorators?: boolean;\n        forceConsistentCasingInFileNames?: boolean;\n        importHelpers?: boolean;\n        inlineSourceMap?: boolean;\n        inlineSources?: boolean;\n        isolatedModules?: boolean;\n        jsx?: JsxEmit;\n        keyofStringsOnly?: boolean;\n        lib?: string[];\n        locale?: string;\n        mapRoot?: string;\n        maxNodeModuleJsDepth?: number;\n        module?: ModuleKind;\n        moduleResolution?: ModuleResolutionKind;\n        newLine?: NewLineKind;\n        noEmit?: boolean;\n        noEmitHelpers?: boolean;\n        noEmitOnError?: boolean;\n        noErrorTruncation?: boolean;\n        noFallthroughCasesInSwitch?: boolean;\n        noImplicitAny?: boolean;\n        noImplicitReturns?: boolean;\n        noImplicitThis?: boolean;\n        noStrictGenericChecks?: boolean;\n        noUnusedLocals?: boolean;\n        noUnusedParameters?: boolean;\n        noImplicitUseStrict?: boolean;\n        noLib?: boolean;\n        noResolve?: boolean;\n        out?: string;\n        outDir?: string;\n        outFile?: string;\n        paths?: MapLike<string[]>;\n        preserveConstEnums?: boolean;\n        preserveSymlinks?: boolean;\n        project?: string;\n        reactNamespace?: string;\n        jsxFactory?: string;\n        composite?: boolean;\n        removeComments?: boolean;\n        rootDir?: string;\n        rootDirs?: string[];\n        skipLibCheck?: boolean;\n        skipDefaultLibCheck?: boolean;\n        sourceMap?: boolean;\n        sourceRoot?: string;\n        strict?: boolean;\n        strictFunctionTypes?: boolean;\n        strictBindCallApply?: boolean;\n        strictNullChecks?: boolean;\n        strictPropertyInitialization?: boolean;\n        stripInternal?: boolean;\n        suppressExcessPropertyErrors?: boolean;\n        suppressImplicitAnyIndexErrors?: boolean;\n        target?: ScriptTarget;\n        traceResolution?: boolean;\n        resolveJsonModule?: boolean;\n        types?: string[];\n        /** Paths used to compute primary types search locations */\n        typeRoots?: string[];\n        esModuleInterop?: boolean;\n        useDefineForClassFields?: boolean;\n        [option: string]: CompilerOptionsValue | undefined;\n    }\n    export interface DiagnosticsOptions {\n        noSemanticValidation?: boolean;\n        noSyntaxValidation?: boolean;\n        noSuggestionDiagnostics?: boolean;\n        /**\n         * Limit diagnostic computation to only visible files.\n         * Defaults to false.\n         */\n        onlyVisible?: boolean;\n        diagnosticCodesToIgnore?: number[];\n    }\n    export interface WorkerOptions {\n        /** A full HTTP path to a JavaScript file which adds a function `customTSWorkerFactory` to the self inside a web-worker */\n        customWorkerPath?: string;\n    }\n    interface IExtraLib {\n        content: string;\n        version: number;\n    }\n    export interface IExtraLibs {\n        [path: string]: IExtraLib;\n    }\n    /**\n     * A linked list of formatted diagnostic messages to be used as part of a multiline message.\n     * It is built from the bottom up, leaving the head to be the \"main\" diagnostic.\n     */\n    interface DiagnosticMessageChain {\n        messageText: string;\n        /** Diagnostic category: warning = 0, error = 1, suggestion = 2, message = 3 */\n        category: 0 | 1 | 2 | 3;\n        code: number;\n        next?: DiagnosticMessageChain[];\n    }\n    export interface Diagnostic extends DiagnosticRelatedInformation {\n        /** May store more in future. For now, this will simply be `true` to indicate when a diagnostic is an unused-identifier diagnostic. */\n        reportsUnnecessary?: {};\n        reportsDeprecated?: {};\n        source?: string;\n        relatedInformation?: DiagnosticRelatedInformation[];\n    }\n    export interface DiagnosticRelatedInformation {\n        /** Diagnostic category: warning = 0, error = 1, suggestion = 2, message = 3 */\n        category: 0 | 1 | 2 | 3;\n        code: number;\n        /** TypeScriptWorker removes all but the `fileName` property to avoid serializing circular JSON structures. */\n        file:\n            | {\n                    fileName: string;\n              }\n            | undefined;\n        start: number | undefined;\n        length: number | undefined;\n        messageText: string | DiagnosticMessageChain;\n    }\n    interface EmitOutput {\n        outputFiles: OutputFile[];\n        emitSkipped: boolean;\n    }\n    interface OutputFile {\n        name: string;\n        writeByteOrderMark: boolean;\n        text: string;\n    }\n    export interface LanguageServiceDefaults {\n        /**\n         * Event fired when compiler options or diagnostics options are changed.\n         */\n        readonly onDidChange: IEvent<void>;\n        /**\n         * Event fired when extra libraries registered with the language service change.\n         */\n        readonly onDidExtraLibsChange: IEvent<void>;\n        readonly workerOptions: WorkerOptions;\n        /**\n         * Get the current extra libs registered with the language service.\n         */\n        getExtraLibs(): IExtraLibs;\n        /**\n         * Add an additional source file to the language service. Use this\n         * for typescript (definition) files that won't be loaded as editor\n         * documents, like `jquery.d.ts`.\n         *\n         * @param content The file content\n         * @param filePath An optional file path\n         * @returns A disposable which will remove the file from the\n         * language service upon disposal.\n         */\n        addExtraLib(content: string, filePath?: string): IDisposable;\n        /**\n         * Remove all existing extra libs and set the additional source\n         * files to the language service. Use this for typescript definition\n         * files that won't be loaded as editor documents, like `jquery.d.ts`.\n         * @param libs An array of entries to register.\n         */\n        setExtraLibs(\n            libs: {\n                content: string;\n                filePath?: string;\n            }[]\n        ): void;\n        /**\n         * Get current TypeScript compiler options for the language service.\n         */\n        getCompilerOptions(): CompilerOptions;\n        /**\n         * Set TypeScript compiler options.\n         */\n        setCompilerOptions(options: CompilerOptions): void;\n        /**\n         * Get the current diagnostics options for the language service.\n         */\n        getDiagnosticsOptions(): DiagnosticsOptions;\n        /**\n         * Configure whether syntactic and/or semantic validation should\n         * be performed\n         */\n        setDiagnosticsOptions(options: DiagnosticsOptions): void;\n        /**\n         * Configure webworker options\n         */\n        setWorkerOptions(options: WorkerOptions): void;\n        /**\n         * No-op.\n         */\n        setMaximumWorkerIdleTime(value: number): void;\n        /**\n         * Configure if all existing models should be eagerly sync'd\n         * to the worker on start or restart.\n         */\n        setEagerModelSync(value: boolean): void;\n        /**\n         * Get the current setting for whether all existing models should be eagerly sync'd\n         * to the worker on start or restart.\n         */\n        getEagerModelSync(): boolean;\n    }\n    export interface TypeScriptWorker {\n        /**\n         * Get diagnostic messages for any syntax issues in the given file.\n         */\n        getSyntacticDiagnostics(fileName: string): Promise<Diagnostic[]>;\n        /**\n         * Get diagnostic messages for any semantic issues in the given file.\n         */\n        getSemanticDiagnostics(fileName: string): Promise<Diagnostic[]>;\n        /**\n         * Get diagnostic messages for any suggestions related to the given file.\n         */\n        getSuggestionDiagnostics(fileName: string): Promise<Diagnostic[]>;\n        /**\n         * Get the content of a given file.\n         */\n        getScriptText(fileName: string): Promise<string | undefined>;\n        /**\n         * Get diagnostic messages related to the current compiler options.\n         * @param fileName Not used\n         */\n        getCompilerOptionsDiagnostics(fileName: string): Promise<Diagnostic[]>;\n        /**\n         * Get code completions for the given file and position.\n         * @returns `Promise<typescript.CompletionInfo | undefined>`\n         */\n        getCompletionsAtPosition(fileName: string, position: number): Promise<any | undefined>;\n        /**\n         * Get code completion details for the given file, position, and entry.\n         * @returns `Promise<typescript.CompletionEntryDetails | undefined>`\n         */\n        getCompletionEntryDetails(\n            fileName: string,\n            position: number,\n            entry: string\n        ): Promise<any | undefined>;\n        /**\n         * Get signature help items for the item at the given file and position.\n         * @returns `Promise<typescript.SignatureHelpItems | undefined>`\n         */\n        getSignatureHelpItems(\n            fileName: string,\n            position: number,\n            options: any\n        ): Promise<any | undefined>;\n        /**\n         * Get quick info for the item at the given position in the file.\n         * @returns `Promise<typescript.QuickInfo | undefined>`\n         */\n        getQuickInfoAtPosition(fileName: string, position: number): Promise<any | undefined>;\n        /**\n         * Get other ranges which are related to the item at the given position in the file (often used for highlighting).\n         * @returns `Promise<ReadonlyArray<typescript.ReferenceEntry> | undefined>`\n         */\n        getOccurrencesAtPosition(\n            fileName: string,\n            position: number\n        ): Promise<ReadonlyArray<any> | undefined>;\n        /**\n         * Get the definition of the item at the given position in the file.\n         * @returns `Promise<ReadonlyArray<typescript.DefinitionInfo> | undefined>`\n         */\n        getDefinitionAtPosition(\n            fileName: string,\n            position: number\n        ): Promise<ReadonlyArray<any> | undefined>;\n        /**\n         * Get references to the item at the given position in the file.\n         * @returns `Promise<typescript.ReferenceEntry[] | undefined>`\n         */\n        getReferencesAtPosition(fileName: string, position: number): Promise<any[] | undefined>;\n        /**\n         * Get outline entries for the item at the given position in the file.\n         * @returns `Promise<typescript.NavigationBarItem[]>`\n         */\n        getNavigationBarItems(fileName: string): Promise<any[]>;\n        /**\n         * Get changes which should be applied to format the given file.\n         * @param options `typescript.FormatCodeOptions`\n         * @returns `Promise<typescript.TextChange[]>`\n         */\n        getFormattingEditsForDocument(fileName: string, options: any): Promise<any[]>;\n        /**\n         * Get changes which should be applied to format the given range in the file.\n         * @param options `typescript.FormatCodeOptions`\n         * @returns `Promise<typescript.TextChange[]>`\n         */\n        getFormattingEditsForRange(\n            fileName: string,\n            start: number,\n            end: number,\n            options: any\n        ): Promise<any[]>;\n        /**\n         * Get formatting changes which should be applied after the given keystroke.\n         * @param options `typescript.FormatCodeOptions`\n         * @returns `Promise<typescript.TextChange[]>`\n         */\n        getFormattingEditsAfterKeystroke(\n            fileName: string,\n            postion: number,\n            ch: string,\n            options: any\n        ): Promise<any[]>;\n        /**\n         * Get other occurrences which should be updated when renaming the item at the given file and position.\n         * @returns `Promise<readonly typescript.RenameLocation[] | undefined>`\n         */\n        findRenameLocations(\n            fileName: string,\n            positon: number,\n            findInStrings: boolean,\n            findInComments: boolean,\n            providePrefixAndSuffixTextForRename: boolean\n        ): Promise<readonly any[] | undefined>;\n        /**\n         * Get edits which should be applied to rename the item at the given file and position (or a failure reason).\n         * @param options `typescript.RenameInfoOptions`\n         * @returns `Promise<typescript.RenameInfo>`\n         */\n        getRenameInfo(fileName: string, positon: number, options: any): Promise<any>;\n        /**\n         * Get transpiled output for the given file.\n         * @returns `typescript.EmitOutput`\n         */\n        getEmitOutput(fileName: string): Promise<EmitOutput>;\n        /**\n         * Get possible code fixes at the given position in the file.\n         * @param formatOptions `typescript.FormatCodeOptions`\n         * @returns `Promise<ReadonlyArray<typescript.CodeFixAction>>`\n         */\n        getCodeFixesAtPosition(\n            fileName: string,\n            start: number,\n            end: number,\n            errorCodes: number[],\n            formatOptions: any\n        ): Promise<ReadonlyArray<any>>;\n    }\n    export const typescriptVersion: string;\n    export const typescriptDefaults: LanguageServiceDefaults;\n    export const javascriptDefaults: LanguageServiceDefaults;\n    export const getTypeScriptWorker: () => Promise<(...uris: Uri[]) => Promise<TypeScriptWorker>>;\n    export const getJavaScriptWorker: () => Promise<(...uris: Uri[]) => Promise<TypeScriptWorker>>;\n}\n\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\ndeclare namespace monaco.languages.css {\n    export interface Options {\n        readonly validate?: boolean;\n        readonly lint?: {\n            readonly compatibleVendorPrefixes?: 'ignore' | 'warning' | 'error';\n            readonly vendorPrefix?: 'ignore' | 'warning' | 'error';\n            readonly duplicateProperties?: 'ignore' | 'warning' | 'error';\n            readonly emptyRules?: 'ignore' | 'warning' | 'error';\n            readonly importStatement?: 'ignore' | 'warning' | 'error';\n            readonly boxModel?: 'ignore' | 'warning' | 'error';\n            readonly universalSelector?: 'ignore' | 'warning' | 'error';\n            readonly zeroUnits?: 'ignore' | 'warning' | 'error';\n            readonly fontFaceProperties?: 'ignore' | 'warning' | 'error';\n            readonly hexColorLength?: 'ignore' | 'warning' | 'error';\n            readonly argumentsInColorFunction?: 'ignore' | 'warning' | 'error';\n            readonly unknownProperties?: 'ignore' | 'warning' | 'error';\n            readonly ieHack?: 'ignore' | 'warning' | 'error';\n            readonly unknownVendorSpecificProperties?: 'ignore' | 'warning' | 'error';\n            readonly propertyIgnoredDueToDisplay?: 'ignore' | 'warning' | 'error';\n            readonly important?: 'ignore' | 'warning' | 'error';\n            readonly float?: 'ignore' | 'warning' | 'error';\n            readonly idSelector?: 'ignore' | 'warning' | 'error';\n        };\n        /**\n         * Configures the CSS data types known by the langauge service.\n         */\n        readonly data?: CSSDataConfiguration;\n    }\n    export interface ModeConfiguration {\n        /**\n         * Defines whether the built-in completionItemProvider is enabled.\n         */\n        readonly completionItems?: boolean;\n        /**\n         * Defines whether the built-in hoverProvider is enabled.\n         */\n        readonly hovers?: boolean;\n        /**\n         * Defines whether the built-in documentSymbolProvider is enabled.\n         */\n        readonly documentSymbols?: boolean;\n        /**\n         * Defines whether the built-in definitions provider is enabled.\n         */\n        readonly definitions?: boolean;\n        /**\n         * Defines whether the built-in references provider is enabled.\n         */\n        readonly references?: boolean;\n        /**\n         * Defines whether the built-in references provider is enabled.\n         */\n        readonly documentHighlights?: boolean;\n        /**\n         * Defines whether the built-in rename provider is enabled.\n         */\n        readonly rename?: boolean;\n        /**\n         * Defines whether the built-in color provider is enabled.\n         */\n        readonly colors?: boolean;\n        /**\n         * Defines whether the built-in foldingRange provider is enabled.\n         */\n        readonly foldingRanges?: boolean;\n        /**\n         * Defines whether the built-in diagnostic provider is enabled.\n         */\n        readonly diagnostics?: boolean;\n        /**\n         * Defines whether the built-in selection range provider is enabled.\n         */\n        readonly selectionRanges?: boolean;\n    }\n    export interface LanguageServiceDefaults {\n        readonly languageId: string;\n        readonly onDidChange: IEvent<LanguageServiceDefaults>;\n        readonly modeConfiguration: ModeConfiguration;\n        readonly options: Options;\n        setOptions(options: Options): void;\n        setModeConfiguration(modeConfiguration: ModeConfiguration): void;\n        /** @deprecated Use options instead */\n        readonly diagnosticsOptions: DiagnosticsOptions;\n        /** @deprecated Use setOptions instead */\n        setDiagnosticsOptions(options: DiagnosticsOptions): void;\n    }\n    /** @deprecated Use Options instead */\n    export type DiagnosticsOptions = Options;\n    export const cssDefaults: LanguageServiceDefaults;\n    export const scssDefaults: LanguageServiceDefaults;\n    export const lessDefaults: LanguageServiceDefaults;\n    export interface CSSDataConfiguration {\n        /**\n         * Defines whether the standard CSS properties, at-directives, pseudoClasses and pseudoElements are shown.\n         */\n        useDefaultDataProvider?: boolean;\n        /**\n         * Provides a set of custom data providers.\n         */\n        dataProviders?: {\n            [providerId: string]: CSSDataV1;\n        };\n    }\n    /**\n     * Custom CSS properties, at-directives, pseudoClasses and pseudoElements\n     * https://github.com/microsoft/vscode-css-languageservice/blob/main/docs/customData.md\n     */\n    export interface CSSDataV1 {\n        version: 1 | 1.1;\n        properties?: IPropertyData[];\n        atDirectives?: IAtDirectiveData[];\n        pseudoClasses?: IPseudoClassData[];\n        pseudoElements?: IPseudoElementData[];\n    }\n    export type EntryStatus = 'standard' | 'experimental' | 'nonstandard' | 'obsolete';\n    export interface IReference {\n        name: string;\n        url: string;\n    }\n    export interface IPropertyData {\n        name: string;\n        description?: string | MarkupContent;\n        browsers?: string[];\n        restrictions?: string[];\n        status?: EntryStatus;\n        syntax?: string;\n        values?: IValueData[];\n        references?: IReference[];\n        relevance?: number;\n    }\n    export interface IAtDirectiveData {\n        name: string;\n        description?: string | MarkupContent;\n        browsers?: string[];\n        status?: EntryStatus;\n        references?: IReference[];\n    }\n    export interface IPseudoClassData {\n        name: string;\n        description?: string | MarkupContent;\n        browsers?: string[];\n        status?: EntryStatus;\n        references?: IReference[];\n    }\n    export interface IPseudoElementData {\n        name: string;\n        description?: string | MarkupContent;\n        browsers?: string[];\n        status?: EntryStatus;\n        references?: IReference[];\n    }\n    export interface IValueData {\n        name: string;\n        description?: string | MarkupContent;\n        browsers?: string[];\n        status?: EntryStatus;\n        references?: IReference[];\n    }\n    export interface MarkupContent {\n        kind: MarkupKind;\n        value: string;\n    }\n    export type MarkupKind = 'plaintext' | 'markdown';\n}\n\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\ndeclare namespace monaco.languages.json {\n    export interface DiagnosticsOptions {\n        /**\n         * If set, the validator will be enabled and perform syntax and schema based validation,\n         * unless `DiagnosticsOptions.schemaValidation` is set to `ignore`.\n         */\n        readonly validate?: boolean;\n        /**\n         * If set, comments are tolerated. If set to false, syntax errors will be emitted for comments.\n         * `DiagnosticsOptions.allowComments` will override this setting.\n         */\n        readonly allowComments?: boolean;\n        /**\n         * A list of known schemas and/or associations of schemas to file names.\n         */\n        readonly schemas?: {\n            /**\n             * The URI of the schema, which is also the identifier of the schema.\n             */\n            readonly uri: string;\n            /**\n             * A list of glob patterns that describe for which file URIs the JSON schema will be used.\n             * '*' and '**' wildcards are supported. Exclusion patterns start with '!'.\n             * For example '*.schema.json', 'package.json', '!foo*.schema.json', 'foo/**\\/BADRESP.json'.\n             * A match succeeds when there is at least one pattern matching and last matching pattern does not start with '!'.\n             */\n            readonly fileMatch?: string[];\n            /**\n             * The schema for the given URI.\n             */\n            readonly schema?: any;\n        }[];\n        /**\n         *  If set, the schema service would load schema content on-demand with 'fetch' if available\n         */\n        readonly enableSchemaRequest?: boolean;\n        /**\n         * The severity of problems from schema validation. If set to 'ignore', schema validation will be skipped. If not set, 'warning' is used.\n         */\n        readonly schemaValidation?: SeverityLevel;\n        /**\n         * The severity of problems that occurred when resolving and loading schemas. If set to 'ignore', schema resolving problems are not reported. If not set, 'warning' is used.\n         */\n        readonly schemaRequest?: SeverityLevel;\n        /**\n         * The severity of reported trailing commas. If not set, trailing commas will be reported as errors.\n         */\n        readonly trailingCommas?: SeverityLevel;\n        /**\n         * The severity of reported comments. If not set, 'DiagnosticsOptions.allowComments' defines whether comments are ignored or reported as errors.\n         */\n        readonly comments?: SeverityLevel;\n    }\n    export type SeverityLevel = 'error' | 'warning' | 'ignore';\n    export interface ModeConfiguration {\n        /**\n         * Defines whether the built-in documentFormattingEdit provider is enabled.\n         */\n        readonly documentFormattingEdits?: boolean;\n        /**\n         * Defines whether the built-in documentRangeFormattingEdit provider is enabled.\n         */\n        readonly documentRangeFormattingEdits?: boolean;\n        /**\n         * Defines whether the built-in completionItemProvider is enabled.\n         */\n        readonly completionItems?: boolean;\n        /**\n         * Defines whether the built-in hoverProvider is enabled.\n         */\n        readonly hovers?: boolean;\n        /**\n         * Defines whether the built-in documentSymbolProvider is enabled.\n         */\n        readonly documentSymbols?: boolean;\n        /**\n         * Defines whether the built-in tokens provider is enabled.\n         */\n        readonly tokens?: boolean;\n        /**\n         * Defines whether the built-in color provider is enabled.\n         */\n        readonly colors?: boolean;\n        /**\n         * Defines whether the built-in foldingRange provider is enabled.\n         */\n        readonly foldingRanges?: boolean;\n        /**\n         * Defines whether the built-in diagnostic provider is enabled.\n         */\n        readonly diagnostics?: boolean;\n        /**\n         * Defines whether the built-in selection range provider is enabled.\n         */\n        readonly selectionRanges?: boolean;\n    }\n    export interface LanguageServiceDefaults {\n        readonly languageId: string;\n        readonly onDidChange: IEvent<LanguageServiceDefaults>;\n        readonly diagnosticsOptions: DiagnosticsOptions;\n        readonly modeConfiguration: ModeConfiguration;\n        setDiagnosticsOptions(options: DiagnosticsOptions): void;\n        setModeConfiguration(modeConfiguration: ModeConfiguration): void;\n    }\n    export const jsonDefaults: LanguageServiceDefaults;\n}\n\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\ndeclare namespace monaco.languages.html {\n    export interface HTMLFormatConfiguration {\n        readonly tabSize: number;\n        readonly insertSpaces: boolean;\n        readonly wrapLineLength: number;\n        readonly unformatted: string;\n        readonly contentUnformatted: string;\n        readonly indentInnerHtml: boolean;\n        readonly preserveNewLines: boolean;\n        readonly maxPreserveNewLines: number;\n        readonly indentHandlebars: boolean;\n        readonly endWithNewline: boolean;\n        readonly extraLiners: string;\n        readonly wrapAttributes: 'auto' | 'force' | 'force-aligned' | 'force-expand-multiline';\n    }\n    export interface CompletionConfiguration {\n        readonly [providerId: string]: boolean;\n    }\n    export interface Options {\n        /**\n         * If set, comments are tolerated. If set to false, syntax errors will be emitted for comments.\n         */\n        readonly format?: HTMLFormatConfiguration;\n        /**\n         * A list of known schemas and/or associations of schemas to file names.\n         */\n        readonly suggest?: CompletionConfiguration;\n        /**\n         * Configures the HTML data types known by the HTML langauge service.\n         */\n        readonly data?: HTMLDataConfiguration;\n    }\n    export interface ModeConfiguration {\n        /**\n         * Defines whether the built-in completionItemProvider is enabled.\n         */\n        readonly completionItems?: boolean;\n        /**\n         * Defines whether the built-in hoverProvider is enabled.\n         */\n        readonly hovers?: boolean;\n        /**\n         * Defines whether the built-in documentSymbolProvider is enabled.\n         */\n        readonly documentSymbols?: boolean;\n        /**\n         * Defines whether the built-in definitions provider is enabled.\n         */\n        readonly links?: boolean;\n        /**\n         * Defines whether the built-in references provider is enabled.\n         */\n        readonly documentHighlights?: boolean;\n        /**\n         * Defines whether the built-in rename provider is enabled.\n         */\n        readonly rename?: boolean;\n        /**\n         * Defines whether the built-in color provider is enabled.\n         */\n        readonly colors?: boolean;\n        /**\n         * Defines whether the built-in foldingRange provider is enabled.\n         */\n        readonly foldingRanges?: boolean;\n        /**\n         * Defines whether the built-in diagnostic provider is enabled.\n         */\n        readonly diagnostics?: boolean;\n        /**\n         * Defines whether the built-in selection range provider is enabled.\n         */\n        readonly selectionRanges?: boolean;\n        /**\n         * Defines whether the built-in documentFormattingEdit provider is enabled.\n         */\n        readonly documentFormattingEdits?: boolean;\n        /**\n         * Defines whether the built-in documentRangeFormattingEdit provider is enabled.\n         */\n        readonly documentRangeFormattingEdits?: boolean;\n    }\n    export interface LanguageServiceDefaults {\n        readonly languageId: string;\n        readonly modeConfiguration: ModeConfiguration;\n        readonly onDidChange: IEvent<LanguageServiceDefaults>;\n        readonly options: Options;\n        setOptions(options: Options): void;\n        setModeConfiguration(modeConfiguration: ModeConfiguration): void;\n    }\n    export const htmlLanguageService: LanguageServiceRegistration;\n    export const htmlDefaults: LanguageServiceDefaults;\n    export const handlebarLanguageService: LanguageServiceRegistration;\n    export const handlebarDefaults: LanguageServiceDefaults;\n    export const razorLanguageService: LanguageServiceRegistration;\n    export const razorDefaults: LanguageServiceDefaults;\n    export interface LanguageServiceRegistration extends IDisposable {\n        readonly defaults: LanguageServiceDefaults;\n    }\n    /**\n     * Registers a new HTML language service for the languageId.\n     * Note: 'html', 'handlebar' and 'razor' are registered by default.\n     *\n     * Use this method to register additional language ids with a HTML service.\n     * The language server has to be registered before an editor model is opened.\n     */\n    export function registerHTMLLanguageService(\n        languageId: string,\n        options?: Options,\n        modeConfiguration?: ModeConfiguration\n    ): LanguageServiceRegistration;\n    export interface HTMLDataConfiguration {\n        /**\n         * Defines whether the standard HTML tags and attributes are shown\n         */\n        readonly useDefaultDataProvider?: boolean;\n        /**\n         * Provides a set of custom data providers.\n         */\n        readonly dataProviders?: {\n            [providerId: string]: HTMLDataV1;\n        };\n    }\n    /**\n     * Custom HTML tags attributes and attribute values\n     * https://github.com/microsoft/vscode-html-languageservice/blob/main/docs/customData.md\n     */\n    export interface HTMLDataV1 {\n        readonly version: 1 | 1.1;\n        readonly tags?: ITagData[];\n        readonly globalAttributes?: IAttributeData[];\n        readonly valueSets?: IValueSet[];\n    }\n    export interface IReference {\n        readonly name: string;\n        readonly url: string;\n    }\n    export interface ITagData {\n        readonly name: string;\n        readonly description?: string | MarkupContent;\n        readonly attributes: IAttributeData[];\n        readonly references?: IReference[];\n    }\n    export interface IAttributeData {\n        readonly name: string;\n        readonly description?: string | MarkupContent;\n        readonly valueSet?: string;\n        readonly values?: IValueData[];\n        readonly references?: IReference[];\n    }\n    export interface IValueData {\n        readonly name: string;\n        readonly description?: string | MarkupContent;\n        readonly references?: IReference[];\n    }\n    export interface IValueSet {\n        readonly name: string;\n        readonly values: IValueData[];\n    }\n    export interface MarkupContent {\n        readonly kind: MarkupKind;\n        readonly value: string;\n    }\n    export type MarkupKind = 'plaintext' | 'markdown';\n}\n"]}