import { ajax } from "./AjaxHelper.js";
export class NotifierClient {
    constructor(main, networkManager) {
        this.main = main;
        this.networkManager = networkManager;
        this.unsentMessages = [];
        this.connect();
    }
    connect() {
        this.state = "connecting";
        ajax('getWebSocketToken', {}, (response) => {
            let url = (window.location.protocol.startsWith("https") ? "wss://" : "ws://") + window.location.host + "/servlet/subscriptionwebsocket";
            this.connection = new WebSocket(url);
            this.connection.onerror = (error) => { this.onError(error); };
            this.connection.onclose = (event) => { this.onClose(event); };
            this.connection.onmessage = (event) => { this.onMessage(event); };
            this.connection.onopen = (event) => {
                let request = {
                    command: 1,
                    token: response.token
                };
                this.state = "connected";
                this.sendIntern(JSON.stringify(request));
            };
            let that = this;
            setTimeout(() => {
                if (this.state != "subscribed") {
                    this.networkManager.forcedUpdateEvery = 1;
                    this.networkManager.counterTillForcedUpdate = 1;
                }
            }, 7000);
        });
    }
    disconnect() {
        let request = {
            command: 2 // "disconnect"
        };
        this.state = "connected";
        this.sendIntern(JSON.stringify(request));
    }
    sendIntern(message) {
        if (this.state != "disconnected") {
            try {
                this.connection.send(message);
            }
            catch (exception) {
                console.log(exception);
            }
        }
    }
    onClose(event) {
        this.state = "disconnected";
    }
    onMessage(event) {
        let response = JSON.parse(event.data);
        if (response.command == undefined)
            return;
        // 1 == Acknoledge Connection, 2 == Notify, 3 == disconnect, 4 == keep alive response
        switch (response.command) {
            case 1: // Acknoledge Connection
                this.state = "subscribed";
                break;
            case 2: // Notify
                this.networkManager.sendUpdates(() => { }, true);
                break;
            case 3: // disconnect
                this.state = "disconnected";
                break;
            case 4: // keep alive response
                break;
        }
    }
    onError(error) {
        console.log("Fehler beim Notifier-Websocket");
    }
}
//# sourceMappingURL=data:application/json;base64,