//# sourceMappingURL=data:application/json;base64,{"version":3,"file":"pixi3d.js","sourceRoot":"","sources":["../../../src/types/pixi3d.ts"],"names":[],"mappings":"","sourcesContent":["declare module 'pixi3d/animation' {\n  import * as PIXI from \"pixi.js\";\n  /**\n   * Represents an animation.\n   */\n  export abstract class Animation extends PIXI.utils.EventEmitter {\n      name?: string | undefined;\n      private _ticker?;\n      private _update?;\n      /** The duration (in seconds) of this animation. */\n      abstract readonly duration: number;\n      /** The current position (in seconds) of this animation. */\n      abstract position: number;\n      /** The speed that the animation will play at. */\n      speed: number;\n      /** A value indicating if the animation is looping. */\n      loop: boolean;\n      /**\n       * Creates a new animation with the specified name.\n       * @param name Name for the animation.\n       */\n      constructor(name?: string | undefined);\n      /**\n       * Starts playing the animation using the specified ticker.\n       * @param ticker The ticker to use for updating the animation. If a ticker\n       * is not given, the shared ticker will be used.\n       */\n      play(ticker?: PIXI.Ticker): void;\n      /**\n       * Stops playing the animation.\n       */\n      stop(): void;\n      /**\n       * Updates the animation by the specified delta time.\n       * @param delta The time in seconds since last frame.\n       */\n      update(delta: number): void;\n  }\n\n}\ndeclare module 'pixi3d/camera/camera-orbit-control' {\n  import * as PIXI from \"pixi.js\";\n  import { Camera } from \"pixi3d/camera/camera\";\n  /**\n   * Allows the user to control the camera by orbiting the target.\n   */\n  export class CameraOrbitControl {\n      camera: Camera;\n      private _distance;\n      private _grabbed;\n      private _angles;\n      /**\n       * Orientation euler angles (x-axis and y-axis). The angle for the x-axis\n       * will be clamped between -85 and 85 degrees.\n       */\n      get angles(): PIXI.ObservablePoint<undefined>;\n      /** Target position (x, y, z) to orbit. */\n      target: {\n          x: number;\n          y: number;\n          z: number;\n      };\n      /** Allows the camera to be controlled by user. */\n      allowControl: boolean;\n      /**\n       * Creates a new camera orbit control.\n       * @param element The element for listening to user events.\n       * @param camera The camera to control. If not set, the main camera will be used\n       * by default.\n       */\n      constructor(element: HTMLElement, camera?: Camera);\n      /**\n       * Updates the position and rotation of the camera.\n       */\n      updateCamera(): void;\n      /**\n       * Distance between camera and the target. Default value is 5.\n       */\n      get distance(): number;\n      set distance(value: number);\n  }\n\n}\ndeclare module 'pixi3d/camera/camera' {\n  import * as PIXI from \"pixi.js\";\n  import { Container3D } from \"pixi3d/container\";\n  import { Ray } from \"pixi3d/math/ray\";\n  import { ObservablePoint3D } from \"pixi3d/transform/observable-point\";\n  import { TransformId } from \"pixi3d/transform/transform-id\";\n  /**\n   * Camera is a device from which the world is viewed.\n   */\n  export class Camera extends Container3D implements TransformId {\n      renderer: PIXI.Renderer;\n      private _transformId;\n      get transformId(): number;\n      private _projection?;\n      private _view?;\n      private _viewProjection?;\n      private _orthographic;\n      private _orthographicSize;\n      private _obliqueness;\n      /**\n       * Used for making the frustum oblique, which means that one side is at a\n       * smaller angle to the centre line than the opposite side. Only works with\n       * perspective projection.\n       */\n      get obliqueness(): PIXI.IPointData;\n      set obliqueness(value: PIXI.IPointData);\n      /** Main camera which is used by default. */\n      static main: Camera;\n      /**\n       * Creates a new camera using the specified renderer. By default the camera\n       * looks towards negative z and is positioned at z = 5.\n       * @param renderer Renderer to use.\n       */\n      constructor(renderer: PIXI.Renderer);\n      destroy(options?: boolean | PIXI.IDestroyOptions): void;\n      /**\n       * The camera's half-size when in orthographic mode. The visible area from\n       * center of the screen to the top.\n       */\n      get orthographicSize(): number;\n      set orthographicSize(value: number);\n      /**\n       * Camera will render objects uniformly, with no sense of perspective.\n       */\n      get orthographic(): boolean;\n      set orthographic(value: boolean);\n      /**\n       * Converts screen coordinates to a ray.\n       * @param x Screen x coordinate.\n       * @param y Screen y coordinate.\n       * @param viewSize The size of the view when not rendering to the entire screen.\n       */\n      screenToRay(x: number, y: number, viewSize?: {\n          width: number;\n          height: number;\n      }): Ray | undefined;\n      /**\n       * Converts screen coordinates to world coordinates.\n       * @param x Screen x coordinate.\n       * @param y Screen y coordinate.\n       * @param distance Distance from the camera.\n       * @param point Point to set.\n       * @param viewSize The size of the view when not rendering to the entire screen.\n       */\n      screenToWorld(x: number, y: number, distance: number, point?: ObservablePoint3D, viewSize?: {\n          width: number;\n          height: number;\n      }): ObservablePoint3D | undefined;\n      /**\n       * Converts world coordinates to screen coordinates.\n       * @param x World x coordinate.\n       * @param y World y coordinate.\n       * @param z World z coordinate.\n       * @param point Point to set.\n       * @param viewSize The size of the view when not rendering to the entire screen.\n       */\n      worldToScreen(x: number, y: number, z: number, point?: PIXI.Point, viewSize?: {\n          width: number;\n          height: number;\n      }): PIXI.Point;\n      private _fieldOfView;\n      private _near;\n      private _far;\n      private _aspect?;\n      /**\n       * The aspect ratio (width divided by height). If not set, the aspect ratio of\n       * the renderer will be used by default.\n       */\n      get aspect(): number | undefined;\n      set aspect(value: number | undefined);\n      /** The vertical field of view in degrees, 60 is the default value. */\n      get fieldOfView(): number;\n      set fieldOfView(value: number);\n      /** The near clipping plane distance, 0.1 is the default value. */\n      get near(): number;\n      set near(value: number);\n      /** The far clipping plane distance, 1000 is the default value. */\n      get far(): number;\n      set far(value: number);\n      /** Returns the projection matrix. */\n      get projection(): Float32Array;\n      /** Returns the view matrix. */\n      get view(): Float32Array;\n      /** Returns the view projection matrix. */\n      get viewProjection(): Float32Array;\n  }\n\n}\ndeclare module 'pixi3d/capabilities' {\n  import { Renderer } from \"pixi.js\";\n  export namespace Capabilities {\n      function getMaxVertexUniformVectors(renderer: Renderer): number;\n      function isFloatingPointTextureSupported(renderer: Renderer): boolean;\n      function isHalfFloatFramebufferSupported(renderer: Renderer): boolean;\n      function isFloatFramebufferSupported(renderer: Renderer): boolean;\n      function supportsFloatLinear(renderer: Renderer): boolean;\n      function isShaderTextureLodSupported(renderer: Renderer): boolean;\n      function isInstancingSupported(renderer: Renderer): boolean;\n  }\n\n}\ndeclare module 'pixi3d/color' {\n  /**\n   * Represents a color containing RGBA components.\n   */\n  export class Color {\n      private _array4;\n      private _array3;\n      /**\n       * Creates a new color with the specified components (in range 0-1).\n       * @param r The R (red) component.\n       * @param g The G (green) component.\n       * @param b The B (blue) component.\n       * @param a The A (alpha) component.\n       */\n      constructor(r?: number, g?: number, b?: number, a?: number);\n      /**\n       * Creates a new color with the specified components (in range 0-255).\n       * @param r The R (red) component.\n       * @param g The G (green) component.\n       * @param b The B (blue) component.\n       * @param a The A (alpha) component.\n       */\n      static fromBytes(r?: number, g?: number, b?: number, a?: number): Color;\n      /**\n       * Creates a new color from the specified hex value.\n       * @param hex The hex value as a string or a number.\n       */\n      static fromHex(hex: number | string): Color;\n      /** The color as an typed array containing RGB. */\n      get rgb(): Float32Array;\n      /** The color as an typed array containing RGBA. */\n      get rgba(): Float32Array;\n      /** The R (red) component. */\n      get r(): number;\n      set r(value: number);\n      /** The G (green) component. */\n      get g(): number;\n      set g(value: number);\n      /** The B (blue) component. */\n      get b(): number;\n      set b(value: number);\n      /** The A (alpha) component. */\n      get a(): number;\n      set a(value: number);\n      /**\n       * Creates a new color from the specified source.\n       * @param source The source to create the color from.\n       */\n      static from(source: number[] | Float32Array): Color;\n  }\n\n}\ndeclare module 'pixi3d/container' {\n  import * as PIXI from \"pixi.js\";\n  import { ObservableQuaternion } from \"pixi3d/transform/observable-quaternion\";\n  import { Transform3D } from \"pixi3d/transform/transform\";\n  import { ObservablePoint3D } from \"pixi3d/transform/observable-point\";\n  /**\n   * A container represents a collection of 3D objects.\n   */\n  export class Container3D extends PIXI.Container {\n      transform: Transform3D;\n      set position(value: ObservablePoint3D);\n      get position(): ObservablePoint3D;\n      set scale(value: ObservablePoint3D);\n      get scale(): ObservablePoint3D;\n      set rotationQuaternion(value: ObservableQuaternion);\n      /** The quaternion rotation of the object. */\n      get rotationQuaternion(): ObservableQuaternion;\n      /** The position of the object on the z axis relative to the local\n       * coordinates of the parent. */\n      get z(): number;\n      set z(value: number);\n      get localTransform(): import(\"pixi3d/index\").Matrix4;\n      get worldTransform(): import(\"pixi3d/index\").Matrix4;\n  }\n\n}\ndeclare module 'pixi3d/cubemap/cubemap-faces' {\n  import * as PIXI from \"pixi.js\";\n  export interface CubemapFaces {\n      /** The texture or url for positive x. */\n      posx: PIXI.Texture | string;\n      /** The texture or url for negative x. */\n      negx: PIXI.Texture | string;\n      /** The texture or url for positive y. */\n      posy: PIXI.Texture | string;\n      /** The texture or url for negative y. */\n      negy: PIXI.Texture | string;\n      /** The texture or url for positive z. */\n      posz: PIXI.Texture | string;\n      /** The texture or url for negative z. */\n      negz: PIXI.Texture | string;\n  }\n\n}\ndeclare module 'pixi3d/cubemap/cubemap-resource' {\n  import { CubeResource } from \"pixi3d/resource/cube-resource\";\n  import { Renderer } from \"pixi.js\";\n  import { MipmapResource } from \"pixi3d/cubemap/mipmap-resource\";\n  export type MipmapResourceArray = [\n      MipmapResource,\n      MipmapResource,\n      MipmapResource,\n      MipmapResource,\n      MipmapResource,\n      MipmapResource\n  ];\n  export class CubemapResource extends CubeResource {\n      levels: number;\n      constructor(source: MipmapResourceArray, levels?: number);\n      style(renderer: Renderer): boolean;\n  }\n\n}\ndeclare module 'pixi3d/cubemap/cubemap' {\n  import { BaseTexture } from \"pixi.js\";\n  import { CubemapResource } from \"pixi3d/cubemap/cubemap-resource\";\n  import { Color } from \"pixi3d/color\";\n  import { CubemapFaces } from \"pixi3d/cubemap/cubemap-faces\";\n  /**\n   * Cubemap which supports multiple user specified mipmaps.\n   */\n  export class Cubemap extends BaseTexture<CubemapResource> {\n      /** Returns an array of faces. */\n      static get faces(): [\"posx\", \"negx\", \"posy\", \"negy\", \"posz\", \"negz\"];\n      /** Returns the number of mipmap levels. */\n      get levels(): number;\n      /**\n       * Creates a new cubemap from the specified faces.\n       * @param faces The faces to create the cubemap from.\n       */\n      static fromFaces(faces: CubemapFaces | CubemapFaces[]): Cubemap;\n      /**\n       * Creates a new cubemap from the specified colors.\n       * @param posx The color for positive x.\n       * @param negx The color for negative x.\n       * @param posy The color for positive y.\n       * @param negy The color for negative y.\n       * @param posz The color for positive z.\n       * @param negz The color for negative z.\n       */\n      static fromColors(posx: Color, negx?: Color, posy?: Color, negy?: Color, posz?: Color, negz?: Color): Cubemap;\n  }\n\n}\ndeclare module 'pixi3d/cubemap/mipmap-resource' {\n  import { ArrayResource } from \"pixi3d/resource/array-resource\";\n  import { Texture, BaseTexture, Renderer } from \"pixi.js\";\n  export class MipmapResource extends ArrayResource {\n      target: number;\n      constructor(source: (string | Texture)[], target: number);\n      upload(renderer: Renderer, baseTexture: BaseTexture): boolean;\n  }\n\n}\ndeclare module 'pixi3d/debug' {\n  import * as PIXI from \"pixi.js\";\n  import { Message } from \"pixi3d/message\";\n  export namespace Debug {\n      function on(event: string | symbol, fn: PIXI.utils.EventEmitter.ListenerFn, context: any): void;\n      function warn(message: Message, args?: any): void;\n      function error(message: Message, args?: any): void;\n  }\n\n}\ndeclare module 'pixi3d/gltf/animation/gltf-animation' {\n  import { Animation } from \"pixi3d/animation\";\n  import { glTFChannel } from \"pixi3d/gltf/animation/gltf-channel\";\n  /**\n   * Represents an animation loaded from a glTF model.\n   */\n  export class glTFAnimation extends Animation {\n      private _duration;\n      private _position;\n      private _channels;\n      /**\n       * Creates a new glTF animation.\n       * @param channels The channels used by this animation.\n       * @param name The name for the animation.\n       */\n      constructor(channels: glTFChannel[], name?: string);\n      /** The duration (in seconds) of this animation. */\n      get duration(): number;\n      /** The current position (in seconds) of this animation. */\n      get position(): number;\n      set position(value: number);\n  }\n\n}\ndeclare module 'pixi3d/gltf/animation/gltf-channel' {\n  /**\n   * Represents an glTF animation channel which targets a specific node.\n   */\n  export abstract class glTFChannel {\n      private _position;\n      private _frame;\n      private _interpolation;\n      private _input;\n      /**\n       * Creates a new channel with the specified input and interpolation.\n       * @param input An array of inputs representing linear time in seconds.\n       * @param interpolation The interpolation method to use.\n       */\n      constructor(input: ArrayLike<number>, interpolation: glTFInterpolation);\n      /** The position (in seconds) for this channel. */\n      get position(): number;\n      set position(value: number);\n      /** The duration (in seconds) for this channel. */\n      get duration(): number;\n      /** The current frame for this channel. */\n      get frame(): number;\n      /** The number of frames for this channel. */\n      get length(): number;\n      /**\n       * Sets the position and updates the current frame and animation.\n       * @param position The position to set for this channel.\n       */\n      setPosition(position: number): void;\n      abstract updateTarget(data: ArrayLike<number>): void;\n      /**\n       * Updates the channel with the specified delta time in seconds.\n       * @param delta The time (in seconds) since last frame.\n       */\n      update(delta: number): void;\n      /**\n       * Calculates the position within the specified frame.\n       * @param frame The frame to calculate the position in.\n       * @param position The position of this channel.\n       */\n      calculateFramePosition(frame: number, position: number): number;\n      /**\n       * Calculates the current frame for the specified position.\n       * @param position The position of this channel.\n       */\n      calculateFrame(position: number): number;\n      static from(input: ArrayLike<number>, output: ArrayLike<number>, interpolation: string, path: string, target: Container3D): glTFScale | glTFWeights | glTFRotation | glTFTranslation | undefined;\n  }\n  import { Container3D } from \"pixi3d/container\";\n  import { glTFInterpolation } from \"pixi3d/gltf/animation/gltf-interpolation\";\n  import { glTFScale } from \"pixi3d/gltf/animation/gltf-scale\";\n  import { glTFWeights } from \"pixi3d/gltf/animation/gltf-weights\";\n  import { glTFRotation } from \"pixi3d/gltf/animation/gltf-rotation\";\n  import { glTFTranslation } from \"pixi3d/gltf/animation/gltf-translation\";\n\n}\ndeclare module 'pixi3d/gltf/animation/gltf-cubic-spline' {\n  import { glTFInterpolation } from \"pixi3d/gltf/animation/gltf-interpolation\";\n  export class glTFCubicSpline extends glTFInterpolation {\n      private _input;\n      private _output;\n      private _stride;\n      private _data;\n      constructor(_input: ArrayLike<number>, _output: ArrayLike<number>, _stride: number);\n      interpolate(frame: number, position: number): Float32Array;\n      static calculate(t: number, p0: number, p1: number, m0: number, m1: number): number;\n  }\n\n}\ndeclare module 'pixi3d/gltf/animation/gltf-interpolation' {\n  /**\n   * Represents a specific interpolation method.\n   */\n  export abstract class glTFInterpolation {\n      /**\n       * Interpolates within an animation frame and returns the output.\n       * @param frame The animation frame to interpolate.\n       * @param position The position within the animation frame (between 0-1).\n       */\n      abstract interpolate(frame: number, position: number): Float32Array;\n      static from(type: string, input: ArrayLike<number>, output: ArrayLike<number>, stride: number): glTFLinear | glTFCubicSpline | glTFStep;\n  }\n  import { glTFLinear } from \"pixi3d/gltf/animation/gltf-linear\";\n  import { glTFCubicSpline } from \"pixi3d/gltf/animation/gltf-cubic-spline\";\n  import { glTFStep } from \"pixi3d/gltf/animation/gltf-step\";\n\n}\ndeclare module 'pixi3d/gltf/animation/gltf-linear' {\n  import { glTFInterpolation } from \"pixi3d/gltf/animation/gltf-interpolation\";\n  export class glTFLinear extends glTFInterpolation {\n      private _output;\n      private _stride;\n      private _data;\n      constructor(_output: ArrayLike<number>, _stride: number);\n      interpolate(frame: number, position: number): Float32Array;\n  }\n\n}\ndeclare module 'pixi3d/gltf/animation/gltf-rotation' {\n  import { glTFChannel } from \"pixi3d/gltf/animation/gltf-channel\";\n  import { glTFInterpolation } from \"pixi3d/gltf/animation/gltf-interpolation\";\n  import { Transform3D } from \"pixi3d/transform/transform\";\n  export class glTFRotation extends glTFChannel {\n      private _transform;\n      constructor(transform: Transform3D, input: ArrayLike<number>, interpolation: glTFInterpolation);\n      updateTarget(data: ArrayLike<number>): void;\n  }\n\n}\ndeclare module 'pixi3d/gltf/animation/gltf-scale' {\n  import { glTFChannel } from \"pixi3d/gltf/animation/gltf-channel\";\n  import { glTFInterpolation } from \"pixi3d/gltf/animation/gltf-interpolation\";\n  import { Transform3D } from \"pixi3d/transform/transform\";\n  export class glTFScale extends glTFChannel {\n      private _transform;\n      constructor(transform: Transform3D, input: ArrayLike<number>, interpolation: glTFInterpolation);\n      updateTarget(data: ArrayLike<number>): void;\n  }\n\n}\ndeclare module 'pixi3d/gltf/animation/gltf-spherical-linear' {\n  import { glTFInterpolation } from \"pixi3d/gltf/animation/gltf-interpolation\";\n  export class glTFSphericalLinear extends glTFInterpolation {\n      private _output;\n      private _data;\n      constructor(_output: ArrayLike<number>);\n      interpolate(frame: number, position: number): Float32Array;\n  }\n\n}\ndeclare module 'pixi3d/gltf/animation/gltf-step' {\n  import { glTFInterpolation } from \"pixi3d/gltf/animation/gltf-interpolation\";\n  export class glTFStep extends glTFInterpolation {\n      private _output;\n      private _stride;\n      private _data;\n      constructor(_output: ArrayLike<number>, _stride: number);\n      interpolate(frame: number): Float32Array;\n  }\n\n}\ndeclare module 'pixi3d/gltf/animation/gltf-translation' {\n  import { glTFChannel } from \"pixi3d/gltf/animation/gltf-channel\";\n  import { glTFInterpolation } from \"pixi3d/gltf/animation/gltf-interpolation\";\n  import { Transform3D } from \"pixi3d/transform/transform\";\n  export class glTFTranslation extends glTFChannel {\n      private _transform;\n      constructor(transform: Transform3D, input: ArrayLike<number>, interpolation: glTFInterpolation);\n      updateTarget(data: ArrayLike<number>): void;\n  }\n\n}\ndeclare module 'pixi3d/gltf/animation/gltf-weights' {\n  import { glTFChannel } from \"pixi3d/gltf/animation/gltf-channel\";\n  import { glTFInterpolation } from \"pixi3d/gltf/animation/gltf-interpolation\";\n  export class glTFWeights extends glTFChannel {\n      private _weights;\n      constructor(weights: number[], input: ArrayLike<number>, interpolation: glTFInterpolation);\n      updateTarget(data: ArrayLike<number>): void;\n  }\n\n}\ndeclare module 'pixi3d/gltf/gltf-asset' {\n  import { Texture } from \"pixi.js\";\n  import { glTFResourceLoader } from \"pixi3d/gltf/gltf-resource-loader\";\n  /**\n   * glTF assets are JSON files plus supporting external data.\n   */\n  export class glTFAsset {\n      readonly descriptor: any;\n      readonly buffers: ArrayBuffer[];\n      readonly images: Texture[];\n      /**\n       * Creates a new glTF asset using the specified JSON descriptor.\n       * @param descriptor The JSON descriptor to create the asset from.\n       * @param buffers The buffers used by this asset.\n       * @param images The images used by this asset.\n       */\n      constructor(descriptor: any, buffers?: ArrayBuffer[], images?: Texture[]);\n      /**\n       * Loads a new glTF asset (including resources) using the specified JSON\n       * descriptor.\n       * @param descriptor The JSON descriptor to create the asset from.\n       * @param loader The resource loader to use for external resources. The\n       * loader can be empty when all resources in the descriptor is embedded.\n       */\n      static load(descriptor: any, loader?: glTFResourceLoader): glTFAsset;\n      /**\n       * Returns a value indicating if the specified data buffer is a valid glTF.\n       * @param buffer The buffer data to validate.\n       */\n      static isValidBuffer(buffer: ArrayBuffer): boolean;\n      /**\n       * Returns a value indicating if the specified uri is embedded.\n       * @param uri The uri to check.\n       */\n      static isEmbeddedResource(uri: string): boolean;\n      /**\n       * Creates a new glTF asset from binary (glb) buffer data.\n       * @param data The binary buffer data to read from.\n       * @param cb The function which gets called when the asset has been\n       * created.\n       */\n      static fromBuffer(data: ArrayBuffer, cb: (gltf: glTFAsset) => void): void;\n  }\n\n}\ndeclare module 'pixi3d/gltf/gltf-attribute' {\n  /**\n   * Represents data for a specific geometry attribute.\n   */\n  export class glTFAttribute {\n      buffer: Uint32Array | Float32Array | Int8Array | Uint8Array | Int16Array | Uint16Array;\n      componentType: number;\n      stride: number;\n      min?: number[] | undefined;\n      max?: number[] | undefined;\n      constructor(buffer: Uint32Array | Float32Array | Int8Array | Uint8Array | Int16Array | Uint16Array, componentType: number, stride?: number, min?: number[] | undefined, max?: number[] | undefined);\n      static from(componentType: number, buffer: ArrayBuffer, offset: number, size: number, stride?: number, min?: number[], max?: number[]): glTFAttribute;\n  }\n\n}\ndeclare module 'pixi3d/gltf/gltf-material' {\n  import { glTFTexture } from \"pixi3d/gltf/gltf-texture\";\n  /**\n   * glTF defines materials using a common set of parameters that are based on\n   * widely used material representations from Physically-Based Rendering (PBR).\n   */\n  export class glTFMaterial {\n      alphaCutoff: number;\n      alphaMode: string;\n      doubleSided: boolean;\n      roughness: number;\n      metallic: number;\n      baseColorTexture?: glTFTexture;\n      metallicRoughnessTexture?: glTFTexture;\n      normalTexture?: glTFTexture & {\n          scale?: number;\n      };\n      occlusionTexture?: glTFTexture & {\n          strength?: number;\n      };\n      emissiveTexture?: glTFTexture;\n      emissiveFactor: number[];\n      baseColor: number[];\n      unlit: boolean;\n  }\n\n}\ndeclare module 'pixi3d/gltf/gltf-parser' {\n  import * as PIXI from \"pixi.js\";\n  import { glTFAsset } from \"pixi3d/gltf/gltf-asset\";\n  import { glTFAnimation } from \"pixi3d/gltf/animation/gltf-animation\";\n  import { glTFAttribute } from \"pixi3d/gltf/gltf-attribute\";\n  import { Mesh3D } from \"pixi3d/mesh/mesh\";\n  import { Container3D } from \"pixi3d/container\";\n  import { Material } from \"pixi3d/material/material\";\n  import { MaterialFactory } from \"pixi3d/material/material-factory\";\n  import { Model } from \"pixi3d/model\";\n  import { Skin } from \"pixi3d/skinning/skin\";\n  /**\n   * Parses glTF assets and creates models and meshes.\n   */\n  export class glTFParser {\n      private _asset;\n      private _materialFactory;\n      private _descriptor;\n      private _textures;\n      /**\n       * Creates a new parser using the specified asset.\n       * @param asset The asset to parse.\n       * @param materialFactory The material factory to use.\n       */\n      constructor(asset: glTFAsset, materialFactory?: MaterialFactory);\n      /**\n       * Creates a model from the specified asset.\n       * @param asset The asset to create the model from.\n       * @param materialFactory The material factory to use.\n       */\n      static createModel(asset: glTFAsset, materialFactory?: MaterialFactory): Model;\n      /**\n       * Creates a mesh from the specified asset.\n       * @param asset The asset to create the mesh from.\n       * @param materialFactory The material factory to use.\n       * @param mesh The mesh index in the JSON descriptor.\n       */\n      static createMesh(asset: glTFAsset, materialFactory?: MaterialFactory, mesh?: number): Mesh3D[];\n      /**\n       * Creates a new buffer view from the specified accessor.\n       * @param accessor The accessor object or index.\n       */\n      parseBuffer(accessor: any): glTFAttribute | undefined;\n      /**\n       * Creates an animation from the specified animation.\n       * @param animation The source animation object or index.\n       * @param nodes The array of nodes which are potential targets for the animation.\n       */\n      parseAnimation(animation: any, nodes: Container3D[]): glTFAnimation;\n      /**\n       * Creates a material from the specified source.\n       * @param material The source material object or index.\n       */\n      parseMaterial(material?: any): Material;\n      /**\n       * Returns the texture used by the specified object.\n       * @param source The source object or index.\n       */\n      parseTexture(index: number): PIXI.Texture<PIXI.Resource>;\n      /**\n       * Creates an array of meshes from the specified mesh.\n       * @param mesh The source mesh object or index.\n       * @returns An array which contain arrays of meshes. This is because of the\n       * structure used in glTF, where each mesh contain a number of primitives.\n       * Read more about this in discussion at https://github.com/KhronosGroup/glTF/issues/821\n       */\n      parseMesh(mesh: any): Mesh3D[];\n      /**\n       * Creates a skin from the specified source.\n       * @param skin The source skin object or index.\n       * @param target The target container for the skin.\n       * @param nodes The array of nodes which are potential targets for the animation.\n       */\n      parseSkin(skin: any, target: Container3D, nodes: Container3D[]): Skin;\n      /**\n       * Creates a mesh from the specified primitive.\n       * @param primitive The source primitive object.\n       */\n      parsePrimitive(primitive: any): Mesh3D;\n      /**\n       * Creates a container or joint from the specified node index.\n       * @param node The index of the node.\n       */\n      parseNode(index: number): Container3D;\n      parseModel(): Model;\n  }\n\n}\ndeclare module 'pixi3d/gltf/gltf-resource-loader' {\n  import * as PIXI from \"pixi.js\";\n  /**\n   * Represents a loader for glTF asset resources (buffers and images).\n   */\n  export interface glTFResourceLoader {\n      /**\n       * Loads the resource from the specified uri.\n       * @param uri The uri to load from.\n       * @param onComplete Callback when loading is completed.\n       */\n      load(uri: string, onComplete: (resource: PIXI.ILoaderResource) => void): void;\n  }\n\n}\ndeclare module 'pixi3d/gltf/gltf-texture' {\n  import { Texture } from \"pixi.js\";\n  export interface glTFTexture extends Texture {\n      texCoord?: number;\n      transform?: {\n          offset?: [number, number];\n          rotation?: number;\n          scale?: [number, number];\n      };\n  }\n\n}\n\ndeclare module 'pixi3d/index' {\n  export { glTFLoader } from \"pixi3d/loader/gltf-loader\";\n  export { glTFBinaryLoader } from \"pixi3d/loader/gltf-binary-loader\";\n  export { glTFAsset } from \"pixi3d/gltf/gltf-asset\";\n  export { glTFResourceLoader } from \"pixi3d/gltf/gltf-resource-loader\";\n  export { ObservablePoint3D } from \"pixi3d/transform/observable-point\";\n  export { ObservableQuaternion } from \"pixi3d/transform/observable-quaternion\";\n  export { Transform3D } from \"pixi3d/transform/transform\";\n  export { Matrix4 } from \"pixi3d/transform/matrix4\";\n  export { Container3D } from \"pixi3d/container\";\n  export { Camera } from \"pixi3d/camera/camera\";\n  export { CameraOrbitControl } from \"pixi3d/camera/camera-orbit-control\";\n  export { Mesh3D } from \"pixi3d/mesh/mesh\";\n  export { MeshDestroyOptions } from \"pixi3d/mesh/mesh-destroy-options\";\n  export { MeshGeometry3D } from \"pixi3d/mesh/geometry/mesh-geometry\";\n  export { MeshGeometryAttribute } from \"pixi3d/mesh/geometry/mesh-geometry-attribute\";\n  export { MeshGeometryTarget } from \"pixi3d/mesh/geometry/mesh-geometry-target\";\n  export { MeshShader } from \"pixi3d/mesh/mesh-shader\";\n  export type { InstancedMesh3D } from \"pixi3d/mesh/instanced-mesh\";\n  export { Model } from \"pixi3d/model\";\n  export { InstancedModel } from \"pixi3d/instanced-model\";\n  export { Animation } from \"pixi3d/animation\";\n  export { LightType } from \"pixi3d/lighting/light-type\";\n  export { Light } from \"pixi3d/lighting/light\";\n  export { LightingEnvironment } from \"pixi3d/lighting/lighting-environment\";\n  export { ImageBasedLighting } from \"pixi3d/lighting/image-based-lighting\";\n  export { StandardPipeline } from \"pixi3d/pipeline/standard-pipeline\";\n  export { MaterialRenderPass } from \"pixi3d/pipeline/material-render-pass\";\n  export { Material } from \"pixi3d/material/material\";\n  export { MaterialRenderSortType } from \"pixi3d/material/material-render-sort-type\";\n  export { MaterialFactory } from \"pixi3d/material/material-factory\";\n  export { TextureTransform } from \"pixi3d/texture/texture-transform\";\n  export { CubemapLoader } from \"pixi3d/loader/cubemap-loader\";\n  export { Cubemap } from \"pixi3d/cubemap/cubemap\";\n  export { ShaderSourceLoader } from \"pixi3d/loader/shader-source-loader\";\n  export { Skybox } from \"pixi3d/skybox/skybox\";\n  export { StandardMaterial } from \"pixi3d/material/standard/standard-material\";\n  export { StandardMaterialAlphaMode } from \"pixi3d/material/standard/standard-material-alpha-mode\";\n  export { StandardMaterialDebugMode } from \"pixi3d/material/standard/standard-material-debug-mode\";\n  export { StandardMaterialNormalTexture } from \"pixi3d/material/standard/standard-material-normal-texture\";\n  export { StandardMaterialOcclusionTexture } from \"pixi3d/material/standard/standard-material-occlusion-texture\";\n  export { StandardMaterialTexture } from \"pixi3d/material/standard/standard-material-texture\";\n  export { InstancedStandardMaterial } from \"pixi3d/material/standard/instanced-standard-material\";\n  export { PickingHitArea } from \"pixi3d/picking/picking-hitarea\";\n  export { PickingInteraction } from \"pixi3d/picking/picking-interaction\";\n  export { Skin } from \"pixi3d/skinning/skin\";\n  export { Joint } from \"pixi3d/skinning/joint\";\n  export { ShadowRenderPass } from \"pixi3d/shadow/shadow-render-pass\";\n  export { ShadowCastingLight } from \"pixi3d/shadow/shadow-casting-light\";\n  export { ShadowCastingLightOptions } from \"pixi3d/shadow/shadow-casting-light\";\n  export { ShadowQuality } from \"pixi3d/shadow/shadow-quality\";\n  export { PostProcessingSprite, PostProcessingSpriteOptions } from \"pixi3d/sprite/post-processing-sprite\";\n  export { AABB } from \"pixi3d/math/aabb\";\n  export { Ray } from \"pixi3d/math/ray\";\n  export { Plane } from \"pixi3d/math/plane\";\n  export { Vec3 } from \"pixi3d/math/vec3\";\n  export { Mat4 } from \"pixi3d/math/mat4\";\n  export { Quat } from \"pixi3d/math/quat\";\n  export { Color } from \"pixi3d/color\";\n  export { CubemapFaces } from \"pixi3d/cubemap/cubemap-faces\";\n  export { CubemapResource } from \"pixi3d/cubemap/cubemap-resource\";\n  export { Sprite3D } from \"pixi3d/sprite/sprite\";\n  export { SpriteBatchRenderer } from \"pixi3d/sprite/sprite-batch-renderer\";\n  export { SpriteBillboardType } from \"pixi3d/sprite/sprite-billboard-type\";\n  export { RenderPass } from \"pixi3d/pipeline/render-pass\";\n  export { Debug } from \"pixi3d/debug\";\n\n}\ndeclare module 'pixi3d/instanced-model' {\n  import { Container3D } from \"pixi3d/container\";\n  import { InstancedMesh3D } from \"pixi3d/mesh/instanced-mesh\";\n  import { Model } from \"pixi3d/model\";\n  /**\n   * Represents an instance of a model.\n   */\n  export class InstancedModel extends Container3D {\n      /** The meshes included in the model. */\n      meshes: InstancedMesh3D[];\n      /**\n       * Creates a new model instance from the specified model.\n       * @param model The model to create instance from.\n       */\n      constructor(model: Model);\n  }\n\n}\ndeclare module 'pixi3d/lighting/image-based-lighting' {\n  import { Texture } from \"pixi.js\";\n  import { Cubemap } from \"pixi3d/cubemap/cubemap\";\n  /**\n   * Collection of components used for image-based lighting (IBL), a\n   * rendering technique which involves capturing an omnidirectional representation\n   * of real-world light information as an image.\n   */\n  export class ImageBasedLighting {\n      private _diffuse;\n      private _specular;\n      /** The default BRDF integration map lookup texture. */\n      static defaultLookupBrdf: Texture<import(\"pixi.js\").Resource>;\n      /** Cube texture used for the diffuse component. */\n      get diffuse(): Cubemap;\n      /** Cube mipmap texture used for the specular component. */\n      get specular(): Cubemap;\n      /** BRDF integration map lookup texture. */\n      lookupBrdf?: Texture;\n      /**\n       * Creates a new image-based lighting object.\n       * @param diffuse Cubemap used for the diffuse component.\n       * @param specular Cubemap used for the specular component.\n       */\n      constructor(diffuse: Cubemap, specular: Cubemap);\n      /**\n       * Value indicating if this object is valid to be used for rendering.\n       */\n      get valid(): boolean;\n  }\n\n}\ndeclare module 'pixi3d/lighting/light-type' {\n  export enum LightType {\n      /**\n       * A light that is located at a point and emits light in a cone shape.\n       */\n      spot = \"spot\",\n      /**\n       * A light that is located infinitely far away, and emits light in one\n       * direction only.\n       */\n      directional = \"directional\",\n      /**\n       * A light that is located at a point and emits light in all directions\n       * equally.\n       */\n      point = \"point\"\n  }\n\n}\ndeclare module 'pixi3d/lighting/light' {\n  import { Color } from \"pixi3d/color\";\n  import { Container3D } from \"pixi3d/container\";\n  import { LightType } from \"pixi3d/lighting/light-type\";\n  export class Light extends Container3D {\n      /** The type of the light. */\n      type: LightType;\n      /** The color of the light. */\n      color: Color;\n      /** The range of the light. */\n      range: number;\n      /** The intensity of the light. */\n      intensity: number;\n      /** The inner cone angle specified in degrees. */\n      innerConeAngle: number;\n      /** The outer cone angle specified in degrees. */\n      outerConeAngle: number;\n  }\n\n}\ndeclare module 'pixi3d/lighting/lighting-environment' {\n  import { Renderer, IRendererPlugin } from \"pixi.js\";\n  import { ImageBasedLighting } from \"pixi3d/lighting/image-based-lighting\";\n  import { Light } from \"pixi3d/lighting/light\";\n  /**\n   * A lighting environment represents the different lighting conditions for a\n   * specific object or an entire scene.\n   */\n  export class LightingEnvironment implements IRendererPlugin {\n      renderer: Renderer;\n      /** The image-based lighting object. */\n      imageBasedLighting?: ImageBasedLighting;\n      /** The lights affecting this lighting environment. */\n      lights: Light[];\n      /** The main lighting environment which is used by default. */\n      static main: LightingEnvironment;\n      /**\n       * Creates a new lighting environment using the specified renderer.\n       * @param renderer The renderer to use.\n       */\n      constructor(renderer: Renderer, imageBasedLighting?: ImageBasedLighting);\n      destroy(): void;\n      /** Value indicating if this object is valid to be used for rendering. */\n      get valid(): boolean;\n  }\n\n}\ndeclare module 'pixi3d/loader/cubemap-loader' {\n  export const CubemapLoader: {\n      use: (resource: any, next: () => void) => void;\n      add: () => void;\n  };\n\n}\ndeclare module 'pixi3d/loader/gltf-binary-loader' {\n  import { ILoaderResource } from \"pixi.js\";\n  export const glTFBinaryLoader: {\n      use: (resource: ILoaderResource, next: () => void) => void;\n      add: () => void;\n  };\n\n}\ndeclare module 'pixi3d/loader/gltf-loader' {\n  import { ILoaderResource } from \"pixi.js\";\n  export const glTFLoader: {\n      use: (resource: ILoaderResource, next: () => void) => void;\n      add: () => void;\n  };\n\n}\ndeclare module 'pixi3d/loader/shader-source-loader' {\n  export const ShaderSourceLoader: {\n      use: (resource: any, next: () => void) => void;\n      add: () => void;\n  };\n\n}\ndeclare module 'pixi3d/material/material-factory' {\n  import { Material } from \"pixi3d/material/material\";\n  /**\n   * Factory for creating materials.\n   */\n  export interface MaterialFactory {\n      /**\n       * Creates a new material from the specified source.\n       * @param source The source of the material.\n       */\n      create(source: unknown): Material;\n  }\n\n}\ndeclare module 'pixi3d/material/material-render-sort-type' {\n  export enum MaterialRenderSortType {\n      opaque = \"opaque\",\n      transparent = \"transparent\"\n  }\n\n}\ndeclare module 'pixi3d/material/material' {\n  import { State, Renderer, DRAW_MODES, BLEND_MODES } from \"pixi.js\";\n  import { Mesh3D } from \"pixi3d/mesh/mesh\";\n  import { MaterialRenderSortType } from \"pixi3d/material/material-render-sort-type\";\n  import { MeshShader } from \"pixi3d/mesh/mesh-shader\";\n  /**\n   * Materials are used to render a mesh with a specific visual appearance.\n   */\n  export abstract class Material {\n      protected _renderSortType: MaterialRenderSortType;\n      protected _shader?: MeshShader;\n      /** State used to render a mesh. */\n      state: State & {\n          culling: boolean;\n          clockwiseFrontFace: boolean;\n          depthTest: boolean;\n      };\n      /** Draw mode used to render a mesh. */\n      drawMode: DRAW_MODES;\n      /**\n       * Sort type used to render a mesh. Transparent materials will be rendered\n       * after opaque materials.\n       */\n      renderSortType: MaterialRenderSortType;\n      /**\n       * Value indicating if writing into the depth buffer is enabled or disabled.\n       * Depth mask feature is only available in PixiJS 6.0+ and won't have any\n       * effects in previous versions.\n       */\n      get depthMask(): boolean;\n      set depthMask(value: boolean);\n      /**\n       * Value indicating if the material is double sided. When set to true, the\n       * culling state will be set to false.\n       */\n      get doubleSided(): boolean;\n      set doubleSided(value: boolean);\n      /** Blend mode used to render a mesh. */\n      get blendMode(): BLEND_MODES;\n      set blendMode(value: BLEND_MODES);\n      /**\n       * Creates a shader used to render the specified mesh.\n       * @param mesh The mesh to create the shader for.\n       * @param renderer The renderer to use.\n       */\n      abstract createShader(mesh: Mesh3D, renderer: Renderer): MeshShader | undefined;\n      /**\n       * Updates the uniforms for the specified shader.\n       * @param mesh The mesh used for updating the uniforms.\n       * @param shader The shader to update.\n       */\n      abstract updateUniforms?(mesh: Mesh3D, shader: MeshShader): void;\n      /**\n       * Destroys the material and it's used resources.\n       */\n      destroy(): void;\n      /**\n       * Returns a value indicating if this material supports instancing.\n       */\n      get isInstancingSupported(): boolean;\n      /**\n       * Creates a new instanced version of this material.\n       */\n      createInstance(): unknown;\n      /**\n       * Renders the specified mesh.\n       * @param mesh The mesh to render.\n       * @param renderer The renderer to use.\n       */\n      render(mesh: Mesh3D, renderer: Renderer): void;\n  }\n\n}\ndeclare module 'pixi3d/material/standard/instanced-standard-material' {\n  import { Color } from \"pixi3d/color\";\n  import { StandardMaterial } from \"pixi3d/material/standard/standard-material\";\n  /** Material for instanced meshes which uses the standard material. */\n  export class InstancedStandardMaterial {\n      /** The base color of the material. */\n      baseColor: Color;\n      /** Creates a new instanced standard material from the specified material. */\n      constructor(material: StandardMaterial);\n  }\n\n}\ndeclare module 'pixi3d/material/standard/standard-material-alpha-mode' {\n  export enum StandardMaterialAlphaMode {\n      /**\n       * The rendered output is fully opaque and any alpha value is ignored.\n       */\n      opaque = \"opaque\",\n      /**\n       * The rendered output is either fully opaque or fully transparent depending\n       * on the alpha value and the specified alpha cutoff value. This mode is used\n       * to simulate geometry such as tree leaves or wire fences.\n       */\n      mask = \"mask\",\n      /**\n       * The rendered output is combined with the background using the normal\n       * painting operation (i.e. the Porter and Duff over operator). This mode is\n       * used to simulate geometry such as guaze cloth or animal fur.\n       */\n      blend = \"blend\"\n  }\n\n}\ndeclare module 'pixi3d/material/standard/standard-material-debug-mode' {\n  export enum StandardMaterialDebugMode {\n      alpha = \"alpha\",\n      emissive = \"emissive\",\n      f0 = \"f0\",\n      metallic = \"metallic\",\n      normal = \"normal\",\n      occlusion = \"occlusion\",\n      roughness = \"roughness\"\n  }\n\n}\ndeclare module 'pixi3d/material/standard/standard-material-factory' {\n  import { glTFTexture } from \"pixi3d/gltf/gltf-texture\";\n  import { TextureTransform } from \"pixi3d/texture/texture-transform\";\n  import { StandardMaterial } from \"pixi3d/material/standard/standard-material\";\n  export class StandardMaterialFactory {\n      create(source: unknown): StandardMaterial;\n      createTextureTransform(texture: glTFTexture): TextureTransform | undefined;\n  }\n\n}\ndeclare module 'pixi3d/material/standard/standard-material-feature-set' {\n  import { Renderer } from \"pixi.js\";\n  import { MeshGeometry3D } from \"pixi3d/mesh/geometry/mesh-geometry\";\n  import { StandardMaterial } from \"pixi3d/material/standard/standard-material\";\n  import { LightingEnvironment } from \"pixi3d/lighting/lighting-environment\";\n  import { Mesh3D } from \"pixi3d/mesh/mesh\";\n  export namespace StandardMaterialFeatureSet {\n      function build(renderer: Renderer, mesh: Mesh3D, geometry: MeshGeometry3D, material: StandardMaterial, lightingEnvironment: LightingEnvironment): string[] | undefined;\n      function hasSkinningTextureFeature(features: string[]): boolean;\n  }\n\n}\ndeclare module 'pixi3d/material/standard/standard-material-matrix-texture' {\n  import { Texture, Renderer } from \"pixi.js\";\n  export class StandardMaterialMatrixTexture extends Texture {\n      private _buffer;\n      static isSupported(renderer: Renderer): boolean;\n      constructor(matrixCount: number);\n      updateBuffer(buffer: Float32Array): void;\n  }\n\n}\ndeclare module 'pixi3d/material/standard/standard-material-normal-texture' {\n  import { BaseTexture } from \"pixi.js\";\n  import { StandardMaterialTexture } from \"pixi3d/material/standard/standard-material-texture\";\n  /**\n   * Represents a texture which holds specific data for a normal map.\n   */\n  export class StandardMaterialNormalTexture extends StandardMaterialTexture {\n      scale?: number | undefined;\n      uvSet?: number | undefined;\n      /**\n       * Creates a new texture from the specified base texture.\n       * @param baseTexture The base texture.\n       * @param scale The scale of the normal.\n       * @param uvSet The uv set to use (0 or 1).\n       */\n      constructor(baseTexture: BaseTexture, scale?: number | undefined, uvSet?: number | undefined);\n  }\n\n}\ndeclare module 'pixi3d/material/standard/standard-material-occlusion-texture' {\n  import { BaseTexture } from \"pixi.js\";\n  import { StandardMaterialTexture } from \"pixi3d/material/standard/standard-material-texture\";\n  /**\n   * Represents a texture which holds specific data for a occlusion map.\n   */\n  export class StandardMaterialOcclusionTexture extends StandardMaterialTexture {\n      strength?: number | undefined;\n      uvSet?: number | undefined;\n      /**\n       * Creates a new texture from the specified base texture.\n       * @param baseTexture The base texture.\n       * @param strength The strength of the occlusion.\n       * @param uvSet The uv set to use (0 or 1).\n       */\n      constructor(baseTexture: BaseTexture, strength?: number | undefined, uvSet?: number | undefined);\n  }\n\n}\ndeclare module 'pixi3d/material/standard/standard-material-skin-uniforms' {\n  import * as PIXI from \"pixi.js\";\n  import { Mesh3D } from \"pixi3d/mesh/mesh\";\n  export class StandardMaterialSkinUniforms {\n      private _jointMatrixTexture?;\n      private _jointNormalTexture?;\n      enableJointMatrixTextures(jointsCount: number): void;\n      destroy(): void;\n      update(mesh: Mesh3D, shader: PIXI.Shader): void;\n  }\n\n}\ndeclare module 'pixi3d/material/standard/standard-material-texture' {\n  import { BaseTexture, Texture } from \"pixi.js\";\n  import { TextureTransform } from \"pixi3d/texture/texture-transform\";\n  /**\n   * Represents a texture which can have a transform.\n   */\n  export class StandardMaterialTexture extends Texture {\n      uvSet?: number | undefined;\n      /** The transform to use for this texture. */\n      transform?: TextureTransform;\n      /**\n       * Creates a new texture from the specified base texture.\n       * @param baseTexture The base texture.\n       * @param uvSet The uv set to use (0 or 1).\n       */\n      constructor(baseTexture: BaseTexture, uvSet?: number | undefined);\n  }\n\n}\ndeclare module 'pixi3d/material/standard/standard-material' {\n  import { Renderer, Shader } from \"pixi.js\";\n  import { StandardShader } from \"pixi3d/material/standard/standard-shader\";\n  import { Material } from \"pixi3d/material/material\";\n  import { Camera } from \"pixi3d/camera/camera\";\n  import { LightingEnvironment } from \"pixi3d/lighting/lighting-environment\";\n  import { Mesh3D } from \"pixi3d/mesh/mesh\";\n  import { StandardMaterialAlphaMode } from \"pixi3d/material/standard/standard-material-alpha-mode\";\n  import { StandardMaterialDebugMode } from \"pixi3d/material/standard/standard-material-debug-mode\";\n  import { ShadowCastingLight } from \"pixi3d/shadow/shadow-casting-light\";\n  import { Color } from \"pixi3d/color\";\n  import { InstancedStandardMaterial } from \"pixi3d/material/standard/instanced-standard-material\";\n  import { StandardMaterialOcclusionTexture } from \"pixi3d/material/standard/standard-material-occlusion-texture\";\n  import { StandardMaterialNormalTexture } from \"pixi3d/material/standard/standard-material-normal-texture\";\n  import { StandardMaterialTexture } from \"pixi3d/material/standard/standard-material-texture\";\n  /**\n   * The standard material is using Physically-Based Rendering (PBR) which makes\n   * it suitable to represent a wide range of different surfaces. It's the default\n   * material when loading models from file.\n   */\n  export class StandardMaterial extends Material {\n      private _lightingEnvironment?;\n      private _lightingEnvironmentConfigId;\n      private _unlit;\n      private _alphaMode;\n      private _debugMode?;\n      private _baseColorTexture?;\n      private _baseColor;\n      private _normalTexture?;\n      private _occlusionTexture?;\n      private _emissiveTexture?;\n      private _metallicRoughnessTexture?;\n      private _shadowCastingLight?;\n      private _instancingEnabled;\n      private _skinUniforms;\n      /** The roughness of the material. */\n      roughness: number;\n      /** The metalness of the material. */\n      metallic: number;\n      /** The base color of the material. */\n      baseColor: Color;\n      /** The cutoff threshold when alpha mode is set to \"mask\". */\n      alphaCutoff: number;\n      /** The emissive color of the material. */\n      emissive: Color;\n      /** The exposure (brightness) of the material. */\n      exposure: number;\n      /** The base color texture. */\n      get baseColorTexture(): StandardMaterialTexture | undefined;\n      set baseColorTexture(value: StandardMaterialTexture | undefined);\n      /** The metallic-roughness texture. */\n      get metallicRoughnessTexture(): StandardMaterialTexture | undefined;\n      set metallicRoughnessTexture(value: StandardMaterialTexture | undefined);\n      /** The normal map texture. */\n      get normalTexture(): StandardMaterialNormalTexture | undefined;\n      set normalTexture(value: StandardMaterialNormalTexture | undefined);\n      /** The occlusion map texture. */\n      get occlusionTexture(): StandardMaterialOcclusionTexture | undefined;\n      set occlusionTexture(value: StandardMaterialOcclusionTexture | undefined);\n      /** The emissive map texture. */\n      get emissiveTexture(): StandardMaterialTexture | undefined;\n      set emissiveTexture(value: StandardMaterialTexture | undefined);\n      /** The alpha rendering mode of the material. */\n      get alphaMode(): StandardMaterialAlphaMode;\n      set alphaMode(value: StandardMaterialAlphaMode);\n      /** The shadow casting light of the material. */\n      get shadowCastingLight(): ShadowCastingLight | undefined;\n      set shadowCastingLight(value: ShadowCastingLight | undefined);\n      /** The debug rendering mode of the material. */\n      get debugMode(): StandardMaterialDebugMode | undefined;\n      set debugMode(value: StandardMaterialDebugMode | undefined);\n      /**\n       * The camera used when rendering a mesh. If this value is not set, the main\n       * camera will be used by default.\n       */\n      camera?: Camera;\n      /**\n       * Lighting environment used when rendering a mesh. If this value is not set,\n       * the main lighting environment will be used by default.\n       */\n      get lightingEnvironment(): LightingEnvironment | undefined;\n      set lightingEnvironment(value: LightingEnvironment | undefined);\n      /**\n       * Value indicating if the material is unlit. If this value if set to true,\n       * all lighting is disabled and only the base color will be used.\n       */\n      get unlit(): boolean;\n      set unlit(value: boolean);\n      destroy(): void;\n      /**\n       * Invalidates the shader so it can be rebuilt with the current features.\n       */\n      invalidateShader(): void;\n      /**\n       * Creates a new standard material from the specified source.\n       * @param source Source from which the material is created.\n       */\n      static create(source: unknown): StandardMaterial;\n      render(mesh: Mesh3D, renderer: Renderer): void;\n      get isInstancingSupported(): boolean;\n      createInstance(): InstancedStandardMaterial;\n      createShader(mesh: Mesh3D, renderer: Renderer): StandardShader | undefined;\n      updateUniforms(mesh: Mesh3D, shader: Shader): void;\n  }\n\n}\ndeclare module 'pixi3d/material/standard/standard-shader-instancing' {\n  import * as PIXI from \"pixi.js\";\n  import { InstancedMesh3D } from \"pixi3d/mesh/instanced-mesh\";\n  export class StandardShaderInstancing {\n      private _maxInstances;\n      private _modelMatrix;\n      private _normalMatrix;\n      private _baseColor;\n      constructor();\n      expandBuffers(instanceCount: number): void;\n      updateBuffers(instances: InstancedMesh3D[]): void;\n      addGeometryAttributes(geometry: PIXI.Geometry): void;\n  }\n\n}\ndeclare module 'pixi3d/material/standard/standard-shader-source' {\n  import * as PIXI from \"pixi.js\";\n  export namespace StandardShaderSource {\n      function build(source: string, features: string[], renderer: PIXI.Renderer): string;\n  }\n\n}\ndeclare module 'pixi3d/material/standard/standard-shader' {\n  import * as PIXI from \"pixi.js\";\n  import { MeshGeometry3D } from \"pixi3d/mesh/geometry/mesh-geometry\";\n  import { Mesh3D } from \"pixi3d/mesh/mesh\";\n  import { MeshShader } from \"pixi3d/mesh/mesh-shader\";\n  export class StandardShader extends MeshShader {\n      private _instancing;\n      static build(renderer: PIXI.Renderer, features: string[]): StandardShader;\n      get name(): string;\n      createShaderGeometry(geometry: MeshGeometry3D, instanced: boolean): PIXI.Geometry;\n      render(mesh: Mesh3D, renderer: PIXI.Renderer, state: PIXI.State, drawMode: PIXI.DRAW_MODES): void;\n  }\n\n}\ndeclare module 'pixi3d/math/aabb' {\n  import { ObservablePoint3D } from \"pixi3d/index\";\n  /**\n   * Axis-aligned bounding box.\n   */\n  export class AABB {\n      private _onChanged;\n      private _min;\n      private _max;\n      private _center;\n      private _size;\n      private _extents;\n      /** The minimal point of the bounding box. */\n      get min(): ObservablePoint3D;\n      set min(value: ObservablePoint3D);\n      /** The maximal point of the bounding box. */\n      get max(): ObservablePoint3D;\n      set max(value: ObservablePoint3D);\n      /** The center of the bounding box. */\n      get center(): ObservablePoint3D;\n      /** The size of the bounding box. */\n      get size(): ObservablePoint3D;\n      /** The extents of the bounding box. */\n      get extents(): ObservablePoint3D;\n      /**\n       * Creates a new bounding box from the specified source.\n       * @param source The source to create the bounding box from.\n       */\n      static from(source: {\n          min: Float32Array;\n          max: Float32Array;\n      }): AABB;\n      /**\n       * Grows the bounding box to include the point.\n       * @param point The point to include.\n       */\n      encapsulate(point: {\n          x: number;\n          y: number;\n          z: number;\n      }): void;\n  }\n\n}\ndeclare module 'pixi3d/math/mat3' {\n  export class Mat3 {\n      static multiply(a: Float32Array, b: Float32Array, out?: Float32Array): Float32Array;\n  }\n\n}\ndeclare module 'pixi3d/math/mat4' {\n  export class Mat4 {\n      static getTranslation(mat: Float32Array, out?: Float32Array): Float32Array;\n      static create(): Float32Array;\n      static translate(mat: Float32Array, v: Float32Array, out?: Float32Array): Float32Array;\n      static getScaling(mat: Float32Array, out?: Float32Array): Float32Array;\n      static getRotation(mat: Float32Array, out?: Float32Array): Float32Array;\n      static copy(a: Float32Array, out?: Float32Array): Float32Array;\n      static fromQuat(q: Float32Array, out?: Float32Array): Float32Array;\n      static fromRotationTranslationScale(q: Float32Array, v: Float32Array, s: Float32Array, out?: Float32Array): Float32Array;\n      static fromRotation(rad: number, axis: Float32Array, out?: Float32Array): Float32Array;\n      static fromScaling(v: Float32Array, out?: Float32Array): Float32Array;\n      static fromTranslation(v: Float32Array, out?: Float32Array): Float32Array;\n      static multiply(a: Float32Array, b: Float32Array, out?: Float32Array): Float32Array;\n      static lookAt(eye: Float32Array, center: Float32Array, up: Float32Array, out?: Float32Array): Float32Array;\n      static identity(out?: Float32Array): Float32Array;\n      static perspective(fovy: number, aspect: number, near: number, far: number, out?: Float32Array): Float32Array;\n      static ortho(left: number, right: number, bottom: number, top: number, near: number, far: number, out?: Float32Array): Float32Array;\n      static invert(a: Float32Array, out?: Float32Array): Float32Array;\n      static transpose(a: Float32Array, out?: Float32Array): Float32Array;\n      static targetTo(eye: Float32Array, target: Float32Array, up: Float32Array, out?: Float32Array): Float32Array;\n      static rotateX(a: Float32Array, rad: number, out?: Float32Array): Float32Array;\n      static rotateY(a: Float32Array, rad: number, out?: Float32Array): Float32Array;\n      static rotateZ(a: Float32Array, rad: number, out?: Float32Array): Float32Array;\n      static rotate(a: Float32Array, rad: number, axis: Float32Array, out?: Float32Array): Float32Array;\n      static scale(a: Float32Array, v: Float32Array, out?: Float32Array): Float32Array;\n  }\n\n}\ndeclare module 'pixi3d/math/plane' {\n  import { Ray } from \"pixi3d/math/ray\";\n  export class Plane {\n      distance: number;\n      private _normal;\n      constructor(normal: Float32Array, distance: number);\n      get normal(): Float32Array;\n      rayCast(ray: Ray): number;\n  }\n\n}\ndeclare module 'pixi3d/math/quat' {\n  export class Quat {\n      static set(x: number, y: number, z: number, w: number, out?: Float32Array): Float32Array;\n      static fromValues(x: number, y: number, z: number, w: number): Float32Array;\n      static create(): Float32Array;\n      static normalize(a: Float32Array, out?: Float32Array): Float32Array;\n      static slerp(a: Float32Array, b: Float32Array, t: number, out?: Float32Array): Float32Array;\n      static fromEuler(x: number, y: number, z: number, out?: Float32Array): Float32Array;\n      static conjugate(a: Float32Array, out?: Float32Array): Float32Array;\n      static rotateX(a: Float32Array, rad: number, out?: Float32Array): Float32Array;\n      static rotateY(a: Float32Array, rad: number, out?: Float32Array): Float32Array;\n      static rotateZ(a: Float32Array, rad: number, out?: Float32Array): Float32Array;\n  }\n\n}\ndeclare module 'pixi3d/math/ray' {\n  export class Ray {\n      private _direction;\n      private _origin;\n      constructor(origin: Float32Array, direction: Float32Array);\n      get origin(): Float32Array;\n      get direction(): Float32Array;\n      getPoint(distance: number, point?: Float32Array): Float32Array;\n  }\n\n}\ndeclare module 'pixi3d/math/vec3' {\n  export class Vec3 {\n      static set(x: number, y: number, z: number, out?: Float32Array): Float32Array;\n      static fromValues(x: number, y: number, z: number): Float32Array;\n      static create(): Float32Array;\n      static add(a: Float32Array, b: Float32Array, out?: Float32Array): Float32Array;\n      static transformQuat(a: Float32Array, q: Float32Array, out?: Float32Array): Float32Array;\n      static subtract(a: Float32Array, b: Float32Array, out?: Float32Array): Float32Array;\n      static scale(a: Float32Array, b: number, out?: Float32Array): Float32Array;\n      static dot(a: Float32Array, b: Float32Array): number;\n      static normalize(a: Float32Array, out?: Float32Array): Float32Array;\n      static cross(a: Float32Array, b: Float32Array, out?: Float32Array): Float32Array;\n      static transformMat4(a: Float32Array, m: Float32Array, out?: Float32Array): Float32Array;\n      static copy(a: Float32Array, out?: Float32Array): Float32Array;\n      static magnitude(a: Float32Array): number;\n      static inverse(a: Float32Array, out?: Float32Array): Float32Array;\n      static negate(a: Float32Array, out?: Float32Array): Float32Array;\n      static multiply(a: Float32Array, b: Float32Array, out?: Float32Array): Float32Array;\n      static distance(a: Float32Array, b: Float32Array): number;\n      static squaredDistance(a: Float32Array, b: Float32Array): number;\n  }\n\n}\ndeclare module 'pixi3d/math/vec4' {\n  export class Vec4 {\n      static set(x: number, y: number, z: number, w: number, out?: Float32Array): Float32Array;\n      static transformMat4(a: Float32Array, m: Float32Array, out?: Float32Array): Float32Array;\n      static fromValues(x: number, y: number, z: number, w: number): Float32Array;\n  }\n\n}\ndeclare module 'pixi3d/mesh/geometry/cube-geometry' {\n  import { MeshGeometry3D } from \"pixi3d/mesh/geometry/mesh-geometry\";\n  export namespace CubeGeometry {\n      function create(): MeshGeometry3D & {\n          positions: {\n              buffer: Float32Array;\n          };\n          indices: {\n              buffer: Uint8Array;\n          };\n          normals: {\n              buffer: Float32Array;\n          };\n          uvs: {\n              buffer: Float32Array;\n          }[];\n          tangents: {\n              buffer: Float32Array;\n          };\n      };\n  }\n\n}\ndeclare module 'pixi3d/mesh/geometry/mesh-geometry-attribute' {\n  /**\n   * Represents an attribute for mesh geometry.\n   */\n  export interface MeshGeometryAttribute {\n      /**\n       * The buffer data.\n       */\n      buffer: Uint32Array | Float32Array | Int8Array | Uint8Array | Int16Array | Uint16Array;\n      /**\n       * The minimum value of each component in this attribute.\n       */\n      min?: number[];\n      /**\n       * The maximum value of each component in this attribute.\n       */\n      max?: number[];\n      /**\n       * The datatype of components in this attribute.\n       */\n      componentType?: number;\n      /**\n       * The stride, in bytes, between attributes. When this is not defined, data\n       * is tightly packed. When two or more attributes use the same buffer, this\n       * field must be defined.\n       */\n      stride?: number;\n  }\n\n}\ndeclare module 'pixi3d/mesh/geometry/mesh-geometry-target' {\n  import { MeshGeometryAttribute } from \"pixi3d/mesh/geometry/mesh-geometry-attribute\";\n  /**\n   * Represents a geometry morph target.\n   */\n  export interface MeshGeometryTarget {\n      positions?: MeshGeometryAttribute;\n      normals?: MeshGeometryAttribute;\n      tangents?: MeshGeometryAttribute;\n  }\n\n}\ndeclare module 'pixi3d/mesh/geometry/mesh-geometry' {\n  import { Geometry } from \"pixi.js\";\n  import { MeshShader } from \"pixi3d/mesh/mesh-shader\";\n  import { MeshGeometryAttribute } from \"pixi3d/mesh/geometry/mesh-geometry-attribute\";\n  import { MeshGeometryTarget } from \"pixi3d/mesh/geometry/mesh-geometry-target\";\n  /**\n   * Geometry with mesh data (i.e. positions, normals, uvs).\n   */\n  export class MeshGeometry3D {\n      private _shaderGeometry;\n      indices?: MeshGeometryAttribute;\n      positions?: MeshGeometryAttribute;\n      uvs?: MeshGeometryAttribute[];\n      normals?: MeshGeometryAttribute;\n      tangents?: MeshGeometryAttribute;\n      targets?: MeshGeometryTarget[];\n      joints?: MeshGeometryAttribute;\n      weights?: MeshGeometryAttribute;\n      /**\n       * Returns geometry with attributes required by the specified shader.\n       * @param shader The shader to use.\n       */\n      getShaderGeometry(shader: MeshShader): Geometry;\n      /**\n       * Creates geometry with attributes required by the specified shader.\n       * @param shader The shader to use.\n       * @param instanced Value indicating if the geometry will be instanced.\n       */\n      addShaderGeometry(shader: MeshShader, instanced: boolean): void;\n      /**\n       * Returns a value indicating if geometry with required attributes has been\n       * created by the specified shader.\n       * @param shader The shader to test.\n       * @param instanced Value indicating if the geometry is instanced.\n       */\n      hasShaderGeometry(shader: MeshShader, instanced: boolean): boolean;\n      /**\n       * Destroys the geometry and it's used resources.\n       */\n      destroy(): void;\n  }\n\n}\ndeclare module 'pixi3d/mesh/geometry/plane-geometry' {\n  import { MeshGeometry3D } from \"pixi3d/mesh/geometry/mesh-geometry\";\n  export namespace PlaneGeometry {\n      function create(): MeshGeometry3D & {\n          positions: {\n              buffer: Float32Array;\n          };\n          indices: {\n              buffer: Uint8Array;\n          };\n          normals: {\n              buffer: Float32Array;\n          };\n          uvs: {\n              buffer: Float32Array;\n          }[];\n      };\n  }\n\n}\ndeclare module 'pixi3d/mesh/geometry/quad-geometry' {\n  import { MeshGeometry3D } from \"pixi3d/mesh/geometry/mesh-geometry\";\n  export namespace QuadGeometry {\n      function create(): MeshGeometry3D & {\n          positions: {\n              buffer: Float32Array;\n          };\n          indices: {\n              buffer: Uint8Array;\n          };\n          normals: {\n              buffer: Float32Array;\n          };\n          uvs: {\n              buffer: Float32Array;\n          }[];\n      };\n  }\n\n}\ndeclare module 'pixi3d/mesh/instanced-mesh' {\n  import { IDestroyOptions } from \"pixi.js\";\n  import { Container3D } from \"pixi3d/container\";\n  import { Mesh3D } from \"pixi3d/mesh/mesh\";\n  export class InstancedMesh3D extends Container3D {\n      readonly mesh: Mesh3D;\n      readonly material: unknown;\n      constructor(mesh: Mesh3D, material: unknown);\n      destroy(options: boolean | IDestroyOptions | undefined): void;\n  }\n\n}\ndeclare module 'pixi3d/mesh/mesh-destroy-options' {\n  import { IDestroyOptions } from \"pixi.js\";\n  export interface MeshDestroyOptions extends IDestroyOptions {\n      geometry?: boolean;\n      material?: boolean;\n  }\n\n}\ndeclare module 'pixi3d/mesh/mesh-shader' {\n  import { Shader, State, Geometry, Renderer, DRAW_MODES } from \"pixi.js\";\n  import { Mesh3D } from \"pixi3d/mesh/mesh\";\n  import { MeshGeometry3D } from \"pixi3d/mesh/geometry/mesh-geometry\";\n  /**\n   * Shader used specifically to render a mesh.\n   */\n  export class MeshShader extends Shader {\n      private _state;\n      /** The name of the mesh shader. Used for figuring out if geometry attributes is compatible with the shader. This needs to be set to something different than default value when custom attributes is used. */\n      get name(): string;\n      /**\n       * Creates geometry with required attributes used by this shader. Override when using custom attributes.\n       * @param geometry The geometry with mesh data.\n       * @param instanced Value indicating if the geometry will be instanced.\n       */\n      createShaderGeometry(geometry: MeshGeometry3D, instanced: boolean): Geometry;\n      /**\n       * Renders the geometry of the specified mesh.\n       * @param mesh Mesh to render.\n       * @param renderer Renderer to use.\n       * @param state Rendering state to use.\n       * @param drawMode Draw mode to use.\n       */\n      render(mesh: Mesh3D, renderer: Renderer, state?: State, drawMode?: DRAW_MODES): void;\n  }\n\n}\ndeclare module 'pixi3d/mesh/mesh' {\n  import { Renderer } from \"pixi.js\";\n  import { MeshGeometry3D } from \"pixi3d/mesh/geometry/mesh-geometry\";\n  import { Container3D } from \"pixi3d/container\";\n  import { Skin } from \"pixi3d/skinning/skin\";\n  import { InstancedMesh3D } from \"pixi3d/mesh/instanced-mesh\";\n  import { Material } from \"pixi3d/material/material\";\n  import { MeshDestroyOptions } from \"pixi3d/mesh/mesh-destroy-options\";\n  import { AABB } from \"pixi3d/math/aabb\";\n  /**\n   * Represents a mesh which contains geometry and has a material.\n   */\n  export class Mesh3D extends Container3D {\n      geometry: MeshGeometry3D;\n      material?: Material | undefined;\n      /** The name of the plugin used for rendering the mesh. */\n      pluginName: string;\n      /** Array of weights used for morphing between geometry targets. */\n      targetWeights?: number[];\n      /** The skin used for vertex skinning. */\n      skin?: Skin;\n      /** The enabled render passes for this mesh. */\n      enabledRenderPasses: {\n          [name: string]: unknown;\n      };\n      /** Used for sorting the mesh before render. */\n      renderSortOrder: number;\n      /**\n       * Creates a new mesh with the specified geometry and material.\n       * @param geometry The geometry for the mesh.\n       * @param material The material for the mesh. If the material is empty the mesh won't be rendered.\n       */\n      constructor(geometry: MeshGeometry3D, material?: Material | undefined);\n      private _instances;\n      /** An array of instances created from this mesh. */\n      get instances(): InstancedMesh3D[];\n      /**\n       * Creates a new instance of this mesh.\n       */\n      createInstance(): InstancedMesh3D;\n      /**\n       * Removes an instance from this mesh.\n       * @param instance The instance to remove.\n       */\n      removeInstance(instance: InstancedMesh3D): void;\n      /**\n       * Enables the render pass with the specified name.\n       * @param name The name of the render pass to enable.\n       */\n      enableRenderPass(name: string, options?: unknown): void;\n      /**\n       * Disables the render pass with the specified name.\n       * @param name The name of the render pass to disable.\n       * @param options The options for the render pass.\n       */\n      disableRenderPass(name: string): void;\n      /**\n       * Returns a value indicating if the specified render pass is enabled.\n       * @param name The name of the render pass to check.\n       */\n      isRenderPassEnabled(name: string): boolean;\n      /**\n       * Destroys the mesh and it's used resources.\n       */\n      destroy(options?: boolean | MeshDestroyOptions): void;\n      _render(renderer: Renderer): void;\n      /**\n       * Calculates and returns a axis-aligned bounding box of the mesh in world space.\n       */\n      getBoundingBox(): AABB | undefined;\n      /**\n       * Creates a new quad (flat square) mesh with the specified material.\n       * @param material The material to use.\n       */\n      static createQuad(material?: Material): Mesh3D;\n      /**\n       * Creates a new cube (six faces) mesh with the specified material.\n       * @param material The material to use.\n       */\n      static createCube(material?: Material): Mesh3D;\n      /**\n       * Creates a new plane (flat square) mesh with the specified material.\n       * @param material The material to use.\n       */\n      static createPlane(material?: Material): Mesh3D;\n  }\n\n}\ndeclare module 'pixi3d/message' {\n  export enum Message {\n      meshVertexSkinningFloatingPointTexturesNotSupported = \"Mesh is using vertex skinning but floating point textures is not supported on this device/environment. In case of errors, try changing the environment in PixiJS settings. Set \\\"PIXI.settings.PREFER_ENV = PIXI.ENV.WEBGL2\\\" before creating a renderer/application.\",\n      meshVertexSkinningNumberOfJointsNotSupported = \"Mesh is using vertex skinning but the number of joints ({joints}) is not supported on this device/environment. Max number of supported joints is {maxJoints}, try reducing the number of joints.\",\n      imageBasedLightingShaderTextureLodNotSupported = \"Image based lighting is used but shader texture lod is not supported on this device/environment, the material may not be displayed correctly. Try changing the environment in PixiJS settings. Set \\\"PIXI.settings.PREFER_ENV = PIXI.ENV.WEBGL2\\\" before creating a renderer/application.\"\n  }\n\n}\ndeclare module 'pixi3d/model' {\n  import { glTFAsset } from \"pixi3d/gltf/gltf-asset\";\n  import { MaterialFactory } from \"pixi3d/material/material-factory\";\n  import { Mesh3D } from \"pixi3d/mesh/mesh\";\n  import { Animation } from \"pixi3d/animation\";\n  import { Container3D } from \"pixi3d/container\";\n  import { InstancedModel } from \"pixi3d/instanced-model\";\n  import { AABB } from \"pixi3d/math/aabb\";\n  /**\n   * Represents a model which has been loaded from a file. Contains a hierarchy of meshes and animations.\n   */\n  export class Model extends Container3D {\n      /** The animations included in the model. */\n      animations: Animation[];\n      /**\n       * The meshes included in the model. Note that this array and the actual\n       * childen are not automatically synchronized after the model has been loaded.\n       */\n      meshes: Mesh3D[];\n      /**\n       * Creates a new model from a source.\n       * @param source The source to create the model from.\n       * @param materialFactory The factory to use for creating materials.\n       */\n      static from(source: glTFAsset, materialFactory?: MaterialFactory): Model;\n      /**\n       * Creates a new instance of this model.\n       */\n      createInstance(): InstancedModel;\n      /**\n       * Calculates and returns a axis-aligned bounding box of the model in world\n       * space. The bounding box will encapsulate the meshes included in the model.\n       */\n      getBoundingBox(): AABB;\n  }\n\n}\ndeclare module 'pixi3d/picking/picking-hitarea' {\n  import { IHitArea, Renderer } from \"pixi.js\";\n  import { Mesh3D } from \"pixi3d/mesh/mesh\";\n  import { Model } from \"pixi3d/model\";\n  import { Camera } from \"pixi3d/camera/camera\";\n  /**\n   * Hit area which uses the shape of an object to determine interaction.\n   */\n  export class PickingHitArea implements IHitArea {\n      object: Mesh3D | Model;\n      camera?: Camera | undefined;\n      /** The id which maps to the object. */\n      id: Uint8Array;\n      /**\n       * Creates a new hitarea using the specified object.\n       * @param renderer The renderer to use.\n       * @param object The model or mesh to use as the shape for hit testing.\n       * @param camera The camera to use when rendering the object picking shape.\n       * If not set, the main camera will be used as default.\n       */\n      constructor(renderer: Renderer | undefined, object: Mesh3D | Model, camera?: Camera | undefined);\n      contains(x: number, y: number): boolean;\n      /**\n       * Creates a new hitarea using the specified object.\n       * @param object The model or mesh to use as the shape for hit testing.\n       */\n      static fromObject(object: Mesh3D | Model): PickingHitArea;\n  }\n\n}\ndeclare module 'pixi3d/picking/picking-id' {\n  export namespace PickingId {\n      function next(): Uint8Array;\n  }\n\n}\ndeclare module 'pixi3d/picking/picking-interaction' {\n  import { IRendererPlugin, Renderer } from \"pixi.js\";\n  import { PickingHitArea } from \"pixi3d/picking/picking-hitarea\";\n  /**\n   * Manages the picking hit areas by keeping track on which hit areas needs to\n   * be checked for interaction. Renders the hit area meshes to a texture which\n   * is then used to map a mesh to a x/y coordinate. The picking manager is\n   * registered as a renderer plugin.\n   */\n  export class PickingInteraction implements IRendererPlugin {\n      renderer: Renderer;\n      private _map;\n      private _hitAreas;\n      /**\n       * Creates a new picking manager using the specified renderer.\n       * @param renderer The renderer to use.\n       */\n      constructor(renderer: Renderer);\n      /** The main picking interaction which is used by default. */\n      static main: PickingInteraction;\n      private _update;\n      destroy(): void;\n      /**\n       * Hit tests a area using the specified x/y coordinates.\n       * @param x The x coordinate.\n       * @param y The y coordinate.\n       * @param hitArea The hit area to test.\n       */\n      containsHitArea(x: number, y: number, hitArea: PickingHitArea): boolean;\n  }\n\n}\ndeclare module 'pixi3d/picking/picking-map' {\n  import { PickingHitArea } from \"pixi3d/picking/picking-hitarea\";\n  import { Renderer } from \"pixi.js\";\n  export class PickingMap {\n      private _renderer;\n      private _pixels;\n      private _output;\n      private _shader;\n      private _update;\n      constructor(_renderer: Renderer, size: number);\n      destroy(): void;\n      resizeToAspect(): void;\n      containsId(x: number, y: number, id: Uint8Array): boolean;\n      update(hitAreas: PickingHitArea[]): void;\n      private _matrix;\n      renderHitArea(hitArea: PickingHitArea): void;\n  }\n\n}\ndeclare module 'pixi3d/pipeline/material-render-pass' {\n  import { Color } from \"pixi3d/color\";\n  import { RenderTexture, Renderer } from \"pixi.js\";\n  import { RenderPass } from \"pixi3d/pipeline/render-pass\";\n  import { Mesh3D } from \"pixi3d/mesh/mesh\";\n  /**\n   * Pass used for rendering materials.\n   */\n  export class MaterialRenderPass implements RenderPass {\n      renderer: Renderer;\n      name: string;\n      private _renderTexture?;\n      /** The color (r,g,b,a) used for clearing the render texture. If this value is empty, the render texture will not be cleared. */\n      clearColor?: Color | undefined;\n      /** The texture used when rendering to a texture. */\n      get renderTexture(): RenderTexture | undefined;\n      set renderTexture(value: RenderTexture | undefined);\n      /**\n       * Creates a new material render pass.\n       * @param renderer The renderer to use.\n       * @param name The name of the render pass.\n       */\n      constructor(renderer: Renderer, name: string);\n      clear(): void;\n      render(meshes: Mesh3D[]): void;\n  }\n\n}\ndeclare module 'pixi3d/pipeline/render-pass' {\n  import { Mesh3D } from \"pixi3d/mesh/mesh\";\n  /**\n   * Represents a pass used when rendering.\n   */\n  export interface RenderPass {\n      /** The name of the render pass. */\n      name: string;\n      /** Clears the render pass. Used when rendering to a texture. */\n      clear?(): void;\n      /**\n       * Renders the specified meshes.\n       * @param meshes The array of meshes to render.\n       */\n      render(meshes: Mesh3D[]): void;\n  }\n\n}\ndeclare module 'pixi3d/pipeline/standard-pipeline' {\n  import { ObjectRenderer, Renderer } from \"pixi.js\";\n  import { MaterialRenderPass } from \"pixi3d/pipeline/material-render-pass\";\n  import { Mesh3D } from \"pixi3d/mesh/mesh\";\n  import { ShadowRenderPass } from \"pixi3d/shadow/shadow-render-pass\";\n  import { PostProcessingSprite, PostProcessingSpriteOptions } from \"pixi3d/sprite/post-processing-sprite\";\n  import { Model } from \"pixi3d/model\";\n  import { ShadowCastingLight } from \"pixi3d/shadow/shadow-casting-light\";\n  import { RenderPass } from \"pixi3d/pipeline/render-pass\";\n  /**\n   * The standard pipeline renders meshes using the set render passes. It's\n   * created and used by default.\n   */\n  export class StandardPipeline extends ObjectRenderer {\n      renderer: Renderer;\n      private _meshes;\n      /** The pass used for rendering materials. */\n      materialPass: MaterialRenderPass;\n      /** The pass used for rendering shadows. */\n      shadowPass: ShadowRenderPass;\n      /** The array of render passes. Each mesh will be rendered with these passes (if it has been enabled on that mesh). */\n      renderPasses: RenderPass[];\n      /**\n       * Creates a new standard pipeline using the specified renderer.\n       * @param renderer The renderer to use.\n       */\n      constructor(renderer: Renderer);\n      /**\n       * Creates a new post processing sprite and sets the material pass to render\n       * to it's texture.\n       * @param options The options when creating the sprite.\n       */\n      createPostProcessingSprite(options?: PostProcessingSpriteOptions): PostProcessingSprite;\n      /**\n       * Adds a mesh to be rendered.\n       * @param mesh The mesh to render.\n       */\n      render(mesh: Mesh3D): void;\n      /**\n       * Renders the added meshes using the specified render passes.\n       */\n      flush(): void;\n      /**\n       * Sorts the meshes by rendering order.\n       */\n      sort(): void;\n      /**\n       * Enables shadows for the specified object. Adds the shadow render pass to\n       * the specified object and enables the standard material to use the casting\n       * light.\n       * @param object The mesh or model to enable shadows for.\n       * @param light The shadow casting light to associate with the\n       * object when using the standard material.\n       */\n      enableShadows(object: Mesh3D | Model, light?: ShadowCastingLight): void;\n      /**\n       * Disables shadows for the specified object.\n       * @param object The mesh or model to disable shadows for.\n       */\n      disableShadows(object: Mesh3D | Model): void;\n  }\n\n}\ndeclare module 'pixi3d/resource/array-resource' {\n  import * as PIXI from \"pixi.js\";\n  export const ArrayResource: typeof PIXI.ArrayResource;\n\n}\ndeclare module 'pixi3d/resource/base-image-resource' {\n  import * as PIXI from \"pixi.js\";\n  export const BaseImageResource: typeof PIXI.BaseImageResource;\n\n}\ndeclare module 'pixi3d/resource/buffer-resource' {\n  import * as PIXI from \"pixi.js\";\n  export const BufferResource: typeof PIXI.BufferResource;\n\n}\ndeclare module 'pixi3d/resource/cube-resource' {\n  import * as PIXI from \"pixi.js\";\n  export const CubeResource: typeof PIXI.CubeResource;\n\n}\ndeclare module 'pixi3d/shadow/shadow-casting-light' {\n  import { RenderTexture, Renderer } from \"pixi.js\";\n  import { Light } from \"pixi3d/lighting/light\";\n  import { Camera } from \"pixi3d/camera/camera\";\n  import { ShadowQuality } from \"pixi3d/shadow/shadow-quality\";\n  export interface ShadowCastingLightOptions {\n      /**\n       * The quality (precision) of the shadow. If the quality is not supported by\n       * current platform, a lower quality will be selected instead.\n       */\n      quality?: ShadowQuality;\n      /**\n       * The size (both width and height) in pixels for the shadow texture.\n       * Increasing the size will improve the quality of the shadow.\n       */\n      shadowTextureSize?: number;\n  }\n  /**\n   * Contains the required components used for rendering a shadow casted by a light.\n   */\n  export class ShadowCastingLight {\n      renderer: Renderer;\n      light: Light;\n      private _shadowTexture;\n      private _filterTexture;\n      private _lightViewProjection;\n      /** The softness of the edges for the shadow. */\n      softness: number;\n      /**\n       * The area in units of the shadow when using directional lights. Reducing\n       * the area will improve the quality of the shadow.\n       */\n      shadowArea: number;\n      /** The light view projection matrix. */\n      get lightViewProjection(): Float32Array;\n      /** The camera to follow when using directional lights. */\n      camera?: Camera;\n      /**\n       * Value indicating if the shadow should follow the specified camera. If the\n       * camera is not set, the main camera will be used as default. Only available\n       * when using directional lights.\n       */\n      followCamera: boolean;\n      /**\n       * The rendered shadow texture.\n       */\n      get shadowTexture(): RenderTexture;\n      /**\n       * The rendered filter texture.\n       */\n      get filterTexture(): RenderTexture;\n      /**\n       * Creates a new shadow casting light used for rendering a shadow texture.\n       * @param renderer The renderer to use.\n       * @param light The light which is casting the shadow.\n       * @param options The options to use when creating the shadow texture.\n       */\n      constructor(renderer: Renderer, light: Light, options?: ShadowCastingLightOptions);\n      /**\n       * Destroys the shadow casting light and it's used resources.\n       */\n      destroy(): void;\n      /**\n       * Clears the rendered shadow texture.\n       */\n      clear(): void;\n      /**\n       * Updates the light view projection matrix.\n       */\n      updateLightViewProjection(): void;\n      /**\n       * Returns a value indicating if medium quality (16-bit precision) shadows is\n       * supported by current platform.\n       * @param renderer The renderer to use.\n       */\n      static isMediumQualitySupported(renderer: Renderer): boolean;\n      /**\n       * Returns a value indicating if high quality (32-bit precision) shadows is\n       * supported by current platform.\n       * @param renderer The renderer to use.\n       */\n      static isHighQualitySupported(renderer: Renderer): boolean;\n  }\n\n}\ndeclare module 'pixi3d/shadow/shadow-filter' {\n  import { Renderer, RenderTexture } from \"pixi.js\";\n  import { ShadowCastingLight } from \"pixi3d/shadow/shadow-casting-light\";\n  export class ShadowFilter {\n      renderer: Renderer;\n      private _gaussianBlurShader;\n      private _mesh;\n      constructor(renderer: Renderer);\n      applyGaussianBlur(light: ShadowCastingLight): void;\n      applyBlurScale(input: RenderTexture, output: RenderTexture, scale: Float32Array): void;\n  }\n\n}\ndeclare module 'pixi3d/shadow/shadow-math' {\n  import { ShadowCastingLight } from \"pixi3d/shadow/shadow-casting-light\";\n  export namespace ShadowMath {\n      function calculateDirectionalLightViewProjection(shadowCastingLight: ShadowCastingLight): void;\n      function calculateSpotLightViewProjection(shadowCastingLight: ShadowCastingLight): void;\n  }\n\n}\ndeclare module 'pixi3d/shadow/shadow-quality' {\n  export enum ShadowQuality {\n      /**\n       * Low quality (8-bit) shadows.\n       */\n      low = \"low\",\n      /**\n       * Medium quality (16-bit) shadows.\n       */\n      medium = \"medium\",\n      /**\n       * High quality (32-bit) shadows.\n       */\n      high = \"high\"\n  }\n\n}\ndeclare module 'pixi3d/shadow/shadow-render-pass' {\n  import { Renderer } from \"pixi.js\";\n  import { RenderPass } from \"pixi3d/pipeline/render-pass\";\n  import { Mesh3D } from \"pixi3d/mesh/mesh\";\n  import { ShadowCastingLight } from \"pixi3d/shadow/shadow-casting-light\";\n  /**\n   * Pass used for rendering shadows.\n   */\n  export class ShadowRenderPass implements RenderPass {\n      renderer: Renderer;\n      name: string;\n      private _lights;\n      private _filter;\n      private _shadow;\n      /**\n       * Creates a new shadow render pass using the specified renderer.\n       * @param renderer The renderer to use.\n       * @param name The name for the render pass.\n       */\n      constructor(renderer: Renderer, name?: string);\n      /**\n       * Adds a shadow casting light.\n       * @param shadowCastingLight The light to add.\n       */\n      addShadowCastingLight(shadowCastingLight: ShadowCastingLight): void;\n      /**\n       * Removes a shadow casting light.\n       * @param shadowCastingLight The light to remove.\n       */\n      removeShadowCastingLight(shadowCastingLight: ShadowCastingLight): void;\n      clear(): void;\n      render(meshes: Mesh3D[]): void;\n  }\n\n}\ndeclare module 'pixi3d/shadow/shadow-renderer' {\n  import { Renderer } from \"pixi.js\";\n  import { Mesh3D } from \"pixi3d/mesh/mesh\";\n  import { ShadowCastingLight } from \"pixi3d/shadow/shadow-casting-light\";\n  import { SkinningShader } from \"pixi3d/shadow/skinning-shader\";\n  import { TextureShader } from \"pixi3d/shadow/texture-shader\";\n  export class ShadowRenderer {\n      renderer: Renderer;\n      private _state;\n      private _shadowShader;\n      private _skinningShader?;\n      private _textureShader?;\n      constructor(renderer: Renderer);\n      getSkinningShader(): SkinningShader | TextureShader | undefined;\n      render(mesh: Mesh3D, shadowCastingLight: ShadowCastingLight): void;\n  }\n\n}\ndeclare module 'pixi3d/shadow/shadow-shader' {\n  import { Renderer, Geometry } from \"pixi.js\";\n  import { MeshGeometry3D } from \"pixi3d/mesh/geometry/mesh-geometry\";\n  import { MeshShader } from \"pixi3d/mesh/mesh-shader\";\n  import { Mesh3D } from \"pixi3d/mesh/mesh\";\n  import { ShadowCastingLight } from \"pixi3d/shadow/shadow-casting-light\";\n  export class ShadowShader extends MeshShader {\n      constructor(renderer: Renderer, features?: string[]);\n      get maxSupportedJoints(): number;\n      createShaderGeometry(geometry: MeshGeometry3D): Geometry;\n      get name(): string;\n      updateUniforms(mesh: Mesh3D, shadowCastingLight: ShadowCastingLight): void;\n  }\n\n}\ndeclare module 'pixi3d/shadow/shadow-texture' {\n  import { Renderer, RenderTexture } from \"pixi.js\";\n  import { ShadowQuality } from \"pixi3d/shadow/shadow-quality\";\n  export namespace ShadowTexture {\n      function create(renderer: Renderer, size: number, quality: ShadowQuality): RenderTexture;\n  }\n\n}\ndeclare module 'pixi3d/shadow/skinning-shader' {\n  import { Renderer } from \"pixi.js\";\n  import { MeshGeometry3D } from \"pixi3d/mesh/geometry/mesh-geometry\";\n  import { Mesh3D } from \"pixi3d/mesh/mesh\";\n  import { ShadowCastingLight } from \"pixi3d/shadow/shadow-casting-light\";\n  import { ShadowShader } from \"pixi3d/shadow/shadow-shader\";\n  export class SkinningShader extends ShadowShader {\n      private _maxSupportedJoints;\n      get maxSupportedJoints(): number;\n      static getMaxJointCount(renderer: Renderer): number;\n      constructor(renderer: Renderer);\n      createShaderGeometry(geometry: MeshGeometry3D): import(\"pixi.js\").Geometry;\n      get name(): string;\n      updateUniforms(mesh: Mesh3D, shadowCastingLight: ShadowCastingLight): void;\n  }\n\n}\ndeclare module 'pixi3d/shadow/texture-shader' {\n  import { Renderer } from \"pixi.js\";\n  import { MeshGeometry3D } from \"pixi3d/mesh/geometry/mesh-geometry\";\n  import { Mesh3D } from \"pixi3d/mesh/mesh\";\n  import { ShadowCastingLight } from \"pixi3d/shadow/shadow-casting-light\";\n  import { ShadowShader } from \"pixi3d/shadow/shadow-shader\";\n  export class TextureShader extends ShadowShader {\n      private _jointMatrixTexture;\n      static isSupported(renderer: Renderer): boolean;\n      get maxSupportedJoints(): number;\n      constructor(renderer: Renderer);\n      createShaderGeometry(geometry: MeshGeometry3D): import(\"pixi.js\").Geometry;\n      get name(): string;\n      updateUniforms(mesh: Mesh3D, shadowCastingLight: ShadowCastingLight): void;\n  }\n\n}\ndeclare module 'pixi3d/skinning/joint' {\n  import { Container3D } from \"pixi3d/container\";\n  /**\n   * Represents a joint used for vertex skinning.\n   */\n  export class Joint extends Container3D {\n      readonly inverseBindMatrix: Float32Array;\n      /**\n       * Creates a new joint.\n       * @param inverseBindMatrix The inverse of the global transform matrix.\n       */\n      constructor(inverseBindMatrix: Float32Array);\n  }\n\n}\ndeclare module 'pixi3d/skinning/skin' {\n  import { Joint } from \"pixi3d/skinning/joint\";\n  import { Container3D } from \"pixi3d/container\";\n  /**\n   * Represents a skin used for vertex skinning.\n   */\n  export class Skin {\n      readonly parent: Container3D;\n      readonly joints: Joint[];\n      private _jointMatrices;\n      private _jointNormalMatrices;\n      private _transformIds;\n      /** The joint normal matrices which has been calculated. */\n      jointNormalMatrices: Float32Array;\n      /** The joint matrices which has been calculated. */\n      jointMatrices: Float32Array;\n      /**\n       * Creates a new skin.\n       * @param parent The parent container node for the skin.\n       * @param joints The array of joints included in the skin.\n       */\n      constructor(parent: Container3D, joints: Joint[]);\n      /**\n       * Calculates the joint matrices.\n       */\n      calculateJointMatrices(): void;\n  }\n\n}\ndeclare module 'pixi3d/skybox/skybox-material' {\n  import { Renderer } from \"pixi.js\";\n  import { Cubemap } from \"pixi3d/cubemap/cubemap\";\n  import { MeshShader } from \"pixi3d/mesh/mesh-shader\";\n  import { Camera } from \"pixi3d/camera/camera\";\n  import { Mesh3D } from \"pixi3d/mesh/mesh\";\n  import { Material } from \"pixi3d/material/material\";\n  export class SkyboxMaterial extends Material {\n      private _cubemap;\n      get cubemap(): Cubemap;\n      set cubemap(value: Cubemap);\n      camera?: Camera;\n      constructor(cubemap: Cubemap);\n      updateUniforms(mesh: Mesh3D, shader: MeshShader): void;\n      render(mesh: Mesh3D, renderer: Renderer): void;\n      createShader(): MeshShader | undefined;\n  }\n\n}\ndeclare module 'pixi3d/skybox/skybox' {\n  import { Container3D } from \"pixi3d/container\";\n  import { Cubemap } from \"pixi3d/cubemap/cubemap\";\n  import { Camera } from \"pixi3d/camera/camera\";\n  import { CubemapFaces } from \"pixi3d/cubemap/cubemap-faces\";\n  /**\n   * A skybox is a method of creating backgrounds in a 3D scene. It consists of\n   * a cubemap texture which has six sides. Note that the skybox should be rendered\n   * before all other objects in the scene.\n   */\n  export class Skybox extends Container3D {\n      private _mesh;\n      /**\n       * Creates a new skybox using the specified cubemap.\n       * @param cubemap Cubemap to use for rendering.\n       */\n      constructor(cubemap: Cubemap);\n      /**\n       * Camera used when rendering. If this value is not set, the main camera will\n       * be used by default.\n       */\n      get camera(): Camera | undefined;\n      set camera(value: Camera | undefined);\n      /**\n       * The cubemap texture used when rendering.\n       */\n      get cubemap(): Cubemap;\n      set cubemap(value: Cubemap);\n      /**\n       * Creates a new skybox from the specified source.\n       * @param source The source to create the skybox from.\n       */\n      static from(source: CubemapFaces): Skybox;\n  }\n\n}\ndeclare module 'pixi3d/sprite/post-processing-sprite' {\n  import { DisplayObject, Sprite, RenderTexture, Renderer, IDestroyOptions } from \"pixi.js\";\n  export interface PostProcessingSpriteOptions {\n      /**\n       * The width of the texture for the sprite.\n       */\n      width?: number;\n      /**\n       * The height of the texture for the sprite.\n       */\n      height?: number;\n      /**\n       * The object to render. When set, it will automatically be rendered to the\n       * sprite's texture each frame.\n       */\n      objectToRender?: DisplayObject;\n      /**\n       * The resolution of the texture for the sprite.\n       */\n      resolution?: number;\n  }\n  /**\n   * Represents a sprite which can have post processing effects. Can be used for\n   * rendering 3D objects as 2D sprites.\n   */\n  export class PostProcessingSprite extends Sprite {\n      renderer: Renderer;\n      private _tickerRender;\n      private _renderTexture;\n      /** The render texture. */\n      get renderTexture(): RenderTexture;\n      /** The depth texture. */\n      get depthTexture(): import(\"pixi.js\").BaseTexture<import(\"pixi.js\").Resource, import(\"pixi.js\").IAutoDetectOptions> | undefined;\n      /**\n       * Creates a new post processing sprite using the specified options.\n       * @param renderer The renderer to use.\n       * @param options The options for the render texture. If both width and height\n       * has not been set, it will automatically be resized to the renderer size.\n       */\n      constructor(renderer: Renderer, options?: PostProcessingSpriteOptions);\n      /**\n       * Sets the resolution of the render texture.\n       * @param resolution The resolution to set.\n       */\n      setResolution(resolution: number): void;\n      destroy(options?: boolean | IDestroyOptions): void;\n      /**\n       * Updates the sprite's texture by rendering the specified object to it.\n       * @param object The object to render.\n       */\n      renderObject(object: DisplayObject): void;\n  }\n\n}\ndeclare module 'pixi3d/sprite/projection-sprite' {\n  import * as PIXI from \"pixi.js\";\n  export class ProjectionSprite extends PIXI.Sprite {\n      private _pixelsPerUnit;\n      modelViewProjection: Float32Array;\n      constructor(texture?: PIXI.Texture<PIXI.Resource>);\n      get pixelsPerUnit(): number;\n      set pixelsPerUnit(value: number);\n      calculateVertices(): void;\n  }\n\n}\ndeclare module 'pixi3d/sprite/sprite-batch-geometry' {\n  import * as PIXI from \"pixi.js\";\n  export class SpriteBatchGeometry extends PIXI.BatchGeometry {\n      constructor();\n  }\n\n}\ndeclare module 'pixi3d/sprite/sprite-batch-renderer' {\n  import * as PIXI from \"pixi.js\";\n  export class SpriteBatchRenderer extends PIXI.AbstractBatchRenderer {\n      constructor(renderer: PIXI.Renderer);\n      packInterleavedGeometry(element: PIXI.IBatchableElement, attributeBuffer: PIXI.ViewableBuffer, indexBuffer: Uint16Array, aIndex: number, iIndex: number): void;\n  }\n\n}\ndeclare module 'pixi3d/sprite/sprite-billboard-type' {\n  /**\n   * Represents different billboard types.\n   */\n  export enum SpriteBillboardType {\n      /**\n       * Sprite will be rotated towards the viewer on both the x-plane and y-plane.\n       */\n      spherical = \"spherical\",\n      /**\n       * Sprite will be rotated towards the viewer on the y-plane.\n       */\n      cylindrical = \"cylindrical\"\n  }\n\n}\ndeclare module 'pixi3d/sprite/sprite' {\n  import * as PIXI from \"pixi.js\";\n  import { Camera } from \"pixi3d/camera/camera\";\n  import { SpriteBillboardType } from \"pixi3d/sprite/sprite-billboard-type\";\n  import { Container3D } from \"pixi3d/container\";\n  /**\n   * Represents a sprite in 3D space.\n   */\n  export class Sprite3D extends Container3D {\n      private _sprite;\n      private _modelView;\n      private _cameraTransformId?;\n      private _billboardType?;\n      private _parentID?;\n      /**\n       * The camera used when rendering the sprite. Uses main camera by default.\n       */\n      camera?: Camera;\n      /**\n       * Creates a new sprite using the specified texture.\n       * @param texture The texture to use.\n       */\n      constructor(texture: PIXI.Texture<PIXI.Resource>);\n      /**\n       * The billboard type to use when rendering the sprite. Used for making the\n       * sprite always face the viewer.\n       */\n      get billboardType(): SpriteBillboardType | undefined;\n      set billboardType(value: SpriteBillboardType | undefined);\n      /** Defines the size of the sprite relative to a unit in world space. */\n      get pixelsPerUnit(): number;\n      set pixelsPerUnit(value: number);\n      /**\n       * The tint applied to the sprite. This is a hex value. A value of 0xFFFFFF\n       * will remove any tint effect.\n       */\n      get tint(): number;\n      set tint(value: number);\n      /**\n       * Destroys this sprite and optionally its texture and children.\n       */\n      destroy(options?: boolean | PIXI.IDestroyOptions): void;\n      /**\n       * Renders the sprite.\n       * @param renderer The renderer to use.\n       */\n      _render(renderer: PIXI.Renderer): void;\n      /**\n       * The anchor sets the origin point of the sprite.\n       */\n      get anchor(): PIXI.ObservablePoint;\n      set anchor(value: PIXI.ObservablePoint);\n      /** The texture used when rendering the sprite. */\n      get texture(): PIXI.Texture<PIXI.Resource>;\n      set texture(value: PIXI.Texture<PIXI.Resource>);\n      /** The blend used when rendering the sprite. */\n      get blendMode(): PIXI.BLEND_MODES;\n      set blendMode(value: PIXI.BLEND_MODES);\n  }\n\n}\ndeclare module 'pixi3d/texture/texture-transform' {\n  import { ObservablePoint, Texture } from \"pixi.js\";\n  /**\n   * Transform used to offset, rotate and scale texture coordinates.\n   */\n  export class TextureTransform {\n      private _rotation;\n      private _array;\n      private _dirty;\n      private _translation;\n      private _scaling;\n      private _rotate;\n      /** The rotation for the texture coordinates. */\n      get rotation(): number;\n      set rotation(value: number);\n      /** The offset for the texture coordinates. */\n      offset: ObservablePoint<undefined>;\n      /** The scale of the texture coordinates. */\n      scale: ObservablePoint<undefined>;\n      /** The matrix array. */\n      get array(): Float32Array;\n      /**\n       * Creates a transform from the specified texture frame. Can be used when\n       * texture is in a spritesheet.\n       * @param texture The texture to use.\n       */\n      static fromTexture(texture: Texture): TextureTransform;\n  }\n\n}\ndeclare module 'pixi3d/transform/matrix-component' {\n  import { TransformId } from \"pixi3d/transform/transform-id\";\n  export class MatrixComponent {\n      private _parent;\n      private _update;\n      private _id?;\n      private _array;\n      constructor(_parent: TransformId, size: number, _update: (array: Float32Array) => void);\n      get array(): Float32Array;\n  }\n\n}\ndeclare module 'pixi3d/transform/matrix4' {\n  import { Matrix } from \"pixi.js\";\n  import { ObservablePoint3D } from \"pixi3d/transform/observable-point\";\n  import { ObservableQuaternion } from \"pixi3d/transform/observable-quaternion\";\n  import { TransformId } from \"pixi3d/transform/transform-id\";\n  /**\n   * Represents a 4x4 matrix.\n   */\n  export class Matrix4 extends Matrix implements TransformId {\n      private _transformId;\n      private _position?;\n      private _scaling?;\n      private _rotation?;\n      private _up?;\n      private _down?;\n      private _forward?;\n      private _left?;\n      private _right?;\n      private _backward?;\n      get transformId(): number;\n      /** The array containing the matrix data. */\n      array: Float32Array;\n      /**\n       * Creates a new transform matrix using the specified matrix array.\n       * @param array The matrix array, expected length is 16. If empty, an identity\n       * matrix is used by default.\n       */\n      constructor(array?: ArrayLike<number>);\n      toArray(transpose: boolean, out?: Float32Array): Float32Array;\n      /** Returns the position component of the matrix. */\n      get position(): Float32Array;\n      /** Returns the scaling component of the matrix. */\n      get scaling(): Float32Array;\n      /** Returns the rotation quaternion of the matrix. */\n      get rotation(): Float32Array;\n      /** Returns the up vector of the matrix. */\n      get up(): Float32Array;\n      /** Returns the down vector of the matrix. */\n      get down(): Float32Array;\n      /** Returns the left vector of the matrix. */\n      get right(): Float32Array;\n      /** Returns the right vector of the matrix. */\n      get left(): Float32Array;\n      /** Returns the forward vector of the matrix. */\n      get forward(): Float32Array;\n      /** Returns the backward vector of the matrix. */\n      get backward(): Float32Array;\n      copyFrom(matrix: Matrix4): this;\n      /**\n       * Sets the rotation, position and scale components.\n       * @param rotation The rotation to set.\n       * @param position The position to set.\n       * @param scaling The scale to set.\n       */\n      setFromRotationPositionScale(rotation: ObservableQuaternion, position: ObservablePoint3D, scaling: ObservablePoint3D): void;\n      /**\n       * Multiplies this matrix with another matrix.\n       * @param matrix The matrix to multiply with.\n       */\n      multiply(matrix: Matrix4): void;\n  }\n\n}\ndeclare module 'pixi3d/transform/observable-point' {\n  import * as PIXI from \"pixi.js\";\n  /**\n   * Represents a point in 3D space.\n   */\n  export class ObservablePoint3D extends PIXI.ObservablePoint {\n      private _array;\n      /** Array containing the x, y, z values. */\n      get array(): Float32Array;\n      set array(value: Float32Array);\n      /**\n       * Creates a new observable point.\n       * @param cb The callback when changed.\n       * @param scope The owner of callback.\n       * @param x The position on the x axis.\n       * @param y The position on the y axis.\n       * @param z The position on the z axis.\n       */\n      constructor(cb: () => void, scope: any, x?: number, y?: number, z?: number);\n      /**\n       * Position on the x axis relative to the local coordinates of the parent.\n       */\n      get x(): number;\n      set x(value: number);\n      /**\n       * Position on the y axis relative to the local coordinates of the parent.\n       */\n      get y(): number;\n      set y(value: number);\n      /**\n       * Position on the z axis relative to the local coordinates of the parent.\n       */\n      get z(): number;\n      set z(value: number);\n      clone(cb?: (this: any) => any, scope?: any): ObservablePoint3D;\n      copyFrom(p: ObservablePoint3D): this;\n      copyTo<T extends PIXI.IPoint>(p: T): T;\n      equals(p: ObservablePoint3D): boolean;\n      /**\n       * Sets the point to a new x, y and z position.\n       * @param x The position on the x axis.\n       * @param y The position on the y axis.\n       * @param z The position on the z axis.\n       */\n      set(x: number, y?: number, z?: number): this;\n      /**\n       * Sets the point to a new x, y and z position.\n       * @param array The array containing x, y and z, expected length is 3.\n       */\n      setFrom(array: ArrayLike<number>): this;\n  }\n\n}\ndeclare module 'pixi3d/transform/observable-quaternion' {\n  import { ObservablePoint, IPoint } from \"pixi.js\";\n  /**\n   * Represents a rotation quaternion in 3D space.\n   */\n  export class ObservableQuaternion extends ObservablePoint {\n      private _array;\n      /** Array containing the x, y, z, w values. */\n      get array(): Float32Array;\n      set array(value: Float32Array);\n      /**\n       * Creates a new observable quaternion.\n       * @param cb The callback when changed.\n       * @param scope The owner of callback.\n       * @param x The x component.\n       * @param y The y component.\n       * @param z The z component.\n       * @param w The w component.\n       */\n      constructor(cb: () => void, scope: any, x?: number, y?: number, z?: number, w?: number);\n      /** The x component of the quaternion. */\n      get x(): number;\n      set x(value: number);\n      /** The y component of the quaternion. */\n      get y(): number;\n      set y(value: number);\n      /** The z component of the quaternion. */\n      get z(): number;\n      set z(value: number);\n      /** The w component of the quaternion. */\n      get w(): number;\n      set w(value: number);\n      /**\n       * Sets the euler angles in degrees.\n       * @param x The x angle.\n       * @param y The y angle.\n       * @param z The z angle.\n       */\n      setEulerAngles(x: number, y: number, z: number): void;\n      /**\n       * Creates a clone of this quaternion.\n       * @param cb Callback when changed.\n       * @param scope Owner of callback.\n       */\n      clone(cb?: (this: any) => any, scope?: any): ObservableQuaternion;\n      /**\n       * Copies x, y, z, and w from the given quaternion.\n       * @param p The quaternion to copy from.\n       */\n      copyFrom(p: ObservableQuaternion): this;\n      /**\n       * Copies x, y, z and w into the given quaternion.\n       * @param p The quaternion to copy to.\n       */\n      copyTo<T extends IPoint>(p: T): T;\n      /**\n       * Returns true if the given quaternion is equal to this quaternion.\n       * @param p The quaternion to check.\n       */\n      equals(p: ObservableQuaternion): boolean;\n      /**\n       * Sets the quaternion to new x, y, z and w components.\n       * @param x X component to set.\n       * @param y Y component to set.\n       * @param z Z component to set.\n       * @param w W component to set.\n       */\n      set(x: number, y?: number, z?: number, w?: number): this;\n      /**\n       * Sets the quaternion to a new x, y, z and w components.\n       * @param array The array containing x, y, z and w, expected length is 4.\n       */\n      setFrom(array: ArrayLike<number>): this;\n  }\n\n}\ndeclare module 'pixi3d/transform/transform-id' {\n  export interface TransformId {\n      readonly transformId: number;\n  }\n\n}\ndeclare module 'pixi3d/transform/transform' {\n  import { Transform } from \"pixi.js\";\n  import { Matrix4 } from \"pixi3d/transform/matrix4\";\n  import { ObservablePoint3D } from \"pixi3d/transform/observable-point\";\n  import { ObservableQuaternion } from \"pixi3d/transform/observable-quaternion\";\n  /**\n   * Handles position, scaling and rotation in 3D.\n   */\n  export class Transform3D extends Transform {\n      /** The position in local space. */\n      position: ObservablePoint3D;\n      /** The scale in local space. */\n      scale: ObservablePoint3D;\n      /** The rotation in local space. */\n      rotationQuaternion: ObservableQuaternion;\n      /** The transformation matrix in world space. */\n      worldTransform: Matrix4;\n      /** The transformation matrix in local space. */\n      localTransform: Matrix4;\n      /** The inverse transformation matrix in world space. */\n      inverseWorldTransform: Matrix4;\n      /** The normal transformation matrix. */\n      normalTransform: Matrix4;\n      /**\n       * Updates the local transformation matrix.\n       */\n      updateLocalTransform(): void;\n      /**\n       * Sets position, rotation and scale from a matrix array.\n       * @param matrix The matrix to set.\n       */\n      setFromMatrix(matrix: Matrix4): void;\n      /**\n       * Updates the world transformation matrix.\n       * @param parentTransform The parent transform.\n       */\n      updateTransform(parentTransform?: Transform): void;\n      /**\n       * Rotates the transform so the forward vector points at specified point.\n       * @param point The point to look at.\n       * @param up The upward direction.\n       */\n      lookAt(point: ObservablePoint3D, up?: Float32Array): void;\n  }\n\n}\n\ndeclare module 'pixi3d' {\n  import main = require('pixi3d/index');\n  export = main;\n}"]}