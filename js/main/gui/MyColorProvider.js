export class MyColorProvider {
    constructor(main) {
        this.main = main;
    }
    provideDocumentColors(model, token) {
        var _a, _b, _c, _d, _e, _f;
        let consoleModel = (_c = (_b = (_a = this.main.getBottomDiv()) === null || _a === void 0 ? void 0 : _a.console) === null || _b === void 0 ? void 0 : _b.editor) === null || _c === void 0 ? void 0 : _c.getModel();
        let isConsole = model == consoleModel;
        let isMainWindow = model == this.main.getMonacoEditor().getModel();
        if (!(isConsole || isMainWindow))
            return;
        let module = isConsole ? (_e = (_d = this.main.getBottomDiv()) === null || _d === void 0 ? void 0 : _d.console) === null || _e === void 0 ? void 0 : _e.compiler.module : (_f = this.main.getCurrentWorkspace()) === null || _f === void 0 ? void 0 : _f.getModuleByMonacoModel(model);
        if (module == null) {
            return null;
        }
        if (this.main.getCompiler() == null) {
            let that = this;
            let i = 3;
            return new Promise(function (resolve, reject) {
                let f = () => {
                    if (that.main.getCompiler() != null) {
                        that.main.compileIfDirty();
                        resolve(module.colorInformation);
                    }
                    else {
                        i--;
                        if (i == 0) {
                            resolve([]);
                        }
                        else {
                            setTimeout(f, 500);
                        }
                    }
                };
                setTimeout(f, 500);
            });
        }
        this.main.compileIfDirty();
        return module.colorInformation;
    }
    provideColorPresentations(model, colorInfo, token) {
        var color = colorInfo.color;
        var oldColor = model.getValueInRange(colorInfo.range);
        var red256 = Math.round(color.red * 255);
        var green256 = Math.round(color.green * 255);
        var blue256 = Math.round(color.blue * 255);
        var label;
        let hex6Digits = this.toHex2Digits(red256) + this.toHex2Digits(green256) + this.toHex2Digits(blue256);
        let rgbCommaSeparated = red256 + ', ' + green256 + ', ' + blue256;
        if (oldColor.startsWith('#')) {
            label = '#' + hex6Digits;
        }
        else if (oldColor.startsWith('0x')) {
            label = '0x' + hex6Digits;
        }
        else if (oldColor.startsWith('rgb')) {
            if (color.alpha < 0.999) {
                label = 'rgba(' + rgbCommaSeparated + ', ' + color.alpha + ')';
            }
            else {
                label = 'rgb(' + rgbCommaSeparated + ')';
            }
        }
        else if (oldColor.startsWith("new") || oldColor.startsWith('Color')) {
            label = 'new Color(' + rgbCommaSeparated + ')';
        }
        return [
            {
                label: label
            }
        ];
    }
    toHex2Digits(n) {
        let hex = n.toString(16);
        while (hex.length < 2) {
            hex = '0' + hex;
        }
        return hex;
    }
}
//# sourceMappingURL=data:application/json;base64,