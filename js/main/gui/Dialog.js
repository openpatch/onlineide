export class Dialog {
    init() {
        this.$dialog = jQuery('#dialog');
        jQuery('#main').css('visibility', 'hidden');
        this.$dialog.append(jQuery('<div style="flex: 1"></div>' +
            '<div class="dialog-main"></div>' +
            '<div style="flex: 4"></div>'));
        this.$dialogMain = this.$dialog.find('.dialog-main');
        this.$dialog.css('visibility', 'visible');
    }
    heading(text) {
        let $div = jQuery('<div class="dialog-heading">' + text + "</div>");
        this.$dialogMain.append($div);
        return $div;
    }
    addDiv($div) {
        this.$dialogMain.append($div);
    }
    subHeading(text) {
        let $div = jQuery('<div class="dialog-subheading">' + text + "</div>");
        this.$dialogMain.append($div);
        return $div;
    }
    description(text, color) {
        let colorStyle = color == null ? "" : `style="color: ${color}"`;
        let $div = jQuery(`<div class="dialog-description" ${colorStyle}>${text}</div>`);
        this.$dialogMain.append($div);
        return $div;
    }
    input(type, placeholder) {
        let $div = jQuery(`<input class="dialog-input" type="${type}" placeholder="${placeholder}"></input>`);
        this.$dialogMain.append($div);
        return $div;
    }
    buttons(buttons) {
        let $buttonRow = jQuery('<div class="dialog-buttonRow"></div>');
        this.$dialogMain.append($buttonRow);
        for (let button of buttons) {
            let $button = jQuery(`<button style="background-color: ${button.color};margin-left: 20px">${button.caption}</button>`);
            $button.on("click", () => { button.callback(); });
            $buttonRow.append($button);
        }
    }
    waitMessage(text) {
        let $message = jQuery(`<div class="dialog-wait">${text}<img src="assets/projectexplorer/svg-loaders/ball-triangle.svg"></div>`);
        this.$dialogMain.append($message);
        return (visible) => {
            let visibility = visible ? "visible" : "hidden";
            $message.css("visibility", visibility);
        };
    }
    close() {
        this.$dialog.css('visibility', 'hidden');
        this.$dialog.empty();
        jQuery('#main').css('visibility', 'visible');
    }
    addCheckbox(description, ischecked, name) {
        let cb = '<input type="checkbox" name="' + name + '"' + (ischecked ? ' checked' : '') + '>';
        let $checkbox = jQuery(cb);
        let $description = jQuery('<label for="' + name + '">' + description + "</label>");
        let $div = jQuery('<div class="jo_checkbox_div"></div>');
        $div.append($checkbox, $description);
        $description.on('click', () => { $checkbox.prop("checked", !$checkbox.prop("checked")); });
        this.$dialogMain.append($div);
        return () => {
            return $checkbox.is(':checked');
        };
    }
}
//# sourceMappingURL=data:application/json;base64,