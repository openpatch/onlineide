import { convertPxToNumber } from "../../../tools/HtmlTools.js";
export class ZoomControl {
    constructor($parentElement, callback) {
        this.callback = callback;
        this.position = 0;
        this.gripHeight = 10;
        this.overallHeight = 150;
        this.zoomMin = 0.2;
        this.zoomMax = 2;
        let $zoomcontrolOuter = jQuery('<div class="jo_zoomcontrol-outer" title="Zoom" draggable="false"></div>');
        $parentElement.append($zoomcontrolOuter);
        let $zoomcontrolBar = jQuery('<div class="jo_zoomcontrol-bar" draggable="false"></div>');
        $zoomcontrolOuter.append($zoomcontrolBar);
        this.$grip = jQuery('<div class="jo_zoomcontrol-grip" draggable="false"></div>');
        $zoomcontrolOuter.append(this.$grip);
        this.$zoomcontrolDisplay = jQuery('<div class="jo_zoomcontrol-display"></div>');
        this.$grip.append(this.$zoomcontrolDisplay);
        let mousedownY;
        let oldPosition;
        let that = this;
        that.overallHeight = convertPxToNumber($zoomcontrolOuter.css('height'));
        that.gripHeight = convertPxToNumber(that.$grip.css('height'));
        that.yMax = that.overallHeight - that.gripHeight;
        let mousePointer = window.PointerEvent ? "pointer" : "mouse";
        $zoomcontrolBar.on(mousePointer + 'down', (e) => {
            let y = e.pageY - $zoomcontrolOuter.offset().top - 4;
            that.setZoom(y);
            that.$grip.css('top', y + 'px');
            //@ts-ignore
            that.$grip.trigger(mousePointer + 'down', [e.clientY]);
        });
        this.$grip.on(mousePointer + 'down', (e, y) => {
            if (y == null)
                y = e.clientY;
            mousedownY = y;
            oldPosition = that.position;
            this.$zoomcontrolDisplay.show();
            jQuery(document).on(mousePointer + 'move.zoomcontrol', (e) => {
                let deltaY = e.clientY - mousedownY;
                that.setZoom(oldPosition + deltaY);
            });
            jQuery(document).on(mousePointer + 'up.zoomcontrol', () => {
                jQuery(document).off(mousePointer + 'up.zoomcontrol');
                jQuery(document).off(mousePointer + 'move.zoomcontrol');
                this.$zoomcontrolDisplay.hide();
            });
            e.stopPropagation();
        });
        $parentElement.on(mousePointer + "enter", (e) => {
            if (!ZoomControl.preventFading)
                $zoomcontrolOuter.fadeIn();
        });
        $parentElement.on(mousePointer + "leave", (e) => {
            if (!ZoomControl.preventFading)
                $zoomcontrolOuter.fadeOut();
        });
        let factor = (1.0 - this.zoomMin) / (this.zoomMax - this.zoomMin);
        this.position = factor * (this.overallHeight - this.gripHeight);
        this.$grip.css('top', this.position + "px");
    }
    setZoom(newPosition) {
        if (newPosition < 0) {
            newPosition = 0;
        }
        if (newPosition > this.yMax) {
            newPosition = this.yMax;
        }
        this.position = newPosition;
        this.$grip.css('top', newPosition + "px");
        let zoomfactor = newPosition / (this.overallHeight - this.gripHeight);
        zoomfactor = this.zoomMin + zoomfactor * (this.zoomMax - this.zoomMin);
        let zfs = Math.round(zoomfactor * 100) + " %";
        this.$zoomcontrolDisplay.html(zfs);
        if (this.callback != null) {
            this.callback(zoomfactor);
        }
    }
}
ZoomControl.preventFading = false;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiWm9vbUNvbnRyb2wuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvY2xpZW50L21haW4vZ3VpL2RpYWdyYW1zL1pvb21Db250cm9sLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBRWhFLE1BQU0sT0FBTyxXQUFXO0lBZ0JwQixZQUFZLGNBQW1DLEVBQVUsUUFBdUM7UUFBdkMsYUFBUSxHQUFSLFFBQVEsQ0FBK0I7UUFaaEcsYUFBUSxHQUFXLENBQUMsQ0FBQztRQUtyQixlQUFVLEdBQVcsRUFBRSxDQUFDO1FBQ3hCLGtCQUFhLEdBQVcsR0FBRyxDQUFDO1FBRTVCLFlBQU8sR0FBVyxHQUFHLENBQUM7UUFDdEIsWUFBTyxHQUFXLENBQUMsQ0FBQztRQUloQixJQUFJLGlCQUFpQixHQUFHLE1BQU0sQ0FBQyx5RUFBeUUsQ0FBQyxDQUFDO1FBQzFHLGNBQWMsQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUN6QyxJQUFJLGVBQWUsR0FBRyxNQUFNLENBQUMsMERBQTBELENBQUMsQ0FBQztRQUN6RixpQkFBaUIsQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDMUMsSUFBSSxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsMkRBQTJELENBQUMsQ0FBQztRQUNqRixpQkFBaUIsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxNQUFNLENBQUMsNENBQTRDLENBQUMsQ0FBQztRQUNoRixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUU1QyxJQUFJLFVBQWtCLENBQUM7UUFDdkIsSUFBSSxXQUFtQixDQUFDO1FBQ3hCLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQztRQUNoQixJQUFJLENBQUMs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LENBQUMsVUFBVSxDQUFDLENBQUM7U0FDN0I7SUFFTCxDQUFDOztBQXhHYSx5QkFBYSxHQUFXLEtBQUssQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvbnZlcnRQeFRvTnVtYmVyIH0gZnJvbSBcIi4uLy4uLy4uL3Rvb2xzL0h0bWxUb29scy5qc1wiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFpvb21Db250cm9sIHtcclxuICAgIFxyXG4gICAgcHVibGljIHN0YXRpYyBwcmV2ZW50RmFkaW5nOmJvb2xlYW4gPSBmYWxzZTtcclxuXHJcbiAgICBwb3NpdGlvbjogbnVtYmVyID0gMDtcclxuICAgIHlNYXg6IG51bWJlcjtcclxuICAgICRncmlwOiBKUXVlcnk8SFRNTEVsZW1lbnQ+O1xyXG4gICAgJHpvb21jb250cm9sRGlzcGxheTogSlF1ZXJ5PEhUTUxFbGVtZW50PjtcclxuXHJcbiAgICBncmlwSGVpZ2h0OiBudW1iZXIgPSAxMDtcclxuICAgIG92ZXJhbGxIZWlnaHQ6IG51bWJlciA9IDE1MDtcclxuXHJcbiAgICB6b29tTWluOiBudW1iZXIgPSAwLjI7XHJcbiAgICB6b29tTWF4OiBudW1iZXIgPSAyO1xyXG5cclxuXHJcbiAgICBjb25zdHJ1Y3RvcigkcGFyZW50RWxlbWVudDogSlF1ZXJ5PEhUTUxFbGVtZW50PiwgcHJpdmF0ZSBjYWxsYmFjaz86ICh6b29tZmFjdG9yOiBudW1iZXIpID0+IHZvaWQpe1xyXG4gICAgICAgIGxldCAkem9vbWNvbnRyb2xPdXRlciA9IGpRdWVyeSgnPGRpdiBjbGFzcz1cImpvX3pvb21jb250cm9sLW91dGVyXCIgdGl0bGU9XCJab29tXCIgZHJhZ2dhYmxlPVwiZmFsc2VcIj48L2Rpdj4nKTtcclxuICAgICAgICAkcGFyZW50RWxlbWVudC5hcHBlbmQoJHpvb21jb250cm9sT3V0ZXIpO1xyXG4gICAgICAgIGxldCAkem9vbWNvbnRyb2xCYXIgPSBqUXVlcnkoJzxkaXYgY2xhc3M9XCJqb196b29tY29udHJvbC1iYXJcIiBkcmFnZ2FibGU9XCJmYWxzZVwiPjwvZGl2PicpO1xyXG4gICAgICAgICR6b29tY29udHJvbE91dGVyLmFwcGVuZCgkem9vbWNvbnRyb2xCYXIpO1xyXG4gICAgICAgIHRoaXMuJGdyaXAgPSBqUXVlcnkoJzxkaXYgY2xhc3M9XCJqb196b29tY29udHJvbC1ncmlwXCIgZHJhZ2dhYmxlPVwiZmFsc2VcIj48L2Rpdj4nKTtcclxuICAgICAgICAkem9vbWNvbnRyb2xPdXRlci5hcHBlbmQodGhpcy4kZ3JpcCk7XHJcbiAgICAgICAgdGhpcy4kem9vbWNvbnRyb2xEaXNwbGF5ID0galF1ZXJ5KCc8ZGl2IGNsYXNzPVwiam9fem9vbWNvbnRyb2wtZGlzcGxheVwiPjwvZGl2PicpO1xyXG4gICAgICAgIHRoaXMuJGdyaXAuYXBwZW5kKHRoaXMuJHpvb21jb250cm9sRGlzcGxheSk7XHJcblxyXG4gICAgICAgIGxldCBtb3VzZWRvd25ZOiBudW1iZXI7XHJcbiAgICAgICAgbGV0IG9sZFBvc2l0aW9uOiBudW1iZXI7XHJcbiAgICAgICAgbGV0IHRoYXQgPSB0aGlzO1xyXG4gICAgICAgIHRoYXQub3ZlcmFsbEhlaWdodCA9IGNvbnZlcnRQeFRvTnVtYmVyKCR6b29tY29udHJvbE91dGVyLmNzcygnaGVpZ2h0JykpO1xyXG4gICAgICAgIHRoYXQuZ3JpcEhlaWdodCA9IGNvbnZlcnRQeFRvTnVtYmVyKHRoYXQuJGdyaXAuY3NzKCdoZWlnaHQnKSk7XHJcbiAgICAgICAgdGhhdC55TWF4ID0gdGhhdC5vdmVyYWxsSGVpZ2h0IC0gdGhhdC5ncmlwSGVpZ2h0O1xyXG5cclxuICAgICAgICBsZXQgbW91c2VQb2ludGVyID0gd2luZG93LlBvaW50ZXJFdmVudCA/IFwicG9pbnRlclwiIDogXCJtb3VzZVwiO1xyXG5cclxuICAgICAgICAkem9vbWNvbnRyb2xCYXIub24obW91c2VQb2ludGVyICsgJ2Rvd24nLCAoZSkgPT4ge1xyXG5cclxuICAgICAgICAgICAgbGV0IHkgPSBlLnBhZ2VZIC0gJHpvb21jb250cm9sT3V0ZXIub2Zmc2V0KCkudG9wIC0gNDtcclxuICAgICAgICAgICAgdGhhdC5zZXRab29tKHkpO1xyXG4gICAgICAgICAgICB0aGF0LiRncmlwLmNzcygndG9wJywgeSArICdweCcpO1xyXG4gICAgICAgICAgICAvL0B0cy1pZ25vcmVcclxuICAgICAgICAgICAgdGhhdC4kZ3JpcC50cmlnZ2VyKG1vdXNlUG9pbnRlciArICdkb3duJywgW2UuY2xpZW50WV0pO1xyXG5cclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLiRncmlwLm9uKG1vdXNlUG9pbnRlciArICdkb3duJywgKGUsIHkpID0+IHtcclxuICAgICAgICAgICAgaWYoeSA9PSBudWxsKSB5ID0gZS5jbGllbnRZO1xyXG4gICAgICAgICAgICBtb3VzZWRvd25ZID0geTtcclxuICAgICAgICAgICAgb2xkUG9zaXRpb24gPSB0aGF0LnBvc2l0aW9uO1xyXG4gICAgICAgICAgICB0aGlzLiR6b29tY29udHJvbERpc3BsYXkuc2hvdygpO1xyXG5cclxuICAgICAgICAgICAgalF1ZXJ5KGRvY3VtZW50KS5vbihtb3VzZVBvaW50ZXIgKyAnbW92ZS56b29tY29udHJvbCcsIChlKT0+e1xyXG4gICAgICAgICAgICAgICAgbGV0IGRlbHRhWSA9IGUuY2xpZW50WSAtIG1vdXNlZG93blk7XHJcbiAgICAgICAgICAgICAgICB0aGF0LnNldFpvb20ob2xkUG9zaXRpb24gKyBkZWx0YVkpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGpRdWVyeShkb2N1bWVudCkub24obW91c2VQb2ludGVyICsgJ3VwLnpvb21jb250cm9sJywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgalF1ZXJ5KGRvY3VtZW50KS5vZmYobW91c2VQb2ludGVyICsgJ3VwLnpvb21jb250cm9sJyk7XHJcbiAgICAgICAgICAgICAgICBqUXVlcnkoZG9jdW1lbnQpLm9mZihtb3VzZVBvaW50ZXIgKyAnbW92ZS56b29tY29udHJvbCcpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kem9vbWNvbnRyb2xEaXNwbGF5LmhpZGUoKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgJHBhcmVudEVsZW1lbnQub24obW91c2VQb2ludGVyICsgXCJlbnRlclwiLCAoZSkgPT4ge1xyXG4gICAgICAgICAgICBpZighWm9vbUNvbnRyb2wucHJldmVudEZhZGluZylcclxuICAgICAgICAgICAgJHpvb21jb250cm9sT3V0ZXIuZmFkZUluKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgJHBhcmVudEVsZW1lbnQub24obW91c2VQb2ludGVyICsgXCJsZWF2ZVwiLCAoZSkgPT4ge1xyXG4gICAgICAgICAgICBpZighWm9vbUNvbnRyb2wucHJldmVudEZhZGluZylcclxuICAgICAgICAgICAgJHpvb21jb250cm9sT3V0ZXIuZmFkZU91dCgpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBsZXQgZmFjdG9yID0gKDEuMCAtIHRoaXMuem9vbU1pbikvKHRoaXMuem9vbU1heCAtIHRoaXMuem9vbU1pbik7XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IGZhY3RvcioodGhpcy5vdmVyYWxsSGVpZ2h0IC0gdGhpcy5ncmlwSGVpZ2h0KTtcclxuICAgICAgICB0aGlzLiRncmlwLmNzcygndG9wJywgdGhpcy5wb3NpdGlvbiArIFwicHhcIik7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0Wm9vbShuZXdQb3NpdGlvbjogbnVtYmVyKXtcclxuXHJcbiAgICAgICAgaWYobmV3UG9zaXRpb24gPCAwKXtcclxuICAgICAgICAgICAgbmV3UG9zaXRpb24gPSAwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYobmV3UG9zaXRpb24gPiB0aGlzLnlNYXgpe1xyXG4gICAgICAgICAgICBuZXdQb3NpdGlvbiA9IHRoaXMueU1heDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMucG9zaXRpb24gPSBuZXdQb3NpdGlvbjtcclxuXHJcbiAgICAgICAgdGhpcy4kZ3JpcC5jc3MoJ3RvcCcsIG5ld1Bvc2l0aW9uICsgXCJweFwiKTtcclxuXHJcbiAgICAgICAgbGV0IHpvb21mYWN0b3IgPSBuZXdQb3NpdGlvbi8odGhpcy5vdmVyYWxsSGVpZ2h0IC0gdGhpcy5ncmlwSGVpZ2h0KTtcclxuICAgICAgICB6b29tZmFjdG9yID0gdGhpcy56b29tTWluICsgem9vbWZhY3RvcioodGhpcy56b29tTWF4IC0gdGhpcy56b29tTWluKTtcclxuXHJcbiAgICAgICAgbGV0IHpmcyA9IE1hdGgucm91bmQoem9vbWZhY3RvciAqIDEwMCkgKyBcIiAlXCI7XHJcbiAgICAgICAgdGhpcy4kem9vbWNvbnRyb2xEaXNwbGF5Lmh0bWwoemZzKTtcclxuXHJcbiAgICAgICAgaWYodGhpcy5jYWxsYmFjayAhPSBudWxsKXtcclxuICAgICAgICAgICAgdGhpcy5jYWxsYmFjayh6b29tZmFjdG9yKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxufSJdfQ==