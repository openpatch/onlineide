import { PrimitiveType } from "../compiler/types/Types.js";
export class RuntimeObject {
    constructor(klass) {
        this.intrinsicData = {}; // for intrinsic (= builtin) classes to store data
        this.class = klass;
        this.initializeAttributeValues();
    }
    getValue(attributeIndex) {
        let av = this.attributes[attributeIndex];
        if ((av === null || av === void 0 ? void 0 : av.updateValue) != null) {
            av.updateValue(av);
        }
        return av;
    }
    initializeAttributeValues() {
        this.attributes = Array(this.class.numberOfAttributesIncludingBaseClass).fill(null);
        let klass = this.class;
        while (klass != null) {
            for (let att of klass.attributes) {
                let value = null;
                if (att.type instanceof PrimitiveType) {
                    value = att.type.initialValue;
                }
                let v = {
                    type: att.type,
                    value: value
                };
                if (att.updateValue != null) {
                    v.updateValue = att.updateValue;
                    v.object = this;
                }
                this.attributes[att.index] = v;
            }
            klass = klass.baseClass;
        }
    }
}
export function deepCopy(obj) {
    var copy;
    // Handle the 3 simple types, and null or undefined
    if (null == obj || "object" != typeof obj)
        return obj;
    // Handle Date
    if (obj instanceof Date) {
        copy = new Date();
        copy.setTime(obj.getTime());
        return copy;
    }
    // Handle Array
    if (obj instanceof Array) {
        copy = [];
        for (var i = 0, len = obj.length; i < len; i++) {
            copy[i] = deepCopy(obj[i]);
        }
        return copy;
    }
    // Handle Object
    if (obj instanceof Object) {
        copy = {};
        for (var attr in obj) {
            if (obj.hasOwnProperty(attr))
                copy[attr] = deepCopy(obj[attr]);
        }
        return copy;
    }
    throw new Error("Unable to copy obj! Its type isn't supported.");
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUnVudGltZU9iamVjdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jbGllbnQvaW50ZXJwcmV0ZXIvUnVudGltZU9iamVjdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsYUFBYSxFQUFTLE1BQU0sNEJBQTRCLENBQUM7QUFJbEUsTUFBTSxPQUFPLGFBQWE7SUFXdEIsWUFBWSxLQUEwQjtRQVB0QyxrQkFBYSxHQUFxQyxFQUFFLENBQUMsQ0FBRSxrREFBa0Q7UUFTckcsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFFbkIsSUFBSSxDQUFDLHlCQUF5QixFQUFFLENBQUM7SUFFckMsQ0FBQztJQUVELFFBQVEsQ0FBQyxjQUFzQjtRQUUzQixJQUFJLEVBQUUsR0FBVSxJQUFJLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ2hELElBQUcsQ0FBQSxFQUFFLGFBQUYsRUFBRSx1QkFBRixFQUFFLENBQUUsV0FBVyxLQUFJLElBQUksRUFBQztZQUN2QixFQUFFLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ3RCO1FBQ0QsT0FBTyxFQUFFLENBQUM7SUFFZCxDQUFDO0lBRU8seUJBQXlCO1FBRTdCLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsb0NBQW9DLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFcEYsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztRQUN2QixPQUFNLEtBQUssSUFBSSxJQUFJLEVBQUM7WUFFaEIsS0FBSSxJQUFJLEdBQUcsSUFBSSxLQUFLLENBQUMsVUFBVSxFQUFDO2dCQUU1QixJQUFJLEtBQUssR0FBTyxJQUFJLENBQUM7Z0JBQ3JCLElBQUcsR0FBRyxDQUFDLElBQUksWUFBWSxhQUFhLEVBQUM7b0JBQ2pDLEtBQUssR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQztpQkFDakM7Z0JBRUQsSUFBSSxDQUFDLEdBQVU7b0JBQ1gsSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJO29CQUNkLEtBQUssRUFBRSxLQUFLO2lCQUNmLENBQUM7Z0JBRUYsSUFBRyxHQUFHLENBQUMsV0FBVyxJQUFJLElBQUksRUFBQztvQkFDdkIsQ0FBQyxDQUFDLFdBQVcsR0FBRyxHQUFHLENBQUMsV0FBVyxDQUFDO29CQUNoQyxDQUFDLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztpQkFDbkI7Z0JBRUQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBRWxDO1lBRUQsS0FBSyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUM7U0FDM0I7SUFFTCxDQUFDO0NBRUo7QUFHRCxNQUFNLFVBQVUsUUFBUSxDQUFDLEdBQVE7SUFFN0IsSUFBSSxJQUFTLENBQUM7SUFFZCxtREFBbUQ7SUFDbkQsSUFBSSxJQUFJLElBQUksR0FBRyxJQUFJLFFBQVEsSUFBSSxPQUFPLEdBQUc7UUFBRSxPQUFPLEdBQUcsQ0FBQztJQUV0RCxjQUFjO0lBQ2QsSUFBSSxHQUFHLFlBQVksSUFBSSxFQUFFO1FBQ3JCLElBQUksR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQ2xCLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUM7UUFDNUIsT0FBTyxJQUFJLENBQUM7S0FDZjtJQUVELGVBQWU7SUFDZixJQUFJLEdBQUcsWUFBWSxLQUFLLEVBQUU7UUFDdEIsSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUNWLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDNUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUM5QjtRQUNELE9BQU8sSUFBSSxDQUFDO0tBQ2Y7SUFFRCxnQkFBZ0I7SUFDaEIsSUFBSSxHQUFHLFlBQVksTUFBTSxFQUFFO1FBQ3ZCLElBQUksR0FBRyxFQUFFLENBQUM7UUFDVixLQUFLLElBQUksSUFBSSxJQUFJLEdBQUcsRUFBRTtZQUNsQixJQUFJLEdBQUcsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDO2dCQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7U0FDbEU7UUFDRCxPQUFPLElBQUksQ0FBQztLQUNmO0lBRUQsTUFBTSxJQUFJLEtBQUssQ0FBQywrQ0FBK0MsQ0FBQyxDQUFDO0FBRXJFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBLbGFzcywgU3RhdGljQ2xhc3MsIFZpc2liaWxpdHkgfSBmcm9tIFwiLi4vY29tcGlsZXIvdHlwZXMvQ2xhc3MuanNcIjtcclxuaW1wb3J0IHsgUHJpbWl0aXZlVHlwZSwgVmFsdWUgfSBmcm9tIFwiLi4vY29tcGlsZXIvdHlwZXMvVHlwZXMuanNcIjtcclxuXHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIFJ1bnRpbWVPYmplY3Qge1xyXG5cclxuICAgIGNsYXNzOiBLbGFzcyB8IFN0YXRpY0NsYXNzO1xyXG5cclxuICAgIGludHJpbnNpY0RhdGE6IHtbY2xhc3NJZGVudGlmaWVyOiBzdHJpbmddOiBhbnl9ID0ge307ICAvLyBmb3IgaW50cmluc2ljICg9IGJ1aWx0aW4pIGNsYXNzZXMgdG8gc3RvcmUgZGF0YVxyXG5cclxuICAgIC8vIEF0dHJpYnV0ZXMgb2YgY2xhc3MgYW5kIGJhc2UtY2xhc3Nlc1xyXG4gICAgLy8gTWFwIGNsYXNzLWlkZW50aWZpZXIgdG8gTWFwIDxhdHRyaWJ1dGUtaWRlbnRpZmllciwgYXR0cmlidXRlLXZhbHVlPlxyXG4gICAgLy8gYXR0cmlidXRlVmFsdWVzOiBNYXA8c3RyaW5nLCBNYXA8c3RyaW5nLCBWYWx1ZT4+ID0gbmV3IE1hcCgpO1xyXG4gICAgYXR0cmlidXRlczogVmFsdWVbXTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihrbGFzczogS2xhc3MgfCBTdGF0aWNDbGFzcyApIHtcclxuXHJcbiAgICAgICAgdGhpcy5jbGFzcyA9IGtsYXNzO1xyXG5cclxuICAgICAgICB0aGlzLmluaXRpYWxpemVBdHRyaWJ1dGVWYWx1ZXMoKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgZ2V0VmFsdWUoYXR0cmlidXRlSW5kZXg6IG51bWJlcik6VmFsdWV7XHJcblxyXG4gICAgICAgIGxldCBhdjogVmFsdWUgPSB0aGlzLmF0dHJpYnV0ZXNbYXR0cmlidXRlSW5kZXhdO1xyXG4gICAgICAgIGlmKGF2Py51cGRhdGVWYWx1ZSAhPSBudWxsKXtcclxuICAgICAgICAgICAgYXYudXBkYXRlVmFsdWUoYXYpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYXY7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaW5pdGlhbGl6ZUF0dHJpYnV0ZVZhbHVlcygpe1xyXG5cclxuICAgICAgICB0aGlzLmF0dHJpYnV0ZXMgPSBBcnJheSh0aGlzLmNsYXNzLm51bWJlck9mQXR0cmlidXRlc0luY2x1ZGluZ0Jhc2VDbGFzcykuZmlsbChudWxsKTtcclxuXHJcbiAgICAgICAgbGV0IGtsYXNzID0gdGhpcy5jbGFzcztcclxuICAgICAgICB3aGlsZShrbGFzcyAhPSBudWxsKXtcclxuXHJcbiAgICAgICAgICAgIGZvcihsZXQgYXR0IG9mIGtsYXNzLmF0dHJpYnV0ZXMpe1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWU6YW55ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIGlmKGF0dC50eXBlIGluc3RhbmNlb2YgUHJpbWl0aXZlVHlwZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBhdHQudHlwZS5pbml0aWFsVmFsdWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IHY6IFZhbHVlID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IGF0dC50eXBlLFxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVxyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZihhdHQudXBkYXRlVmFsdWUgIT0gbnVsbCl7XHJcbiAgICAgICAgICAgICAgICAgICAgdi51cGRhdGVWYWx1ZSA9IGF0dC51cGRhdGVWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB2Lm9iamVjdCA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICB9IFxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB0aGlzLmF0dHJpYnV0ZXNbYXR0LmluZGV4XSA9IHY7XHJcblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBrbGFzcyA9IGtsYXNzLmJhc2VDbGFzcztcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxufVxyXG5cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBkZWVwQ29weShvYmo6IGFueSk6IGFueSB7XHJcblxyXG4gICAgdmFyIGNvcHk6IGFueTtcclxuXHJcbiAgICAvLyBIYW5kbGUgdGhlIDMgc2ltcGxlIHR5cGVzLCBhbmQgbnVsbCBvciB1bmRlZmluZWRcclxuICAgIGlmIChudWxsID09IG9iaiB8fCBcIm9iamVjdFwiICE9IHR5cGVvZiBvYmopIHJldHVybiBvYmo7XHJcblxyXG4gICAgLy8gSGFuZGxlIERhdGVcclxuICAgIGlmIChvYmogaW5zdGFuY2VvZiBEYXRlKSB7XHJcbiAgICAgICAgY29weSA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgY29weS5zZXRUaW1lKG9iai5nZXRUaW1lKCkpO1xyXG4gICAgICAgIHJldHVybiBjb3B5O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEhhbmRsZSBBcnJheVxyXG4gICAgaWYgKG9iaiBpbnN0YW5jZW9mIEFycmF5KSB7XHJcbiAgICAgICAgY29weSA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBvYmoubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgY29weVtpXSA9IGRlZXBDb3B5KG9ialtpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjb3B5O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIEhhbmRsZSBPYmplY3RcclxuICAgIGlmIChvYmogaW5zdGFuY2VvZiBPYmplY3QpIHtcclxuICAgICAgICBjb3B5ID0ge307XHJcbiAgICAgICAgZm9yICh2YXIgYXR0ciBpbiBvYmopIHtcclxuICAgICAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShhdHRyKSkgY29weVthdHRyXSA9IGRlZXBDb3B5KG9ialthdHRyXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBjb3B5O1xyXG4gICAgfVxyXG5cclxuICAgIHRocm93IG5ldyBFcnJvcihcIlVuYWJsZSB0byBjb3B5IG9iaiEgSXRzIHR5cGUgaXNuJ3Qgc3VwcG9ydGVkLlwiKTtcclxuXHJcbn1cclxuXHJcbiJdfQ==